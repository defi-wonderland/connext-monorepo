// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import {Common} from "./Common.sol";
import {Connector} from "../../../../../../../contracts/messaging/connectors/Connector.sol";
import {IBridge} from "./forTest/IBridge.sol";

contract Integration_Connector_TaikoSpokeConnector_Receive is Common {
  /**
   * @notice Emitted when a root is received by the Root Manager
   * @param root The received root
   */
  event AggregateRootReceived(bytes32 indexed root);

  /**
   * @notice The message status enum from Taiko
   */
  enum MessageStatus {
    NEW,
    RETRIABLE,
    DONE,
    FAILED
  }

  /**
   * @notice Tests it receives the root correctly when relaying the message sent on Taiko L2.
   * @dev To assert it the `RootReceived` event is expected to be emitted with the correct arguments.
   * @dev A Taiko `BridgeForTest` instance to bypass the validation of the proof. To do this, all the Taiko system contracts
   * are copy pasted in the `./forTest/` folder, and the part of the proof validation while processing the message is commented.
   */
  function test_receiveMessage() public {
    // relay message on taiko
    IBridge.Message memory _message = IBridge.Message({
      id: 205254,
      from: MIRROR_CONNECTOR,
      srcChainId: SEPOLIA_CHAIN_ID,
      destChainId: TAIKO_CHAIN_ID,
      user: MIRROR_CONNECTOR,
      to: address(taikoSpokeConnector),
      refundTo: address(taikoSpokeConnector),
      value: 0,
      fee: 0,
      gasLimit: _gasCap,
      data: abi.encodeWithSelector(Connector.processMessage.selector, abi.encode(bytes32("aggregateRoot"))),
      memo: ""
    });

    // Expect the root to be received
    vm.expectEmit(true, true, true, true, address(taikoSpokeConnector));
    emit AggregateRootReceived(bytes32("aggregateRoot"));

    // The proof of the message sent grabbed from Sepolia
    bytes
      memory _proof = hex"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000209a06000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008f6f908f3b90214f90211a0c6867c9926bcd1ada379bc7810418208163eaab11f4b40cc3069a59a826c7830a084803753255a345044b426f0a866d1ddb76c9f99e223c4a922fa8c7866362b6da0281aaf013b06c958759ed721f2ccd72a5d5308c2ec5d35b39a85ef311ec8c176a0b960108995af2f34604efadb65d13bd6a72cbb67a93d48d073e07123cacb19f0a0e07aacadb9909e377351c335fe7fd10192702ebd7c751c7f6292d0cb978b7b23a0a7cf09ea3fb8400696a3b7d8c98978db3cd062978a4747fe2155b858005b405fa05bc936fa76581867140575daf8b704d40986854bad11e51b39bd29d2ecbbeb5fa093f8a7e45bda1d0aadf8ecf3c0a59c71eedcbee8b6a4e7161ade1420b2cc95e3a06268da789462c60ed84ba41930ce176508a51452f5f85a3a3135138053775074a0c9c4608a5cc334edc42b4e2a18d0ffb7f6f1c205ac9407e57b5b655938e2d052a09192532d37ff31cd04546d21af7620674c62a5a881c0fe418133a2eaefcb8ff5a09bbfbb5e060a4d792fd9dfed8fdb638af8173b3449290f5d337cb5b122f09b19a0a79edded040fd1a4c926717eb48bc11f73234067c6a57b48f6a391234f2c12b4a05e1028aae9c0676e60efeb8da5ca9145b010b34ae1e55a23442f5d01920ba406a0fe057d5d342000265585e44415d657a3685ebe6b3a3fdf978deee61f2e42802aa01a074e508ecadec396ea6cede594fb30b13219818845e59216a65a52fee2573080b90214f90211a0a1d210ed15dec52eddfe120362c390acde3320cf9d65a0cd95c9ffa554144719a0aabe84a7a76fe5091bf9b6b3fcf8eb9ea200068f7d16bc893491797fb0d08b0da0f6c6f463daa73bcdc3b91e9d5d1a61b15b18692a1306147c13e38bac0c428c09a0004caa4751c4212966e71cf53e401ac9bb74b1a02f230a671c678abc8f39502ea02acfbbb10fdd64b622662ec2ff3cbb705025205ea3ee18547167de086ef24c14a09c4aebbba254e38d98bee063473953c49c8eb7e72e4c0f99cb78907565f7c4a6a0bdbba38e4340a073056f5613dd35da02de86a9c888ee638a70d8ffb2fa49e151a02e78a1e84da4bece2626b08267b7ed5de08f6e138332d5ba975a0226035845d8a00b34d208d0615ede7de0a4636d6f6383322167799940b80f107e608e40ee3fd4a06405e9c4104c2123986544ed97fd90c28319ba7f1586bd5216e8290484cc2194a054b7a8426ed22f92045b57a6bf2b16847fb8f399a2367cf7644386b6269c5aeca0f6907b952100c1382712abd8df5ee1a7b1826d2449ca4aedc6ec88e50cabcf98a0ceb77e8b72bd81dbfced6ccf559f41e79f3fe92d1cadb9c72865cf87efba8ccca0cb05c6c6bfedf51e3828262dd7e047df0955aac4a73af27acd795c9bbed28955a0bba00ba81e6d55bb9997b095def835a57bdd6ed1abc09b329a989b5c52bf4e96a051c70b7ce78fbbde7ba2f6c1a8496f1f0b0dca88d2a85a085ca8f18808ecf02980b90214f90211a00a49d76443ee38e5950aa604aaf28373154041c9ee4ab08e084135a2a04d625fa0cfc81e9b9d5bae2c1fce23e36c1c890c72fae22bfc6761beb1da8fdfe14b016ea05c938e0ce1f71871793e8f9d87f5944c8559cb16140e066d2303a4b96057eacfa05262843aa5482c858d714c60cf2a0d24bcfedf47fd75c42a40a2ab51b5107dbaa059b46efe4a81a6983b51b2b9ceb563233a0752db55bce1c80a5300de757c0adda0729143f0451558d2f75ab267e2121725a70d663122ffc4a410f820909ec0d8baa051eafe3bd3c6ce408fbac81ea3cb5372425fd11adaee338d79ce8c6c517c0c58a09233793f4934cb1ba8e1a28e9be92ffeb6dca13d219af61e94ee72251a2b1111a05e306093b52fed454b5ab4e6104833a87847cd09a25a45d9ceb183b8286a9d72a0780bb154c974b3571394b0ca7c05ee28d14332762b43556747ddbbf35f6e3374a0d883dcb5a02ac63cb0bd7dc1959a60beb5e73ef582dd203950981d249b941db8a0d0c7a9e4118ef34c95f74aed780fa2feee7972b25d5986cf50e8fa3d4600f4afa0eca0979b7a6a725ba1dbf1f3bcc96b398de44d048e36f97a44a777def583f403a07d32a4a893356e42d5b3c7bf4c9ee2c02fdfde12ce94d81065aa115f60900621a0712aeb1f0362533fbb09e0449d0de361097d1775c8f43be6b8ad6baa74bacacea059bfa940d21663efe0fe7d0170c154d7815bffda482565584d8dbeffd5229b7880b901f4f901f1a06356f9244551b9e583a00dcc802664d7dd7df6d9cacaa4b9418e301bc71068e1a01adccf42adb9f06836054d2ba90da901d3c6b64b669763c0bd57d974c99654b9a0e3bc39f8ade839aa7feaf3d05fcd87e147d21137bb0d51adef65e614756c166ca0d13be634e2b897617ea4e2ce072fad5ba990d95f4399174fc68cb9a584eeb2eca0fd6af0453837b20c1e4724b8433ed724d632d0c6a18378cf62987e929b67e558a00e5518126e9fc5784bea31a1c03f1b5fa640b305239e045b7655b93f1b5a64ad80a07a1e1e15982b0b964ee753601a7620f882ee329c0e03a3fd5e30f955b5c6b744a04b7287149591734f3a0d8e8df1055bef03ac5ad668daa8053c0eef65cd463052a03d226fe54eab77d25748b00bf233f140d29b62af57326394a8a621879b3371f9a0b158ab8f014ddac75f8ea396ef8818a038f5daa6c401c301ded19de89ae549fda0b670fe9d792248540c2ed78909dae3522801d1d04943188e0710550d1ea93d49a09b33b15fd193ba6288db172835389c18a13c16af167f7a2505638a6bf35bf18fa07253ec57eb3c2bd4fd23a9bb5dbdc0e666e2d835c1968dae67bceca3f25f22dea02aa462d37f4d3f7a8b34eff1d3dbea207adb634637338f5d41156dd80df0ecb0a0305a0599776d670fb18f067035d2cfd925d702c3ad6be4e667d1ff6d802ba01980b893f8918080a010a2c9b6e6715e02eeb6ff339840f43914bed8e48577e00b4b66d2eb6939acc8a09416d711e1e131da0016cfddf770e00454b82489a0e123fc7676a67a1e9b73dd8080a0edf2bad5b74236e635f8bf9d420faacb44dc26ae602e45f32f11fb07a6879c1f8080808080a04f1604a9c70fd2db0971ff62e965db52312054e0e0b7d12e3b9d04a4fcd50e4680808080a1e09e3f3d16690f5c2349a1d981ec518142a314b3dc599346d3e4190a5d3ff2ae0100000000000000000000";
    bridge.processMessage(_message, _proof);
  }

  /**
   * @notice Tests it receives the first root, and it reverts when the same root is relayed again.
   * @dev To assert it, after sending the same root twice, the message status is checked to be retriable instead of done
   * since it should fail and be updated to the mentioned state.
   */
  function test_revertIfSameRootIsRelayedTwice() public {
    // relay message on taiko
    uint256 _messageId = 205254;
    IBridge.Message memory _message = IBridge.Message({
      id: _messageId,
      from: MIRROR_CONNECTOR,
      srcChainId: SEPOLIA_CHAIN_ID,
      destChainId: TAIKO_CHAIN_ID,
      user: MIRROR_CONNECTOR,
      to: address(taikoSpokeConnector),
      refundTo: address(taikoSpokeConnector),
      value: 0,
      fee: 0,
      gasLimit: _gasCap,
      data: abi.encodeWithSelector(Connector.processMessage.selector, abi.encode(bytes32("aggregateRoot"))),
      memo: ""
    });

    // Expect the root to be received
    vm.expectEmit(true, true, true, true, address(taikoSpokeConnector));
    emit AggregateRootReceived(bytes32("aggregateRoot"));

    // The proof of the message sent grabbed from Sepolia
    bytes
      memory _proof = hex"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000209a06000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008f6f908f3b90214f90211a0c6867c9926bcd1ada379bc7810418208163eaab11f4b40cc3069a59a826c7830a084803753255a345044b426f0a866d1ddb76c9f99e223c4a922fa8c7866362b6da0281aaf013b06c958759ed721f2ccd72a5d5308c2ec5d35b39a85ef311ec8c176a0b960108995af2f34604efadb65d13bd6a72cbb67a93d48d073e07123cacb19f0a0e07aacadb9909e377351c335fe7fd10192702ebd7c751c7f6292d0cb978b7b23a0a7cf09ea3fb8400696a3b7d8c98978db3cd062978a4747fe2155b858005b405fa05bc936fa76581867140575daf8b704d40986854bad11e51b39bd29d2ecbbeb5fa093f8a7e45bda1d0aadf8ecf3c0a59c71eedcbee8b6a4e7161ade1420b2cc95e3a06268da789462c60ed84ba41930ce176508a51452f5f85a3a3135138053775074a0c9c4608a5cc334edc42b4e2a18d0ffb7f6f1c205ac9407e57b5b655938e2d052a09192532d37ff31cd04546d21af7620674c62a5a881c0fe418133a2eaefcb8ff5a09bbfbb5e060a4d792fd9dfed8fdb638af8173b3449290f5d337cb5b122f09b19a0a79edded040fd1a4c926717eb48bc11f73234067c6a57b48f6a391234f2c12b4a05e1028aae9c0676e60efeb8da5ca9145b010b34ae1e55a23442f5d01920ba406a0fe057d5d342000265585e44415d657a3685ebe6b3a3fdf978deee61f2e42802aa01a074e508ecadec396ea6cede594fb30b13219818845e59216a65a52fee2573080b90214f90211a0a1d210ed15dec52eddfe120362c390acde3320cf9d65a0cd95c9ffa554144719a0aabe84a7a76fe5091bf9b6b3fcf8eb9ea200068f7d16bc893491797fb0d08b0da0f6c6f463daa73bcdc3b91e9d5d1a61b15b18692a1306147c13e38bac0c428c09a0004caa4751c4212966e71cf53e401ac9bb74b1a02f230a671c678abc8f39502ea02acfbbb10fdd64b622662ec2ff3cbb705025205ea3ee18547167de086ef24c14a09c4aebbba254e38d98bee063473953c49c8eb7e72e4c0f99cb78907565f7c4a6a0bdbba38e4340a073056f5613dd35da02de86a9c888ee638a70d8ffb2fa49e151a02e78a1e84da4bece2626b08267b7ed5de08f6e138332d5ba975a0226035845d8a00b34d208d0615ede7de0a4636d6f6383322167799940b80f107e608e40ee3fd4a06405e9c4104c2123986544ed97fd90c28319ba7f1586bd5216e8290484cc2194a054b7a8426ed22f92045b57a6bf2b16847fb8f399a2367cf7644386b6269c5aeca0f6907b952100c1382712abd8df5ee1a7b1826d2449ca4aedc6ec88e50cabcf98a0ceb77e8b72bd81dbfced6ccf559f41e79f3fe92d1cadb9c72865cf87efba8ccca0cb05c6c6bfedf51e3828262dd7e047df0955aac4a73af27acd795c9bbed28955a0bba00ba81e6d55bb9997b095def835a57bdd6ed1abc09b329a989b5c52bf4e96a051c70b7ce78fbbde7ba2f6c1a8496f1f0b0dca88d2a85a085ca8f18808ecf02980b90214f90211a00a49d76443ee38e5950aa604aaf28373154041c9ee4ab08e084135a2a04d625fa0cfc81e9b9d5bae2c1fce23e36c1c890c72fae22bfc6761beb1da8fdfe14b016ea05c938e0ce1f71871793e8f9d87f5944c8559cb16140e066d2303a4b96057eacfa05262843aa5482c858d714c60cf2a0d24bcfedf47fd75c42a40a2ab51b5107dbaa059b46efe4a81a6983b51b2b9ceb563233a0752db55bce1c80a5300de757c0adda0729143f0451558d2f75ab267e2121725a70d663122ffc4a410f820909ec0d8baa051eafe3bd3c6ce408fbac81ea3cb5372425fd11adaee338d79ce8c6c517c0c58a09233793f4934cb1ba8e1a28e9be92ffeb6dca13d219af61e94ee72251a2b1111a05e306093b52fed454b5ab4e6104833a87847cd09a25a45d9ceb183b8286a9d72a0780bb154c974b3571394b0ca7c05ee28d14332762b43556747ddbbf35f6e3374a0d883dcb5a02ac63cb0bd7dc1959a60beb5e73ef582dd203950981d249b941db8a0d0c7a9e4118ef34c95f74aed780fa2feee7972b25d5986cf50e8fa3d4600f4afa0eca0979b7a6a725ba1dbf1f3bcc96b398de44d048e36f97a44a777def583f403a07d32a4a893356e42d5b3c7bf4c9ee2c02fdfde12ce94d81065aa115f60900621a0712aeb1f0362533fbb09e0449d0de361097d1775c8f43be6b8ad6baa74bacacea059bfa940d21663efe0fe7d0170c154d7815bffda482565584d8dbeffd5229b7880b901f4f901f1a06356f9244551b9e583a00dcc802664d7dd7df6d9cacaa4b9418e301bc71068e1a01adccf42adb9f06836054d2ba90da901d3c6b64b669763c0bd57d974c99654b9a0e3bc39f8ade839aa7feaf3d05fcd87e147d21137bb0d51adef65e614756c166ca0d13be634e2b897617ea4e2ce072fad5ba990d95f4399174fc68cb9a584eeb2eca0fd6af0453837b20c1e4724b8433ed724d632d0c6a18378cf62987e929b67e558a00e5518126e9fc5784bea31a1c03f1b5fa640b305239e045b7655b93f1b5a64ad80a07a1e1e15982b0b964ee753601a7620f882ee329c0e03a3fd5e30f955b5c6b744a04b7287149591734f3a0d8e8df1055bef03ac5ad668daa8053c0eef65cd463052a03d226fe54eab77d25748b00bf233f140d29b62af57326394a8a621879b3371f9a0b158ab8f014ddac75f8ea396ef8818a038f5daa6c401c301ded19de89ae549fda0b670fe9d792248540c2ed78909dae3522801d1d04943188e0710550d1ea93d49a09b33b15fd193ba6288db172835389c18a13c16af167f7a2505638a6bf35bf18fa07253ec57eb3c2bd4fd23a9bb5dbdc0e666e2d835c1968dae67bceca3f25f22dea02aa462d37f4d3f7a8b34eff1d3dbea207adb634637338f5d41156dd80df0ecb0a0305a0599776d670fb18f067035d2cfd925d702c3ad6be4e667d1ff6d802ba01980b893f8918080a010a2c9b6e6715e02eeb6ff339840f43914bed8e48577e00b4b66d2eb6939acc8a09416d711e1e131da0016cfddf770e00454b82489a0e123fc7676a67a1e9b73dd8080a0edf2bad5b74236e635f8bf9d420faacb44dc26ae602e45f32f11fb07a6879c1f8080808080a04f1604a9c70fd2db0971ff62e965db52312054e0e0b7d12e3b9d04a4fcd50e4680808080a1e09e3f3d16690f5c2349a1d981ec518142a314b3dc599346d3e4190a5d3ff2ae0100000000000000000000";
    bridge.processMessage(_message, _proof);

    // relay message on taiko
    _messageId = 205255;
    IBridge.Message memory _secondMessage = IBridge.Message({
      id: _messageId,
      from: MIRROR_CONNECTOR,
      srcChainId: SEPOLIA_CHAIN_ID,
      destChainId: TAIKO_CHAIN_ID,
      user: MIRROR_CONNECTOR,
      to: address(taikoSpokeConnector),
      refundTo: address(taikoSpokeConnector),
      value: 0,
      fee: 0,
      gasLimit: _gasCap,
      data: abi.encodeWithSelector(Connector.processMessage.selector, abi.encode(bytes32("aggregateRoot"))),
      memo: ""
    });

    /*
     * The call will revert on the spoke connector but not on the first call to the bridge, so `expectRevert` can't be used here.
     * Instead is checked that the second call failed and the status of the message is updated to retriable instead of done
     */
    bytes
      memory _secondProof = hex"100000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000002096f200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000956f90953b90214f90211a0a2c44bfb7728e757af9ec0d672b8a7dee495613b336410383305d2ae73a6ef82a0f10ff96459735e1b6075b5158306229740d64a23382cedb30c0b83ecf2897c14a06d90e16f6ef95f50ffaa1bbde05bb72c9c635f557310c7e5950b057914d48a61a0b960108995af2f34604efadb65d13bd6a72cbb67a93d48d073e07123cacb19f0a0e75082b8935717e08a19e2b60fbbdbf9005c411cee1200aa555aa9a65c088c6aa0f884f877605ffdfd891a8a6d5298c3a089ae8f6e73baf975186b92a5271e82a2a047cb4e2bb2601058d71161a712c88748ec21c2f431db68b40aa6ae7d4a839c63a00063eadc7f4c6679915e4913bd1c27da62584a08503a4abee03e783dc18ea868a06268da789462c60ed84ba41930ce176508a51452f5f85a3a3135138053775074a0973cce26fbe3be934a2dfaf3cc7c76823657457df1934b9c85c44019ddaf184aa01de90ee62d3bbc895f5450ff738de09fe712aa6339521175b9deb72e9218253fa098cc086f5592f4fc8fd0986fb00bc1a917998a80f2e4d51f8f3a755ed1e7305ca0ce5c37291838addd4de01b3e9220a8a81179eb26d247ecdf4e62ec69cadd00c3a0eef2b5b44b15f6d63c52600783dcd26c78c11d11a76802804d6a6cba5db98707a042095cd377e137bd35847fe1143f6dc295cd93d41fe4fab22bfaf73b50d9ac2ea080ecf8eb9ba8be0b228ac47770752cc15b332a5147981e3a04f8e836bb986a0180b90214f90211a0aad2f9a3d48951ae15b0c9f88077bf511134f04e4a3b7da61009ab5355de5df9a02d5a7f200d5998793ca2512229c4ee496d323334a189ef0121e809f7ece36110a010a25869df279bd23ef09b4144af9063320614bb03d40e02e3d1073314bacc31a01fd985a17bf24c7aedd9fe2fc966a18336322683ceed25fd68f1764105368960a069baff45cd9cbfda8be9162fffe96824bfdda0e7ad4194b2f1b56e074cebd085a0379c3b4fe1782a60ab0e360e96a466d7f7be1be2152c7c1ae1f7e431565a468ea01393b809318ba2290081392e41908454d4f5631ca73d31a842be0958fb9abcbda0a257efc297d812cc5864c15fa677019949fb984c6ffb09499452f1fcbcbae17ba044225c8b2e4eb283eeeca2f029f325ebf0d5d8e4e5beb5d44179103631416917a0f7e127d0e75c8fe509da4e0088f9a83f167b24076005c6a80b3a868e5c4920dfa06a300e881a2b65b8709c22842bdf1c299cc0a4cd2b276a128f340c586e6bdb75a0d34db9b29f24ce40bebf7c8108a1e179ebec780c1d4a67b39392f31ff1e0e4eea09c6b0bad2280336492cc32c3569ffb8d2a5612bfeffba30d1920b86c9fec8b89a09cb0d7f3f822b9184ff3c77b2a8f5e5b5f9f590b31c5b1f0e30526a6701ead65a08738f49506f313ccf96d5cd90c544b086d139a20ae500086f568c85e314b5813a051a5f1f0ef5f8611d0615fc919c27b223b4f05547d3770beaf7df556c28f63ac80b90214f90211a00473d37f64ed82dd873c468e700c772a794b67f1ff1328c694370c9143773fe3a0333e65b3cfb7a9135fa6ef400befcfeb15ad2c9e1271ffa580a9ebcda3a18cfda082b42d596219a810be5b4809a412f3eab763752446847d11356980e3ad001d8ba0c81ab7e48041e469ad67c65811103c5ca6f0e4163d0559b337a558ce2b055196a0773aacd32789e244891d85d6b904a2c74c15b1a704d10c7ea6d908c5d21e0b8fa02ef9ea119c6749e52e6b9e50ca2e642c7cb42f781b21b6a66aaf4399ea8f0489a0064050939595ce491966ed39204450182c46e7815869029bb468a5e6f7b03f1da0c18d34f043f5eebac94cee4fd75f4a0582c83393e220ef364d89dfbd8590d069a0e78476fb8bfd8db4e1f0a9d4fe2b2d0982ff28439aef7dc8555e98b8c365240fa095bdb9b9491da4b6a53757d65dcdba0d26182580e2251ca7ad3a47f185354bf4a0fa5f75b38a4e6b1d1b2a2c2e4871434936130c190636572ebe777595cddf6a8ca0cf6adf07bd82a0086c405523ff48e53a55fa9ef49329b8aa3f32401a0ff57680a0fcbcaeb015f78993db8d9dc49dbbe91c98e2992ecd60631cf5b7d5a8e58c51e3a04747983515afbab94f77a36b1e6aefa3c78a98d77708c06c9acaaa3aab8102d6a0cf0e5fd7abab7fbbf34f31772d7a50198be90c230fb8644ef8cbc8ddd65fe862a007670594afb8559d950b60234182139f4d4935323a52abdf7f4f0c8cf3a16fa080b90214f90211a0ebca3a10e7ed1914de5da0dcd4bca656d16c110b99a15f336107813e42021042a050c12fa21729ff4c0fb5c445d7f7d73d529e54fd41a83c7c5308ffc4d058641fa003c7b0013b6afdacb3f3d37ca15409a580a72c742d35484fa5d7a724870e494ea080f7627ed40007c3e27e745ab41e6be38954116cf0c97ffe219ab2c31d6de015a042b28c62bf5fed89d7ca486bfb0cc2fd51826bd1e5fd145309033b3de0f8c4e9a00c4a28fe11b02f3d56f8eb6f801ed0031b584219f741a38bc9bcdab6b70cb2bda0f9424d1bf1c4a3900ccb1b1de212d2f987225098c7e33524ac51b015377edf05a098bf8cf5bb79379eb90140b151dc9ade90101ee201825fa65f08f6602f35a3b1a0251e3cbf032b3183a4162a52708ad7151028ee35ee612aa4ec553efba6b9c0e8a0a696872f57f74644a4047c1e93a4c8844c8420682d26059f7fb13119abc47228a0d0e8b1a32738c6c2ac0db0588ab9c6520bf6e85e0a462379c1deca564ed62d63a0063c5af8b3f4e803eecfb844933c69b07719feb6b464c5a7f59a75b2b3ff64c7a06e3f46b0b704c20b0696a247f3530eb13aa3c308fbea684f87bee6279f06830ea00032e7f69f99dce73466a4b4a4a72e9a2f7955c7a12714e7e181c817fdf37a16a0420ea37b920726e32b204a4655773b35165e5d53f6bf3485f80f8ff034b4ecc7a08b10a391f59d2cb2d5f08625fa19f36cca6b3d4b0b3f3ae2e5ff73c27a69c3e980b8d3f8d1a05afa38cf130d6b53431201348e23ccf700a77bbdffd2cde64c59c3273aa014fa80808080a0b90afa5940e896a95d65a59e121579b41615067bd12c95c8c63b274ab3cb4f948080a0887b2fd853ca0e59f37765faba28d5304f0953c9b3b19bf9c20b45de185ae872a06d4d11c081ad36a82339c32c34876cf8fe6fffb5cdbef52550fd1a34f2893e718080a06098a1ab05541a1c62bab04be143fbd1b633d902800123de8e7a9a594bbabae28080a016f9cc8711cbdbe88c5a522617eb6ceef8e62b2283210bcfc0cb444335869a2a80a1e09e3273d048d061de644912055997a8677680323fb70d1d374f7403056639ef0100000000000000000000";
    // relay another sent message that contains the same root and expect a revert
    bridge.processMessage(_secondMessage, _secondProof);

    // Assert the message is in retriable status since it failed
    bytes32 _secondMsgHash = keccak256(abi.encode(_secondMessage));
    assertEq(uint256(bridge.getMessageStatus(_secondMsgHash)), uint256(MessageStatus.RETRIABLE));
  }
}
