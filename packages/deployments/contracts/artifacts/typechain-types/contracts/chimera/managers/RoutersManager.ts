/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type TokenIdStruct = {
  domain: PromiseOrValue<BigNumberish>;
  id: PromiseOrValue<BytesLike>;
};

export type TokenIdStructOutput = [number, string] & {
  domain: number;
  id: string;
};

export interface RoutersManagerInterface extends utils.Interface {
  functions: {
    "LIQUIDITY_FEE_DENOMINATOR()": FunctionFragment;
    "LIQUIDITY_FEE_NUMERATOR()": FunctionFragment;
    "acceptProposedRouterOwner(address)": FunctionFragment;
    "acceptanceDelay()": FunctionFragment;
    "addRouterLiquidity(uint256,address)": FunctionFragment;
    "addRouterLiquidityFor(uint256,address,address)": FunctionFragment;
    "approveRouter(address)": FunctionFragment;
    "assetCanonicalIds(address)": FunctionFragment;
    "assetIdToTickerHash(address)": FunctionFragment;
    "credits(address,address)": FunctionFragment;
    "domain()": FunctionFragment;
    "getProposedRouterOwner(address)": FunctionFragment;
    "getProposedRouterOwnerTimestamp(address)": FunctionFragment;
    "getRouterApproval(address)": FunctionFragment;
    "getRouterOwner(address)": FunctionFragment;
    "getRouterRecipient(address)": FunctionFragment;
    "initializeRouter(address,address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "maxRoutersPerTransfer()": FunctionFragment;
    "nonce()": FunctionFragment;
    "owner()": FunctionFragment;
    "proposeRouterOwner(address,address)": FunctionFragment;
    "proposed()": FunctionFragment;
    "proposedOwnershipTimestamp()": FunctionFragment;
    "relayerFeeVault()": FunctionFragment;
    "remotes(uint32)": FunctionFragment;
    "removeRouterLiquidity((uint32,bytes32),uint256,address)": FunctionFragment;
    "removeRouterLiquidityFor((uint32,bytes32),uint256,address,address)": FunctionFragment;
    "roles(address)": FunctionFragment;
    "routedTransfers(bytes32,uint256)": FunctionFragment;
    "routerAllowlistRemoved()": FunctionFragment;
    "routerAllowlistTimestamp()": FunctionFragment;
    "routerBalances(address,address)": FunctionFragment;
    "routerConfigs(address)": FunctionFragment;
    "setRouterRecipient(address,address)": FunctionFragment;
    "settlementStrategies(bytes32,bytes)": FunctionFragment;
    "supportedAssetDomains(bytes32,uint32)": FunctionFragment;
    "tickerHashToAssetId(bytes32)": FunctionFragment;
    "tokenConfigs(bytes32)": FunctionFragment;
    "transferStatus(bytes32)": FunctionFragment;
    "unapproveRouter(address)": FunctionFragment;
    "unclaimedAssets(address)": FunctionFragment;
    "xAppConnectionManager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LIQUIDITY_FEE_DENOMINATOR"
      | "LIQUIDITY_FEE_NUMERATOR"
      | "acceptProposedRouterOwner"
      | "acceptanceDelay"
      | "addRouterLiquidity"
      | "addRouterLiquidityFor"
      | "approveRouter"
      | "assetCanonicalIds"
      | "assetIdToTickerHash"
      | "credits"
      | "domain"
      | "getProposedRouterOwner"
      | "getProposedRouterOwnerTimestamp"
      | "getRouterApproval"
      | "getRouterOwner"
      | "getRouterRecipient"
      | "initializeRouter"
      | "initialized"
      | "maxRoutersPerTransfer"
      | "nonce"
      | "owner"
      | "proposeRouterOwner"
      | "proposed"
      | "proposedOwnershipTimestamp"
      | "relayerFeeVault"
      | "remotes"
      | "removeRouterLiquidity"
      | "removeRouterLiquidityFor"
      | "roles"
      | "routedTransfers"
      | "routerAllowlistRemoved"
      | "routerAllowlistTimestamp"
      | "routerBalances"
      | "routerConfigs"
      | "setRouterRecipient"
      | "settlementStrategies"
      | "supportedAssetDomains"
      | "tickerHashToAssetId"
      | "tokenConfigs"
      | "transferStatus"
      | "unapproveRouter"
      | "unclaimedAssets"
      | "xAppConnectionManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LIQUIDITY_FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDITY_FEE_NUMERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptProposedRouterOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptanceDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRouterLiquidity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addRouterLiquidityFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetCanonicalIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetIdToTickerHash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "credits",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "domain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProposedRouterOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedRouterOwnerTimestamp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterApproval",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeRouter",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRoutersPerTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeRouterOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "proposed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposedOwnershipTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayerFeeVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remotes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRouterLiquidity",
    values: [
      TokenIdStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRouterLiquidityFor",
    values: [
      TokenIdStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "roles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "routedTransfers",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "routerAllowlistRemoved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerAllowlistTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerBalances",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "routerConfigs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouterRecipient",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementStrategies",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAssetDomains",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tickerHashToAssetId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenConfigs",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferStatus",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unapproveRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimedAssets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "xAppConnectionManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "LIQUIDITY_FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDITY_FEE_NUMERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptProposedRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptanceDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRouterLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRouterLiquidityFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetCanonicalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetIdToTickerHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "credits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "domain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProposedRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedRouterOwnerTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRoutersPerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposedOwnershipTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerFeeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRouterLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRouterLiquidityFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "routedTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerAllowlistRemoved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerAllowlistTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRouterRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedAssetDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickerHashToAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unapproveRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unclaimedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xAppConnectionManager",
    data: BytesLike
  ): Result;

  events: {
    "RouterAdded(address,address)": EventFragment;
    "RouterInitialized(address)": EventFragment;
    "RouterLiquidityAdded(address,address,bytes32,uint256,address)": EventFragment;
    "RouterLiquidityRemoved(address,address,address,bytes32,uint256,address)": EventFragment;
    "RouterOwnerAccepted(address,address,address)": EventFragment;
    "RouterOwnerProposed(address,address,address)": EventFragment;
    "RouterRecipientSet(address,address,address)": EventFragment;
    "RouterRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RouterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterLiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterLiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterOwnerAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterOwnerProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterRecipientSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterRemoved"): EventFragment;
}

export interface RouterAddedEventObject {
  router: string;
  caller: string;
}
export type RouterAddedEvent = TypedEvent<
  [string, string],
  RouterAddedEventObject
>;

export type RouterAddedEventFilter = TypedEventFilter<RouterAddedEvent>;

export interface RouterInitializedEventObject {
  router: string;
}
export type RouterInitializedEvent = TypedEvent<
  [string],
  RouterInitializedEventObject
>;

export type RouterInitializedEventFilter =
  TypedEventFilter<RouterInitializedEvent>;

export interface RouterLiquidityAddedEventObject {
  router: string;
  local: string;
  key: string;
  amount: BigNumber;
  caller: string;
}
export type RouterLiquidityAddedEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  RouterLiquidityAddedEventObject
>;

export type RouterLiquidityAddedEventFilter =
  TypedEventFilter<RouterLiquidityAddedEvent>;

export interface RouterLiquidityRemovedEventObject {
  router: string;
  to: string;
  local: string;
  key: string;
  amount: BigNumber;
  caller: string;
}
export type RouterLiquidityRemovedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  RouterLiquidityRemovedEventObject
>;

export type RouterLiquidityRemovedEventFilter =
  TypedEventFilter<RouterLiquidityRemovedEvent>;

export interface RouterOwnerAcceptedEventObject {
  router: string;
  prevOwner: string;
  newOwner: string;
}
export type RouterOwnerAcceptedEvent = TypedEvent<
  [string, string, string],
  RouterOwnerAcceptedEventObject
>;

export type RouterOwnerAcceptedEventFilter =
  TypedEventFilter<RouterOwnerAcceptedEvent>;

export interface RouterOwnerProposedEventObject {
  router: string;
  prevProposed: string;
  newProposed: string;
}
export type RouterOwnerProposedEvent = TypedEvent<
  [string, string, string],
  RouterOwnerProposedEventObject
>;

export type RouterOwnerProposedEventFilter =
  TypedEventFilter<RouterOwnerProposedEvent>;

export interface RouterRecipientSetEventObject {
  router: string;
  prevRecipient: string;
  newRecipient: string;
}
export type RouterRecipientSetEvent = TypedEvent<
  [string, string, string],
  RouterRecipientSetEventObject
>;

export type RouterRecipientSetEventFilter =
  TypedEventFilter<RouterRecipientSetEvent>;

export interface RouterRemovedEventObject {
  router: string;
  caller: string;
}
export type RouterRemovedEvent = TypedEvent<
  [string, string],
  RouterRemovedEventObject
>;

export type RouterRemovedEventFilter = TypedEventFilter<RouterRemovedEvent>;

export interface RoutersManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RoutersManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LIQUIDITY_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    LIQUIDITY_FEE_NUMERATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptProposedRouterOwner(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptanceDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    addRouterLiquidity(
      _amount: PromiseOrValue<BigNumberish>,
      _local: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRouterLiquidityFor(
      _amount: PromiseOrValue<BigNumberish>,
      _local: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetCanonicalIds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    assetIdToTickerHash(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    credits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    domain(overrides?: CallOverrides): Promise<[number]>;

    getProposedRouterOwner(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProposedRouterOwnerTimestamp(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRouterApproval(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRouterOwner(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRouterRecipient(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initializeRouter(
      _owner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    maxRoutersPerTransfer(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposeRouterOwner(
      _router: PromiseOrValue<string>,
      _proposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposed(overrides?: CallOverrides): Promise<[string]>;

    proposedOwnershipTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    relayerFeeVault(overrides?: CallOverrides): Promise<[string]>;

    remotes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeRouterLiquidity(
      _canonical: TokenIdStruct,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRouterLiquidityFor(
      _canonical: TokenIdStruct,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    routedTransfers(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    routerAllowlistRemoved(overrides?: CallOverrides): Promise<[boolean]>;

    routerAllowlistTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    routerBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    routerConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, string, string, string, BigNumber] & {
        approved: boolean;
        portalApproved: boolean;
        owner: string;
        recipient: string;
        proposed: string;
        proposedTimestamp: BigNumber;
      }
    >;

    setRouterRecipient(
      _router: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settlementStrategies(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportedAssetDomains(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tickerHashToAssetId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenConfigs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        number,
        string,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        representation: string;
        representationDecimals: number;
        adopted: string;
        adoptedDecimals: number;
        adoptedToLocalExternalPools: string;
        approval: boolean;
        cap: BigNumber;
        custodied: BigNumber;
      }
    >;

    transferStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    unapproveRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unclaimedAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    xAppConnectionManager(overrides?: CallOverrides): Promise<[string]>;
  };

  LIQUIDITY_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  LIQUIDITY_FEE_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

  acceptProposedRouterOwner(
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptanceDelay(overrides?: CallOverrides): Promise<BigNumber>;

  addRouterLiquidity(
    _amount: PromiseOrValue<BigNumberish>,
    _local: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRouterLiquidityFor(
    _amount: PromiseOrValue<BigNumberish>,
    _local: PromiseOrValue<string>,
    _router: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveRouter(
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetCanonicalIds(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  assetIdToTickerHash(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  credits(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  domain(overrides?: CallOverrides): Promise<number>;

  getProposedRouterOwner(
    _router: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposedRouterOwnerTimestamp(
    _router: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRouterApproval(
    _router: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRouterOwner(
    _router: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRouterRecipient(
    _router: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  initializeRouter(
    _owner: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  maxRoutersPerTransfer(overrides?: CallOverrides): Promise<BigNumber>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposeRouterOwner(
    _router: PromiseOrValue<string>,
    _proposed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposed(overrides?: CallOverrides): Promise<string>;

  proposedOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  relayerFeeVault(overrides?: CallOverrides): Promise<string>;

  remotes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeRouterLiquidity(
    _canonical: TokenIdStruct,
    _amount: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRouterLiquidityFor(
    _canonical: TokenIdStruct,
    _amount: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roles(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  routedTransfers(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  routerAllowlistRemoved(overrides?: CallOverrides): Promise<boolean>;

  routerAllowlistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  routerBalances(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  routerConfigs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, string, string, string, BigNumber] & {
      approved: boolean;
      portalApproved: boolean;
      owner: string;
      recipient: string;
      proposed: string;
      proposedTimestamp: BigNumber;
    }
  >;

  setRouterRecipient(
    _router: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settlementStrategies(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  supportedAssetDomains(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tickerHashToAssetId(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenConfigs(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, string, number, string, boolean, BigNumber, BigNumber] & {
      representation: string;
      representationDecimals: number;
      adopted: string;
      adoptedDecimals: number;
      adoptedToLocalExternalPools: string;
      approval: boolean;
      cap: BigNumber;
      custodied: BigNumber;
    }
  >;

  transferStatus(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  unapproveRouter(
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unclaimedAssets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  xAppConnectionManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    LIQUIDITY_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDITY_FEE_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    acceptProposedRouterOwner(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptanceDelay(overrides?: CallOverrides): Promise<BigNumber>;

    addRouterLiquidity(
      _amount: PromiseOrValue<BigNumberish>,
      _local: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addRouterLiquidityFor(
      _amount: PromiseOrValue<BigNumberish>,
      _local: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveRouter(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    assetCanonicalIds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    assetIdToTickerHash(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    credits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domain(overrides?: CallOverrides): Promise<number>;

    getProposedRouterOwner(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposedRouterOwnerTimestamp(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterApproval(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRouterOwner(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRouterRecipient(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    initializeRouter(
      _owner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    maxRoutersPerTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposeRouterOwner(
      _router: PromiseOrValue<string>,
      _proposed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposed(overrides?: CallOverrides): Promise<string>;

    proposedOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    relayerFeeVault(overrides?: CallOverrides): Promise<string>;

    remotes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeRouterLiquidity(
      _canonical: TokenIdStruct,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRouterLiquidityFor(
      _canonical: TokenIdStruct,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    roles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    routedTransfers(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    routerAllowlistRemoved(overrides?: CallOverrides): Promise<boolean>;

    routerAllowlistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    routerBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, string, string, string, BigNumber] & {
        approved: boolean;
        portalApproved: boolean;
        owner: string;
        recipient: string;
        proposed: string;
        proposedTimestamp: BigNumber;
      }
    >;

    setRouterRecipient(
      _router: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settlementStrategies(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    supportedAssetDomains(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tickerHashToAssetId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenConfigs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        number,
        string,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        representation: string;
        representationDecimals: number;
        adopted: string;
        adoptedDecimals: number;
        adoptedToLocalExternalPools: string;
        approval: boolean;
        cap: BigNumber;
        custodied: BigNumber;
      }
    >;

    transferStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    unapproveRouter(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unclaimedAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xAppConnectionManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "RouterAdded(address,address)"(
      router?: PromiseOrValue<string> | null,
      caller?: null
    ): RouterAddedEventFilter;
    RouterAdded(
      router?: PromiseOrValue<string> | null,
      caller?: null
    ): RouterAddedEventFilter;

    "RouterInitialized(address)"(
      router?: PromiseOrValue<string> | null
    ): RouterInitializedEventFilter;
    RouterInitialized(
      router?: PromiseOrValue<string> | null
    ): RouterInitializedEventFilter;

    "RouterLiquidityAdded(address,address,bytes32,uint256,address)"(
      router?: PromiseOrValue<string> | null,
      local?: null,
      key?: null,
      amount?: null,
      caller?: null
    ): RouterLiquidityAddedEventFilter;
    RouterLiquidityAdded(
      router?: PromiseOrValue<string> | null,
      local?: null,
      key?: null,
      amount?: null,
      caller?: null
    ): RouterLiquidityAddedEventFilter;

    "RouterLiquidityRemoved(address,address,address,bytes32,uint256,address)"(
      router?: PromiseOrValue<string> | null,
      to?: null,
      local?: null,
      key?: null,
      amount?: null,
      caller?: null
    ): RouterLiquidityRemovedEventFilter;
    RouterLiquidityRemoved(
      router?: PromiseOrValue<string> | null,
      to?: null,
      local?: null,
      key?: null,
      amount?: null,
      caller?: null
    ): RouterLiquidityRemovedEventFilter;

    "RouterOwnerAccepted(address,address,address)"(
      router?: PromiseOrValue<string> | null,
      prevOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): RouterOwnerAcceptedEventFilter;
    RouterOwnerAccepted(
      router?: PromiseOrValue<string> | null,
      prevOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): RouterOwnerAcceptedEventFilter;

    "RouterOwnerProposed(address,address,address)"(
      router?: PromiseOrValue<string> | null,
      prevProposed?: PromiseOrValue<string> | null,
      newProposed?: PromiseOrValue<string> | null
    ): RouterOwnerProposedEventFilter;
    RouterOwnerProposed(
      router?: PromiseOrValue<string> | null,
      prevProposed?: PromiseOrValue<string> | null,
      newProposed?: PromiseOrValue<string> | null
    ): RouterOwnerProposedEventFilter;

    "RouterRecipientSet(address,address,address)"(
      router?: PromiseOrValue<string> | null,
      prevRecipient?: PromiseOrValue<string> | null,
      newRecipient?: PromiseOrValue<string> | null
    ): RouterRecipientSetEventFilter;
    RouterRecipientSet(
      router?: PromiseOrValue<string> | null,
      prevRecipient?: PromiseOrValue<string> | null,
      newRecipient?: PromiseOrValue<string> | null
    ): RouterRecipientSetEventFilter;

    "RouterRemoved(address,address)"(
      router?: PromiseOrValue<string> | null,
      caller?: null
    ): RouterRemovedEventFilter;
    RouterRemoved(
      router?: PromiseOrValue<string> | null,
      caller?: null
    ): RouterRemovedEventFilter;
  };

  estimateGas: {
    LIQUIDITY_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDITY_FEE_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    acceptProposedRouterOwner(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptanceDelay(overrides?: CallOverrides): Promise<BigNumber>;

    addRouterLiquidity(
      _amount: PromiseOrValue<BigNumberish>,
      _local: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRouterLiquidityFor(
      _amount: PromiseOrValue<BigNumberish>,
      _local: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetCanonicalIds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetIdToTickerHash(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    credits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domain(overrides?: CallOverrides): Promise<BigNumber>;

    getProposedRouterOwner(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposedRouterOwnerTimestamp(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterApproval(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterOwner(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterRecipient(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeRouter(
      _owner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    maxRoutersPerTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposeRouterOwner(
      _router: PromiseOrValue<string>,
      _proposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposed(overrides?: CallOverrides): Promise<BigNumber>;

    proposedOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    relayerFeeVault(overrides?: CallOverrides): Promise<BigNumber>;

    remotes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeRouterLiquidity(
      _canonical: TokenIdStruct,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRouterLiquidityFor(
      _canonical: TokenIdStruct,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routedTransfers(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerAllowlistRemoved(overrides?: CallOverrides): Promise<BigNumber>;

    routerAllowlistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    routerBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRouterRecipient(
      _router: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settlementStrategies(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedAssetDomains(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tickerHashToAssetId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenConfigs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unapproveRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unclaimedAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xAppConnectionManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    LIQUIDITY_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIQUIDITY_FEE_NUMERATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptProposedRouterOwner(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptanceDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRouterLiquidity(
      _amount: PromiseOrValue<BigNumberish>,
      _local: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRouterLiquidityFor(
      _amount: PromiseOrValue<BigNumberish>,
      _local: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetCanonicalIds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetIdToTickerHash(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    credits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposedRouterOwner(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedRouterOwnerTimestamp(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouterApproval(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouterOwner(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouterRecipient(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeRouter(
      _owner: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRoutersPerTransfer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeRouterOwner(
      _router: PromiseOrValue<string>,
      _proposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedOwnershipTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayerFeeVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remotes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeRouterLiquidity(
      _canonical: TokenIdStruct,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRouterLiquidityFor(
      _canonical: TokenIdStruct,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routedTransfers(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerAllowlistRemoved(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerAllowlistTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRouterRecipient(
      _router: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settlementStrategies(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedAssetDomains(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tickerHashToAssetId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenConfigs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unapproveRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unclaimedAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xAppConnectionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
