/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type TransferInfoStruct = {
  originDomain: PromiseOrValue<BigNumberish>;
  destinationDomain: PromiseOrValue<BigNumberish>;
  canonicalDomain: PromiseOrValue<BigNumberish>;
  to: PromiseOrValue<string>;
  delegate: PromiseOrValue<string>;
  receiveLocal: PromiseOrValue<boolean>;
  callData: PromiseOrValue<BytesLike>;
  slippage: PromiseOrValue<BigNumberish>;
  originSender: PromiseOrValue<string>;
  bridgedAmt: PromiseOrValue<BigNumberish>;
  normalizedIn: PromiseOrValue<BigNumberish>;
  nonce: PromiseOrValue<BigNumberish>;
  canonicalId: PromiseOrValue<BytesLike>;
};

export type TransferInfoStructOutput = [
  number,
  number,
  number,
  string,
  string,
  boolean,
  string,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  originDomain: number;
  destinationDomain: number;
  canonicalDomain: number;
  to: string;
  delegate: string;
  receiveLocal: boolean;
  callData: string;
  slippage: BigNumber;
  originSender: string;
  bridgedAmt: BigNumber;
  normalizedIn: BigNumber;
  nonce: BigNumber;
  canonicalId: string;
};

export type ExecuteArgsStruct = {
  params: TransferInfoStruct;
  routers: PromiseOrValue<string>[];
  routerSignatures: PromiseOrValue<BytesLike>[];
  sequencer: PromiseOrValue<string>;
  sequencerSignature: PromiseOrValue<BytesLike>;
};

export type ExecuteArgsStructOutput = [
  TransferInfoStructOutput,
  string[],
  string[],
  string,
  string
] & {
  params: TransferInfoStructOutput;
  routers: string[];
  routerSignatures: string[];
  sequencer: string;
  sequencerSignature: string;
};

export interface IConnextInterface extends utils.Interface {
  functions: {
    "bumpTransfer(bytes32)": FunctionFragment;
    "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))": FunctionFragment;
    "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))": FunctionFragment;
    "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)": FunctionFragment;
    "xcall(uint32,address,address,address,uint256,uint256,bytes)": FunctionFragment;
    "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bumpTransfer"
      | "execute"
      | "forceReceiveLocal"
      | "forceUpdateSlippage"
      | "xcall"
      | "xcallIntoLocal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bumpTransfer",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [ExecuteArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "forceReceiveLocal",
    values: [TransferInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "forceUpdateSlippage",
    values: [TransferInfoStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "xcall",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "xcallIntoLocal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "bumpTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceReceiveLocal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceUpdateSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xcall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xcallIntoLocal",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IConnext extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IConnextInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bumpTransfer(
      _transferId: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    execute(
      _args: ExecuteArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceReceiveLocal(
      _params: TransferInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceUpdateSlippage(
      _params: TransferInfoStruct,
      _slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    xcall(
      _destination: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      _delegate: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _slippage: PromiseOrValue<BigNumberish>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    xcallIntoLocal(
      _destination: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      _delegate: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _slippage: PromiseOrValue<BigNumberish>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bumpTransfer(
    _transferId: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  execute(
    _args: ExecuteArgsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceReceiveLocal(
    _params: TransferInfoStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceUpdateSlippage(
    _params: TransferInfoStruct,
    _slippage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  xcall(
    _destination: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _asset: PromiseOrValue<string>,
    _delegate: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _slippage: PromiseOrValue<BigNumberish>,
    _callData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  xcallIntoLocal(
    _destination: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _asset: PromiseOrValue<string>,
    _delegate: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _slippage: PromiseOrValue<BigNumberish>,
    _callData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bumpTransfer(
      _transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      _args: ExecuteArgsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    forceReceiveLocal(
      _params: TransferInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    forceUpdateSlippage(
      _params: TransferInfoStruct,
      _slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    xcall(
      _destination: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      _delegate: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _slippage: PromiseOrValue<BigNumberish>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    xcallIntoLocal(
      _destination: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      _delegate: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _slippage: PromiseOrValue<BigNumberish>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    bumpTransfer(
      _transferId: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    execute(
      _args: ExecuteArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceReceiveLocal(
      _params: TransferInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceUpdateSlippage(
      _params: TransferInfoStruct,
      _slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    xcall(
      _destination: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      _delegate: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _slippage: PromiseOrValue<BigNumberish>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    xcallIntoLocal(
      _destination: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      _delegate: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _slippage: PromiseOrValue<BigNumberish>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bumpTransfer(
      _transferId: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _args: ExecuteArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceReceiveLocal(
      _params: TransferInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceUpdateSlippage(
      _params: TransferInfoStruct,
      _slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    xcall(
      _destination: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      _delegate: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _slippage: PromiseOrValue<BigNumberish>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    xcallIntoLocal(
      _destination: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      _delegate: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _slippage: PromiseOrValue<BigNumberish>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
