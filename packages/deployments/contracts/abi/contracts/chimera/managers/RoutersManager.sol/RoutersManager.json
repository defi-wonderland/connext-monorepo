[
  "error BaseManager__delayElapsed_delayNotElapsed()",
  "error BaseManager__getConfig_notRegistered()",
  "error BaseManager__handleIncomingAsset_feeOnTransferNotSupported()",
  "error BaseManager__handleIncomingAsset_nativeAssetNotSupported()",
  "error BaseManager__handleOutgoingAsset_notNative()",
  "error BaseManager__nonReentrant_reentrantCall()",
  "error BaseManager__nonXCallReentrant_reentrantCall()",
  "error BaseManager__onlyOwnerOrRole_notOwnerOrRole(uint8 _role)",
  "error BaseManager__onlyOwner_notOwner()",
  "error BaseManager__whenNotPaused_paused()",
  "error RoutersManager__acceptProposedRouterOwner_badCaller()",
  "error RoutersManager__acceptProposedRouterOwner_notElapsed()",
  "error RoutersManager__addLiquidityForRouter_amountIsZero()",
  "error RoutersManager__addLiquidityForRouter_badRouter()",
  "error RoutersManager__addLiquidityForRouter_capReached()",
  "error RoutersManager__addLiquidityForRouter_routerEmpty()",
  "error RoutersManager__approveRouter_alreadyAdded()",
  "error RoutersManager__approveRouter_routerEmpty()",
  "error RoutersManager__getApprovedCanonicalId_notAllowlisted()",
  "error RoutersManager__initializeRouter_configNotEmpty()",
  "error RoutersManager__onlyRouterOwner_notRouterOwner()",
  "error RoutersManager__proposeRouterOwner_badRouter()",
  "error RoutersManager__proposeRouterOwner_notNewOwner()",
  "error RoutersManager__removeRouterLiquidityFor_notOwner()",
  "error RoutersManager__removeRouterLiquidity_amountIsZero()",
  "error RoutersManager__removeRouterLiquidity_insufficientFunds()",
  "error RoutersManager__removeRouterLiquidity_recipientEmpty()",
  "error RoutersManager__setRouterOwner_noChange()",
  "error RoutersManager__setRouterRecipient_notNewRecipient()",
  "error RoutersManager__unapproveRouter_notAdded()",
  "error RoutersManager__unapproveRouter_routerEmpty()",
  "event RouterAdded(address indexed router, address caller)",
  "event RouterInitialized(address indexed router)",
  "event RouterLiquidityAdded(address indexed router, address local, bytes32 key, uint256 amount, address caller)",
  "event RouterLiquidityRemoved(address indexed router, address to, address local, bytes32 key, uint256 amount, address caller)",
  "event RouterOwnerAccepted(address indexed router, address indexed prevOwner, address indexed newOwner)",
  "event RouterOwnerProposed(address indexed router, address indexed prevProposed, address indexed newProposed)",
  "event RouterRecipientSet(address indexed router, address indexed prevRecipient, address indexed newRecipient)",
  "event RouterRemoved(address indexed router, address caller)",
  "function LIQUIDITY_FEE_DENOMINATOR() pure returns (uint256)",
  "function acceptProposedRouterOwner(address _router)",
  "function addRouterLiquidity(uint256 _amount, address _local) payable",
  "function addRouterLiquidityFor(uint256 _amount, address _local, address _router) payable",
  "function approveRouter(address _router)",
  "function delay() view returns (uint256)",
  "function getProposedRouterOwner(address _router) view returns (address)",
  "function getProposedRouterOwnerTimestamp(address _router) view returns (uint256)",
  "function getRouterApproval(address _router) view returns (bool)",
  "function getRouterOwner(address _router) view returns (address)",
  "function getRouterRecipient(address _router) view returns (address)",
  "function initializeRouter(address _owner, address _recipient)",
  "function proposeRouterOwner(address _router, address _proposed)",
  "function removeRouterLiquidity(tuple(uint32 domain, bytes32 id) _canonical, uint256 _amount, address _to)",
  "function removeRouterLiquidityFor(tuple(uint32 domain, bytes32 id) _canonical, uint256 _amount, address _to, address _router)",
  "function setRouterRecipient(address _router, address _recipient)",
  "function unapproveRouter(address _router)"
]
