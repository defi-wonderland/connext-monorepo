/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface RootManagerInterface extends utils.Interface {
  functions: {
    "DEQUEUE_MAX()": FunctionFragment;
    "FINALIZED_HASH()": FunctionFragment;
    "MAX_DOMAINS()": FunctionFragment;
    "MERKLE()": FunctionFragment;
    "acceptProposedOwner()": FunctionFragment;
    "activateOptimisticMode()": FunctionFragment;
    "activateSlowMode()": FunctionFragment;
    "addConnector(uint32,address)": FunctionFragment;
    "addProposer(address)": FunctionFragment;
    "aggregate(uint32,bytes32)": FunctionFragment;
    "allowlistedProposers(address)": FunctionFragment;
    "clearHubDomain()": FunctionFragment;
    "connectors(uint256)": FunctionFragment;
    "connectorsHash()": FunctionFragment;
    "delay()": FunctionFragment;
    "delayBlocks()": FunctionFragment;
    "dequeue()": FunctionFragment;
    "discardRoot(bytes32)": FunctionFragment;
    "disputeBlocks()": FunctionFragment;
    "domains(uint256)": FunctionFragment;
    "domainsHash()": FunctionFragment;
    "finalize(bytes32,uint256)": FunctionFragment;
    "finalizeAndPropagate(address[],uint256[],bytes[],bytes32,uint256)": FunctionFragment;
    "getConnectorForDomain(uint32)": FunctionFragment;
    "getDomainIndex(uint32)": FunctionFragment;
    "getPendingInboundRootsCount()": FunctionFragment;
    "getSnapshotDuration()": FunctionFragment;
    "hubDomain()": FunctionFragment;
    "isDomainSupported(uint32)": FunctionFragment;
    "lastPropagatedRoot(uint32)": FunctionFragment;
    "lastSavedAggregateRootTimestamp()": FunctionFragment;
    "minDisputeBlocks()": FunctionFragment;
    "optimisticMode()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingInboundRoots()": FunctionFragment;
    "propagate(address[],uint256[],bytes[])": FunctionFragment;
    "proposeAggregateRoot(uint256,bytes32,bytes32[],uint32[])": FunctionFragment;
    "proposeNewOwner(address)": FunctionFragment;
    "proposed()": FunctionFragment;
    "proposedAggregateRootHash()": FunctionFragment;
    "proposedTimestamp()": FunctionFragment;
    "removeConnector(uint32)": FunctionFragment;
    "removeProposer(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounced()": FunctionFragment;
    "sendRootToHubSpoke()": FunctionFragment;
    "setDelayBlocks(uint256)": FunctionFragment;
    "setDisputeBlocks(uint256)": FunctionFragment;
    "setHubDomain(uint32)": FunctionFragment;
    "setMinDisputeBlocks(uint256)": FunctionFragment;
    "setWatcherManager(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "validAggregateRoots(uint256)": FunctionFragment;
    "validateConnectors(address[])": FunctionFragment;
    "validateDomains(uint32[],address[])": FunctionFragment;
    "watcherManager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEQUEUE_MAX"
      | "FINALIZED_HASH"
      | "MAX_DOMAINS"
      | "MERKLE"
      | "acceptProposedOwner"
      | "activateOptimisticMode"
      | "activateSlowMode"
      | "addConnector"
      | "addProposer"
      | "aggregate"
      | "allowlistedProposers"
      | "clearHubDomain"
      | "connectors"
      | "connectorsHash"
      | "delay"
      | "delayBlocks"
      | "dequeue"
      | "discardRoot"
      | "disputeBlocks"
      | "domains"
      | "domainsHash"
      | "finalize"
      | "finalizeAndPropagate"
      | "getConnectorForDomain"
      | "getDomainIndex"
      | "getPendingInboundRootsCount"
      | "getSnapshotDuration"
      | "hubDomain"
      | "isDomainSupported"
      | "lastPropagatedRoot"
      | "lastSavedAggregateRootTimestamp"
      | "minDisputeBlocks"
      | "optimisticMode"
      | "owner"
      | "pause"
      | "paused"
      | "pendingInboundRoots"
      | "propagate"
      | "proposeAggregateRoot"
      | "proposeNewOwner"
      | "proposed"
      | "proposedAggregateRootHash"
      | "proposedTimestamp"
      | "removeConnector"
      | "removeProposer"
      | "renounceOwnership"
      | "renounced"
      | "sendRootToHubSpoke"
      | "setDelayBlocks"
      | "setDisputeBlocks"
      | "setHubDomain"
      | "setMinDisputeBlocks"
      | "setWatcherManager"
      | "unpause"
      | "validAggregateRoots"
      | "validateConnectors"
      | "validateDomains"
      | "watcherManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEQUEUE_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FINALIZED_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DOMAINS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MERKLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptProposedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateOptimisticMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateSlowMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addConnector",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addProposer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistedProposers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearHubDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectors",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "connectorsHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delayBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dequeue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "discardRoot",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domains",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "domainsHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeAndPropagate",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getConnectorForDomain",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingInboundRootsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSnapshotDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hubDomain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isDomainSupported",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPropagatedRoot",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSavedAggregateRootTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDisputeBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimisticMode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingInboundRoots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "propagate",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeAggregateRoot",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "proposed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposedAggregateRootHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposedTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeConnector",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProposer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "renounced", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendRootToHubSpoke",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDelayBlocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisputeBlocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHubDomain",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDisputeBlocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWatcherManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validAggregateRoots",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateConnectors",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "validateDomains",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "watcherManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEQUEUE_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FINALIZED_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DOMAINS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MERKLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptProposedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateOptimisticMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateSlowMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aggregate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowlistedProposers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearHubDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "connectors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "connectorsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delayBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dequeue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "discardRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "domains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "domainsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeAndPropagate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConnectorForDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingInboundRootsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSnapshotDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hubDomain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDomainSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPropagatedRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSavedAggregateRootTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDisputeBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimisticMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingInboundRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propagate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeAggregateRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposedAggregateRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renounced", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendRootToHubSpoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelayBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisputeBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHubDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDisputeBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWatcherManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validAggregateRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateConnectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "watcherManager",
    data: BytesLike
  ): Result;

  events: {
    "AggregateRootPropagated(bytes32,bytes32)": EventFragment;
    "AggregateRootProposed(uint256,uint256,bytes32,bytes32,bytes32[],uint32[])": EventFragment;
    "AggregateRootSavedOptimistic(bytes32,uint256)": EventFragment;
    "AggregateRootSavedSlow(bytes32,uint256,bytes32[],uint256)": EventFragment;
    "ConnectorAdded(uint32,address,uint32[],address[])": EventFragment;
    "ConnectorRemoved(uint32,address,uint32[],address[],address)": EventFragment;
    "DelayBlocksUpdated(uint256,uint256)": EventFragment;
    "DisputeBlocksUpdated(uint256,uint256)": EventFragment;
    "DomainAdded(uint32,address)": EventFragment;
    "DomainRemoved(uint32)": EventFragment;
    "HubDomainCleared()": EventFragment;
    "HubDomainSet(uint32)": EventFragment;
    "MinDisputeBlocksUpdated(uint256,uint256)": EventFragment;
    "OptimisticModeActivated()": EventFragment;
    "OwnershipProposed(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PropagateFailed(uint32,address)": EventFragment;
    "ProposerAdded(address)": EventFragment;
    "ProposerRemoved(address)": EventFragment;
    "RootDiscarded(bytes32)": EventFragment;
    "RootReceived(uint32,bytes32,uint256)": EventFragment;
    "SlowModeActivated(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WatcherManagerChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AggregateRootPropagated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregateRootProposed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AggregateRootSavedOptimistic"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregateRootSavedSlow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConnectorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConnectorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelayBlocksUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeBlocksUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HubDomainCleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HubDomainSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinDisputeBlocksUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OptimisticModeActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PropagateFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootDiscarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlowModeActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WatcherManagerChanged"): EventFragment;
}

export interface AggregateRootPropagatedEventObject {
  aggregateRoot: string;
  domainsHash: string;
}
export type AggregateRootPropagatedEvent = TypedEvent<
  [string, string],
  AggregateRootPropagatedEventObject
>;

export type AggregateRootPropagatedEventFilter =
  TypedEventFilter<AggregateRootPropagatedEvent>;

export interface AggregateRootProposedEventObject {
  snapshotId: BigNumber;
  endOfDispute: BigNumber;
  aggregateRoot: string;
  baseRoot: string;
  snapshotsRoots: string[];
  domains: number[];
}
export type AggregateRootProposedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, string[], number[]],
  AggregateRootProposedEventObject
>;

export type AggregateRootProposedEventFilter =
  TypedEventFilter<AggregateRootProposedEvent>;

export interface AggregateRootSavedOptimisticEventObject {
  aggregateRoot: string;
  rootTimestamp: BigNumber;
}
export type AggregateRootSavedOptimisticEvent = TypedEvent<
  [string, BigNumber],
  AggregateRootSavedOptimisticEventObject
>;

export type AggregateRootSavedOptimisticEventFilter =
  TypedEventFilter<AggregateRootSavedOptimisticEvent>;

export interface AggregateRootSavedSlowEventObject {
  aggregateRoot: string;
  leafCount: BigNumber;
  aggregatedRoots: string[];
  rootTimestamp: BigNumber;
}
export type AggregateRootSavedSlowEvent = TypedEvent<
  [string, BigNumber, string[], BigNumber],
  AggregateRootSavedSlowEventObject
>;

export type AggregateRootSavedSlowEventFilter =
  TypedEventFilter<AggregateRootSavedSlowEvent>;

export interface ConnectorAddedEventObject {
  domain: number;
  connector: string;
  domains: number[];
  connectors: string[];
}
export type ConnectorAddedEvent = TypedEvent<
  [number, string, number[], string[]],
  ConnectorAddedEventObject
>;

export type ConnectorAddedEventFilter = TypedEventFilter<ConnectorAddedEvent>;

export interface ConnectorRemovedEventObject {
  domain: number;
  connector: string;
  domains: number[];
  connectors: string[];
  caller: string;
}
export type ConnectorRemovedEvent = TypedEvent<
  [number, string, number[], string[], string],
  ConnectorRemovedEventObject
>;

export type ConnectorRemovedEventFilter =
  TypedEventFilter<ConnectorRemovedEvent>;

export interface DelayBlocksUpdatedEventObject {
  previous: BigNumber;
  updated: BigNumber;
}
export type DelayBlocksUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  DelayBlocksUpdatedEventObject
>;

export type DelayBlocksUpdatedEventFilter =
  TypedEventFilter<DelayBlocksUpdatedEvent>;

export interface DisputeBlocksUpdatedEventObject {
  previous: BigNumber;
  updated: BigNumber;
}
export type DisputeBlocksUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  DisputeBlocksUpdatedEventObject
>;

export type DisputeBlocksUpdatedEventFilter =
  TypedEventFilter<DisputeBlocksUpdatedEvent>;

export interface DomainAddedEventObject {
  domain: number;
  connector: string;
}
export type DomainAddedEvent = TypedEvent<
  [number, string],
  DomainAddedEventObject
>;

export type DomainAddedEventFilter = TypedEventFilter<DomainAddedEvent>;

export interface DomainRemovedEventObject {
  domain: number;
}
export type DomainRemovedEvent = TypedEvent<[number], DomainRemovedEventObject>;

export type DomainRemovedEventFilter = TypedEventFilter<DomainRemovedEvent>;

export interface HubDomainClearedEventObject {}
export type HubDomainClearedEvent = TypedEvent<[], HubDomainClearedEventObject>;

export type HubDomainClearedEventFilter =
  TypedEventFilter<HubDomainClearedEvent>;

export interface HubDomainSetEventObject {
  domain: number;
}
export type HubDomainSetEvent = TypedEvent<[number], HubDomainSetEventObject>;

export type HubDomainSetEventFilter = TypedEventFilter<HubDomainSetEvent>;

export interface MinDisputeBlocksUpdatedEventObject {
  previous: BigNumber;
  updated: BigNumber;
}
export type MinDisputeBlocksUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinDisputeBlocksUpdatedEventObject
>;

export type MinDisputeBlocksUpdatedEventFilter =
  TypedEventFilter<MinDisputeBlocksUpdatedEvent>;

export interface OptimisticModeActivatedEventObject {}
export type OptimisticModeActivatedEvent = TypedEvent<
  [],
  OptimisticModeActivatedEventObject
>;

export type OptimisticModeActivatedEventFilter =
  TypedEventFilter<OptimisticModeActivatedEvent>;

export interface OwnershipProposedEventObject {
  proposedOwner: string;
}
export type OwnershipProposedEvent = TypedEvent<
  [string],
  OwnershipProposedEventObject
>;

export type OwnershipProposedEventFilter =
  TypedEventFilter<OwnershipProposedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PropagateFailedEventObject {
  domain: number;
  connector: string;
}
export type PropagateFailedEvent = TypedEvent<
  [number, string],
  PropagateFailedEventObject
>;

export type PropagateFailedEventFilter = TypedEventFilter<PropagateFailedEvent>;

export interface ProposerAddedEventObject {
  proposer: string;
}
export type ProposerAddedEvent = TypedEvent<[string], ProposerAddedEventObject>;

export type ProposerAddedEventFilter = TypedEventFilter<ProposerAddedEvent>;

export interface ProposerRemovedEventObject {
  proposer: string;
}
export type ProposerRemovedEvent = TypedEvent<
  [string],
  ProposerRemovedEventObject
>;

export type ProposerRemovedEventFilter = TypedEventFilter<ProposerRemovedEvent>;

export interface RootDiscardedEventObject {
  fraudulentRoot: string;
}
export type RootDiscardedEvent = TypedEvent<[string], RootDiscardedEventObject>;

export type RootDiscardedEventFilter = TypedEventFilter<RootDiscardedEvent>;

export interface RootReceivedEventObject {
  domain: number;
  receivedRoot: string;
  queueIndex: BigNumber;
}
export type RootReceivedEvent = TypedEvent<
  [number, string, BigNumber],
  RootReceivedEventObject
>;

export type RootReceivedEventFilter = TypedEventFilter<RootReceivedEvent>;

export interface SlowModeActivatedEventObject {
  watcher: string;
}
export type SlowModeActivatedEvent = TypedEvent<
  [string],
  SlowModeActivatedEventObject
>;

export type SlowModeActivatedEventFilter =
  TypedEventFilter<SlowModeActivatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WatcherManagerChangedEventObject {
  watcherManager: string;
}
export type WatcherManagerChangedEvent = TypedEvent<
  [string],
  WatcherManagerChangedEventObject
>;

export type WatcherManagerChangedEventFilter =
  TypedEventFilter<WatcherManagerChangedEvent>;

export interface RootManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RootManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEQUEUE_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    FINALIZED_HASH(overrides?: CallOverrides): Promise<[string]>;

    MAX_DOMAINS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MERKLE(overrides?: CallOverrides): Promise<[string]>;

    acceptProposedOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activateOptimisticMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activateSlowMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addConnector(
      _domain: PromiseOrValue<BigNumberish>,
      _connector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    aggregate(
      _domain: PromiseOrValue<BigNumberish>,
      _inbound: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowlistedProposers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    clearHubDomain(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    connectors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    connectorsHash(overrides?: CallOverrides): Promise<[string]>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    delayBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    dequeue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    discardRoot(
      _root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disputeBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    domains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    domainsHash(overrides?: CallOverrides): Promise<[string]>;

    finalize(
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeAndPropagate(
      _connectors: PromiseOrValue<string>[],
      _fees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getConnectorForDomain(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDomainIndex(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingInboundRootsCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSnapshotDuration(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _snapshotDuration: BigNumber }>;

    hubDomain(overrides?: CallOverrides): Promise<[number]>;

    isDomainSupported(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastPropagatedRoot(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lastSavedAggregateRootTimestamp(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minDisputeBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    optimisticMode(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingInboundRoots(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { first: BigNumber; last: BigNumber }>;

    propagate(
      _connectors: PromiseOrValue<string>[],
      _fees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeAggregateRoot(
      _snapshotId: PromiseOrValue<BigNumberish>,
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _snapshotsRoots: PromiseOrValue<BytesLike>[],
      _domains: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeNewOwner(
      newlyProposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposed(overrides?: CallOverrides): Promise<[string]>;

    proposedAggregateRootHash(overrides?: CallOverrides): Promise<[string]>;

    proposedTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeConnector(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounced(overrides?: CallOverrides): Promise<[boolean]>;

    sendRootToHubSpoke(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelayBlocks(
      _delayBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDisputeBlocks(
      _disputeBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHubDomain(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinDisputeBlocks(
      _minDisputeBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWatcherManager(
      _watcherManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validAggregateRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validateConnectors(
      _connectors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateDomains(
      _domains: PromiseOrValue<BigNumberish>[],
      _connectors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[void]>;

    watcherManager(overrides?: CallOverrides): Promise<[string]>;
  };

  DEQUEUE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  FINALIZED_HASH(overrides?: CallOverrides): Promise<string>;

  MAX_DOMAINS(overrides?: CallOverrides): Promise<BigNumber>;

  MERKLE(overrides?: CallOverrides): Promise<string>;

  acceptProposedOwner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activateOptimisticMode(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activateSlowMode(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addConnector(
    _domain: PromiseOrValue<BigNumberish>,
    _connector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addProposer(
    _proposer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  aggregate(
    _domain: PromiseOrValue<BigNumberish>,
    _inbound: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowlistedProposers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  clearHubDomain(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  connectors(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  connectorsHash(overrides?: CallOverrides): Promise<string>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  delayBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  dequeue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  discardRoot(
    _root: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disputeBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  domains(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  domainsHash(overrides?: CallOverrides): Promise<string>;

  finalize(
    _proposedAggregateRoot: PromiseOrValue<BytesLike>,
    _endOfDispute: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeAndPropagate(
    _connectors: PromiseOrValue<string>[],
    _fees: PromiseOrValue<BigNumberish>[],
    _encodedData: PromiseOrValue<BytesLike>[],
    _proposedAggregateRoot: PromiseOrValue<BytesLike>,
    _endOfDispute: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getConnectorForDomain(
    _domain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDomainIndex(
    _domain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingInboundRootsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getSnapshotDuration(overrides?: CallOverrides): Promise<BigNumber>;

  hubDomain(overrides?: CallOverrides): Promise<number>;

  isDomainSupported(
    _domain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastPropagatedRoot(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  lastSavedAggregateRootTimestamp(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minDisputeBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  optimisticMode(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingInboundRoots(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { first: BigNumber; last: BigNumber }>;

  propagate(
    _connectors: PromiseOrValue<string>[],
    _fees: PromiseOrValue<BigNumberish>[],
    _encodedData: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeAggregateRoot(
    _snapshotId: PromiseOrValue<BigNumberish>,
    _aggregateRoot: PromiseOrValue<BytesLike>,
    _snapshotsRoots: PromiseOrValue<BytesLike>[],
    _domains: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeNewOwner(
    newlyProposed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposed(overrides?: CallOverrides): Promise<string>;

  proposedAggregateRootHash(overrides?: CallOverrides): Promise<string>;

  proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  removeConnector(
    _domain: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeProposer(
    _proposer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounced(overrides?: CallOverrides): Promise<boolean>;

  sendRootToHubSpoke(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelayBlocks(
    _delayBlocks: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDisputeBlocks(
    _disputeBlocks: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHubDomain(
    _domain: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinDisputeBlocks(
    _minDisputeBlocks: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWatcherManager(
    _watcherManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validAggregateRoots(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  validateConnectors(
    _connectors: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<void>;

  validateDomains(
    _domains: PromiseOrValue<BigNumberish>[],
    _connectors: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<void>;

  watcherManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEQUEUE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    FINALIZED_HASH(overrides?: CallOverrides): Promise<string>;

    MAX_DOMAINS(overrides?: CallOverrides): Promise<BigNumber>;

    MERKLE(overrides?: CallOverrides): Promise<string>;

    acceptProposedOwner(overrides?: CallOverrides): Promise<void>;

    activateOptimisticMode(overrides?: CallOverrides): Promise<void>;

    activateSlowMode(overrides?: CallOverrides): Promise<void>;

    addConnector(
      _domain: PromiseOrValue<BigNumberish>,
      _connector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    aggregate(
      _domain: PromiseOrValue<BigNumberish>,
      _inbound: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowlistedProposers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    clearHubDomain(overrides?: CallOverrides): Promise<void>;

    connectors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    connectorsHash(overrides?: CallOverrides): Promise<string>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    delayBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    dequeue(overrides?: CallOverrides): Promise<[string, BigNumber]>;

    discardRoot(
      _root: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    disputeBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    domains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    domainsHash(overrides?: CallOverrides): Promise<string>;

    finalize(
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeAndPropagate(
      _connectors: PromiseOrValue<string>[],
      _fees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getConnectorForDomain(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDomainIndex(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingInboundRootsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getSnapshotDuration(overrides?: CallOverrides): Promise<BigNumber>;

    hubDomain(overrides?: CallOverrides): Promise<number>;

    isDomainSupported(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastPropagatedRoot(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    lastSavedAggregateRootTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDisputeBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    optimisticMode(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingInboundRoots(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { first: BigNumber; last: BigNumber }>;

    propagate(
      _connectors: PromiseOrValue<string>[],
      _fees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    proposeAggregateRoot(
      _snapshotId: PromiseOrValue<BigNumberish>,
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _snapshotsRoots: PromiseOrValue<BytesLike>[],
      _domains: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    proposeNewOwner(
      newlyProposed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposed(overrides?: CallOverrides): Promise<string>;

    proposedAggregateRootHash(overrides?: CallOverrides): Promise<string>;

    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    removeConnector(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounced(overrides?: CallOverrides): Promise<boolean>;

    sendRootToHubSpoke(overrides?: CallOverrides): Promise<void>;

    setDelayBlocks(
      _delayBlocks: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisputeBlocks(
      _disputeBlocks: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHubDomain(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinDisputeBlocks(
      _minDisputeBlocks: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWatcherManager(
      _watcherManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    validAggregateRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    validateConnectors(
      _connectors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    validateDomains(
      _domains: PromiseOrValue<BigNumberish>[],
      _connectors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    watcherManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AggregateRootPropagated(bytes32,bytes32)"(
      aggregateRoot?: PromiseOrValue<BytesLike> | null,
      domainsHash?: null
    ): AggregateRootPropagatedEventFilter;
    AggregateRootPropagated(
      aggregateRoot?: PromiseOrValue<BytesLike> | null,
      domainsHash?: null
    ): AggregateRootPropagatedEventFilter;

    "AggregateRootProposed(uint256,uint256,bytes32,bytes32,bytes32[],uint32[])"(
      snapshotId?: PromiseOrValue<BigNumberish> | null,
      endOfDispute?: null,
      aggregateRoot?: PromiseOrValue<BytesLike> | null,
      baseRoot?: PromiseOrValue<BytesLike> | null,
      snapshotsRoots?: null,
      domains?: null
    ): AggregateRootProposedEventFilter;
    AggregateRootProposed(
      snapshotId?: PromiseOrValue<BigNumberish> | null,
      endOfDispute?: null,
      aggregateRoot?: PromiseOrValue<BytesLike> | null,
      baseRoot?: PromiseOrValue<BytesLike> | null,
      snapshotsRoots?: null,
      domains?: null
    ): AggregateRootProposedEventFilter;

    "AggregateRootSavedOptimistic(bytes32,uint256)"(
      aggregateRoot?: PromiseOrValue<BytesLike> | null,
      rootTimestamp?: null
    ): AggregateRootSavedOptimisticEventFilter;
    AggregateRootSavedOptimistic(
      aggregateRoot?: PromiseOrValue<BytesLike> | null,
      rootTimestamp?: null
    ): AggregateRootSavedOptimisticEventFilter;

    "AggregateRootSavedSlow(bytes32,uint256,bytes32[],uint256)"(
      aggregateRoot?: PromiseOrValue<BytesLike> | null,
      leafCount?: null,
      aggregatedRoots?: null,
      rootTimestamp?: null
    ): AggregateRootSavedSlowEventFilter;
    AggregateRootSavedSlow(
      aggregateRoot?: PromiseOrValue<BytesLike> | null,
      leafCount?: null,
      aggregatedRoots?: null,
      rootTimestamp?: null
    ): AggregateRootSavedSlowEventFilter;

    "ConnectorAdded(uint32,address,uint32[],address[])"(
      domain?: null,
      connector?: null,
      domains?: null,
      connectors?: null
    ): ConnectorAddedEventFilter;
    ConnectorAdded(
      domain?: null,
      connector?: null,
      domains?: null,
      connectors?: null
    ): ConnectorAddedEventFilter;

    "ConnectorRemoved(uint32,address,uint32[],address[],address)"(
      domain?: null,
      connector?: null,
      domains?: null,
      connectors?: null,
      caller?: null
    ): ConnectorRemovedEventFilter;
    ConnectorRemoved(
      domain?: null,
      connector?: null,
      domains?: null,
      connectors?: null,
      caller?: null
    ): ConnectorRemovedEventFilter;

    "DelayBlocksUpdated(uint256,uint256)"(
      previous?: null,
      updated?: null
    ): DelayBlocksUpdatedEventFilter;
    DelayBlocksUpdated(
      previous?: null,
      updated?: null
    ): DelayBlocksUpdatedEventFilter;

    "DisputeBlocksUpdated(uint256,uint256)"(
      previous?: null,
      updated?: null
    ): DisputeBlocksUpdatedEventFilter;
    DisputeBlocksUpdated(
      previous?: null,
      updated?: null
    ): DisputeBlocksUpdatedEventFilter;

    "DomainAdded(uint32,address)"(
      domain?: null,
      connector?: null
    ): DomainAddedEventFilter;
    DomainAdded(domain?: null, connector?: null): DomainAddedEventFilter;

    "DomainRemoved(uint32)"(domain?: null): DomainRemovedEventFilter;
    DomainRemoved(domain?: null): DomainRemovedEventFilter;

    "HubDomainCleared()"(): HubDomainClearedEventFilter;
    HubDomainCleared(): HubDomainClearedEventFilter;

    "HubDomainSet(uint32)"(domain?: null): HubDomainSetEventFilter;
    HubDomainSet(domain?: null): HubDomainSetEventFilter;

    "MinDisputeBlocksUpdated(uint256,uint256)"(
      previous?: null,
      updated?: null
    ): MinDisputeBlocksUpdatedEventFilter;
    MinDisputeBlocksUpdated(
      previous?: null,
      updated?: null
    ): MinDisputeBlocksUpdatedEventFilter;

    "OptimisticModeActivated()"(): OptimisticModeActivatedEventFilter;
    OptimisticModeActivated(): OptimisticModeActivatedEventFilter;

    "OwnershipProposed(address)"(
      proposedOwner?: PromiseOrValue<string> | null
    ): OwnershipProposedEventFilter;
    OwnershipProposed(
      proposedOwner?: PromiseOrValue<string> | null
    ): OwnershipProposedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PropagateFailed(uint32,address)"(
      domain?: null,
      connector?: null
    ): PropagateFailedEventFilter;
    PropagateFailed(
      domain?: null,
      connector?: null
    ): PropagateFailedEventFilter;

    "ProposerAdded(address)"(
      proposer?: PromiseOrValue<string> | null
    ): ProposerAddedEventFilter;
    ProposerAdded(
      proposer?: PromiseOrValue<string> | null
    ): ProposerAddedEventFilter;

    "ProposerRemoved(address)"(
      proposer?: PromiseOrValue<string> | null
    ): ProposerRemovedEventFilter;
    ProposerRemoved(
      proposer?: PromiseOrValue<string> | null
    ): ProposerRemovedEventFilter;

    "RootDiscarded(bytes32)"(fraudulentRoot?: null): RootDiscardedEventFilter;
    RootDiscarded(fraudulentRoot?: null): RootDiscardedEventFilter;

    "RootReceived(uint32,bytes32,uint256)"(
      domain?: null,
      receivedRoot?: null,
      queueIndex?: null
    ): RootReceivedEventFilter;
    RootReceived(
      domain?: null,
      receivedRoot?: null,
      queueIndex?: null
    ): RootReceivedEventFilter;

    "SlowModeActivated(address)"(
      watcher?: PromiseOrValue<string> | null
    ): SlowModeActivatedEventFilter;
    SlowModeActivated(
      watcher?: PromiseOrValue<string> | null
    ): SlowModeActivatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WatcherManagerChanged(address)"(
      watcherManager?: null
    ): WatcherManagerChangedEventFilter;
    WatcherManagerChanged(
      watcherManager?: null
    ): WatcherManagerChangedEventFilter;
  };

  estimateGas: {
    DEQUEUE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    FINALIZED_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DOMAINS(overrides?: CallOverrides): Promise<BigNumber>;

    MERKLE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptProposedOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activateOptimisticMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activateSlowMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addConnector(
      _domain: PromiseOrValue<BigNumberish>,
      _connector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    aggregate(
      _domain: PromiseOrValue<BigNumberish>,
      _inbound: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowlistedProposers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearHubDomain(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    connectors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    connectorsHash(overrides?: CallOverrides): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    delayBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    dequeue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    discardRoot(
      _root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disputeBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    domains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainsHash(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeAndPropagate(
      _connectors: PromiseOrValue<string>[],
      _fees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getConnectorForDomain(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDomainIndex(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingInboundRootsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getSnapshotDuration(overrides?: CallOverrides): Promise<BigNumber>;

    hubDomain(overrides?: CallOverrides): Promise<BigNumber>;

    isDomainSupported(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastPropagatedRoot(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSavedAggregateRootTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDisputeBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    optimisticMode(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingInboundRoots(overrides?: CallOverrides): Promise<BigNumber>;

    propagate(
      _connectors: PromiseOrValue<string>[],
      _fees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeAggregateRoot(
      _snapshotId: PromiseOrValue<BigNumberish>,
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _snapshotsRoots: PromiseOrValue<BytesLike>[],
      _domains: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeNewOwner(
      newlyProposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposed(overrides?: CallOverrides): Promise<BigNumber>;

    proposedAggregateRootHash(overrides?: CallOverrides): Promise<BigNumber>;

    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    removeConnector(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounced(overrides?: CallOverrides): Promise<BigNumber>;

    sendRootToHubSpoke(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelayBlocks(
      _delayBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDisputeBlocks(
      _disputeBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHubDomain(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinDisputeBlocks(
      _minDisputeBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWatcherManager(
      _watcherManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validAggregateRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateConnectors(
      _connectors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateDomains(
      _domains: PromiseOrValue<BigNumberish>[],
      _connectors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    watcherManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEQUEUE_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FINALIZED_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_DOMAINS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MERKLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptProposedOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activateOptimisticMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activateSlowMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addConnector(
      _domain: PromiseOrValue<BigNumberish>,
      _connector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    aggregate(
      _domain: PromiseOrValue<BigNumberish>,
      _inbound: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowlistedProposers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearHubDomain(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    connectors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectorsHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dequeue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    discardRoot(
      _root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disputeBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainsHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeAndPropagate(
      _connectors: PromiseOrValue<string>[],
      _fees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getConnectorForDomain(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomainIndex(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingInboundRootsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSnapshotDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hubDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDomainSupported(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPropagatedRoot(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSavedAggregateRootTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDisputeBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optimisticMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingInboundRoots(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propagate(
      _connectors: PromiseOrValue<string>[],
      _fees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeAggregateRoot(
      _snapshotId: PromiseOrValue<BigNumberish>,
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _snapshotsRoots: PromiseOrValue<BytesLike>[],
      _domains: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeNewOwner(
      newlyProposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedAggregateRootHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeConnector(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounced(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendRootToHubSpoke(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelayBlocks(
      _delayBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDisputeBlocks(
      _disputeBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHubDomain(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinDisputeBlocks(
      _minDisputeBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWatcherManager(
      _watcherManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validAggregateRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateConnectors(
      _connectors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateDomains(
      _domains: PromiseOrValue<BigNumberish>[],
      _connectors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    watcherManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
