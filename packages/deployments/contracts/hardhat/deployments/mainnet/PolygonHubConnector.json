{
  "address": "0xE8cF9EbB1cFB137c692a0a4E470E257B9417d116",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_mirrorDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_amb",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rootManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mirrorConnector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_checkPointManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Connector__processMessage_notUsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyOwner_notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyProposed_notProposedOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__ownershipDelayElapsed_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_noOwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_noProposal",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MessageProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encodedData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previous",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "current",
          "type": "address"
        }
      ],
      "name": "MirrorConnectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "mirrorDomain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "amb",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rootManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mirrorConnector",
          "type": "address"
        }
      ],
      "name": "NewConnector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AMB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIRROR_DOMAIN",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_MANAGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptProposedOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mirrorConnector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "processMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedMessageRoots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newlyProposed",
          "type": "address"
        }
      ],
      "name": "proposeNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_encodedData",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mirrorConnector",
          "type": "address"
        }
      ],
      "name": "setMirrorConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_expected",
          "type": "address"
        }
      ],
      "name": "verifySender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xff9705b7aca88f4c53a73e3e21945de7862d83b3da442e450ad719e438c52ec4",
  "receipt": {
    "to": null,
    "from": "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
    "contractAddress": "0xE8cF9EbB1cFB137c692a0a4E470E257B9417d116",
    "transactionIndex": 83,
    "gasUsed": "2446424",
    "logsBloom": "0x00000000000000000000000000000000000000000000401000800000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000001000000000000000000000040000000000000020000000000000000000800000000000010000000000000000000400000000000000800000000000000000000000000000040000000000000000000000000000000080000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000001020000000000000200000000000000000000002000000800002002000000000000000",
    "blockHash": "0x828db4cd248d42bcd7faf43cda8a854fd43bd02aeca92fda96c9dd8bf083ca1c",
    "transactionHash": "0xff9705b7aca88f4c53a73e3e21945de7862d83b3da442e450ad719e438c52ec4",
    "logs": [
      {
        "transactionIndex": 83,
        "blockNumber": 18737808,
        "transactionHash": "0xff9705b7aca88f4c53a73e3e21945de7862d83b3da442e450ad719e438c52ec4",
        "address": "0xE8cF9EbB1cFB137c692a0a4E470E257B9417d116",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ade09131c6f43fe22c2cbabb759636c43cfc181e"
        ],
        "data": "0x",
        "logIndex": 283,
        "blockHash": "0x828db4cd248d42bcd7faf43cda8a854fd43bd02aeca92fda96c9dd8bf083ca1c"
      },
      {
        "transactionIndex": 83,
        "blockNumber": 18737808,
        "transactionHash": "0xff9705b7aca88f4c53a73e3e21945de7862d83b3da442e450ad719e438c52ec4",
        "address": "0xE8cF9EbB1cFB137c692a0a4E470E257B9417d116",
        "topics": [
          "0x4f9c27c2fe3f84576ea469d367d044da53c45e951617e8389f2b5ed8db9d25f0",
          "0x0000000000000000000000000000000000000000000000000000000000657468",
          "0x00000000000000000000000000000000000000000000000000000000706f6c79"
        ],
        "data": "0x000000000000000000000000fe5e5d361b2ad62c541bab87c45a0b9b018389a2000000000000000000000000523ab7424ad126809b1d7a134eb6e0ee414c9b3a0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 284,
        "blockHash": "0x828db4cd248d42bcd7faf43cda8a854fd43bd02aeca92fda96c9dd8bf083ca1c"
      }
    ],
    "blockNumber": 18737808,
    "cumulativeGasUsed": "10746334",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "6648936",
    "1886350457",
    "0xfe5e5D361b2ad62c541bAb87C45a0B9B018389a2",
    "0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A",
    "0x0000000000000000000000000000000000000000",
    "0x86E4Dc95c7FBdBf52e33D563BbDB00823894C287"
  ],
  "numDeployments": 1,
  "solcInputHash": "6bf31a306ab4114d8da67142c8525ee9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_mirrorDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_amb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rootManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mirrorConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_checkPointManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Connector__processMessage_notUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyOwner_notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyProposed_notProposedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__ownershipDelayElapsed_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_noProposal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MessageProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"MirrorConnectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"mirrorDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amb\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rootManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mirrorConnector\",\"type\":\"address\"}],\"name\":\"NewConnector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AMB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIRROR_DOMAIN\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptProposedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirrorConnector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"processMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedMessageRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlyProposed\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedData\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mirrorConnector\",\"type\":\"address\"}],\"name\":\"setMirrorConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_expected\",\"type\":\"address\"}],\"name\":\"verifySender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"processMessage(bytes)\":{\"details\":\"This is called by AMBs to process messages originating from mirror connector\"},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}},\"sendMessage(bytes,bytes)\":{\"details\":\"This is called by the root manager *only* on mainnet to propagate the aggregate root\"},\"withdrawFunds(address)\":{\"details\":\"Withdraws the entire balance of the contract.\",\"params\":{\"_to\":\"The recipient of the funds withdrawn\"}}},\"version\":1},\"userdoc\":{\"events\":{\"FundsWithdrawn(address,uint256)\":{\"notice\":\"Emitted when funds are withdrawn by the admin\"},\"MessageProcessed(bytes,address)\":{\"notice\":\"Emitted whenever a message is successfully received over an AMB\"},\"MessageSent(bytes,bytes,address)\":{\"notice\":\"Emitted whenever a message is successfully sent over an AMB\"}},\"kind\":\"user\",\"methods\":{\"AMB()\":{\"notice\":\"Address of the AMB on this domain.\"},\"DOMAIN()\":{\"notice\":\"The domain of this Messaging (i.e. Connector) contract.\"},\"MIRROR_DOMAIN()\":{\"notice\":\"The domain of the corresponding messaging (i.e. Connector) contract.\"},\"ROOT_MANAGER()\":{\"notice\":\"RootManager contract address.\"},\"acceptProposedOwner()\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"delay()\":{\"notice\":\"Returns the delay period before a new owner can be accepted.\"},\"mirrorConnector()\":{\"notice\":\"Connector on L2 for L1 connectors, and vice versa.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"processMessage(bytes)\":{\"notice\":\"Processes a message received by an AMB\"},\"processedMessageRoots(bytes32)\":{\"notice\":\"This mapping records all message roots that have already been processed in order to prevent redundant message roots from being aggregated.\"},\"proposeNewOwner(address)\":{\"notice\":\"Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process\"},\"proposed()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"proposedTimestamp()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"},\"renounceOwnership()\":{\"notice\":\"Renounces ownership of the contract after a delay\"},\"renounced()\":{\"notice\":\"Indicates if the ownership has been renounced() by checking if current owner is address(0)\"},\"sendMessage(bytes,bytes)\":{\"notice\":\"Sends a message over the amb\"},\"setMirrorConnector(address)\":{\"notice\":\"Sets the address of the l2Connector for this domain\"},\"verifySender(address)\":{\"notice\":\"Checks the cross domain sender for a given address\"},\"withdrawFunds(address)\":{\"notice\":\"This function should be callable by owner, and send funds trapped on a connector to the provided recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messaging/connectors/polygon/PolygonHubConnector.sol\":\"PolygonHubConnector\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/messaging/connectors/Connector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {ProposedOwnable} from \\\"../../shared/ProposedOwnable.sol\\\";\\nimport {IConnector} from \\\"../interfaces/IConnector.sol\\\";\\n\\n/**\\n * @title Connector\\n * @author Connext Labs, Inc.\\n * @notice This contract has the messaging interface functions used by all connectors.\\n *\\n * @dev This contract stores information about mirror connectors, but can be used as a\\n * base for contracts that do not have a mirror (i.e. the connector handling messaging on\\n * mainnet). In this case, the `mirrorConnector` and `MIRROR_DOMAIN`\\n * will be empty\\n *\\n * @dev If ownership is renounced, this contract will be unable to update its `mirrorConnector`\\n * or `mirrorGas`\\n */\\nabstract contract Connector is ProposedOwnable, IConnector {\\n  // ========== Custom Errors ===========\\n\\n  error Connector__processMessage_notUsed();\\n\\n  // ============ Events ============\\n\\n  event NewConnector(\\n    uint32 indexed domain,\\n    uint32 indexed mirrorDomain,\\n    address amb,\\n    address rootManager,\\n    address mirrorConnector\\n  );\\n\\n  event MirrorConnectorUpdated(address previous, address current);\\n\\n  /**\\n   * @notice Emitted when funds are withdrawn by the admin\\n   * @dev See comments in `withdrawFunds`\\n   * @param to The recipient of the funds\\n   * @param amount The amount withdrawn\\n   */\\n  event FundsWithdrawn(address indexed to, uint256 amount);\\n\\n  // ============ Public Storage ============\\n\\n  /**\\n   * @notice The domain of this Messaging (i.e. Connector) contract.\\n   */\\n  uint32 public immutable DOMAIN;\\n\\n  /**\\n   * @notice Address of the AMB on this domain.\\n   */\\n  address public immutable AMB;\\n\\n  /**\\n   * @notice RootManager contract address.\\n   */\\n  address public immutable ROOT_MANAGER;\\n\\n  /**\\n   * @notice The domain of the corresponding messaging (i.e. Connector) contract.\\n   */\\n  uint32 public immutable MIRROR_DOMAIN;\\n\\n  /**\\n   * @notice Connector on L2 for L1 connectors, and vice versa.\\n   */\\n  address public mirrorConnector;\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Errors if the msg.sender is not the registered AMB\\n   */\\n  modifier onlyAMB() {\\n    require(msg.sender == AMB, \\\"!AMB\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Errors if the msg.sender is not the registered ROOT_MANAGER\\n   */\\n  modifier onlyRootManager() {\\n    // NOTE: RootManager will be zero address for spoke connectors.\\n    // Only root manager can dispatch a message to spokes/L2s via the hub connector.\\n    require(msg.sender == ROOT_MANAGER, \\\"!rootManager\\\");\\n    _;\\n  }\\n\\n  // ============ Constructor ============\\n\\n  /**\\n   * @notice Creates a new HubConnector instance\\n   * @dev The connectors are deployed such that there is one on each side of an AMB (i.e.\\n   * for optimism, there is one connector on optimism and one connector on mainnet)\\n   * @param _domain The domain this connector lives on\\n   * @param _mirrorDomain The spoke domain\\n   * @param _amb The address of the amb on the domain this connector lives on\\n   * @param _rootManager The address of the RootManager on mainnet\\n   * @param _mirrorConnector The address of the spoke connector\\n   */\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector\\n  ) ProposedOwnable() {\\n    // set the owner\\n    _setOwner(msg.sender);\\n\\n    // sanity checks on values\\n    require(_domain != 0, \\\"empty domain\\\");\\n    require(_rootManager != address(0), \\\"empty rootManager\\\");\\n    // see note at top of contract on why the mirror values are not sanity checked\\n\\n    // set immutables\\n    DOMAIN = _domain;\\n    AMB = _amb;\\n    ROOT_MANAGER = _rootManager;\\n    MIRROR_DOMAIN = _mirrorDomain;\\n    // set mutables if defined\\n    if (_mirrorConnector != address(0)) {\\n      _setMirrorConnector(_mirrorConnector);\\n    }\\n\\n    emit NewConnector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector);\\n  }\\n\\n  // ============ Receivable ============\\n  /**\\n   * @notice Connectors may need to receive native asset to handle fees when sending a\\n   * message\\n   */\\n  receive() external payable {}\\n\\n  // ============ Admin Functions ============\\n\\n  /**\\n   * @notice Sets the address of the l2Connector for this domain\\n   */\\n  function setMirrorConnector(address _mirrorConnector) public onlyOwner {\\n    _setMirrorConnector(_mirrorConnector);\\n  }\\n\\n  /**\\n   * @notice This function should be callable by owner, and send funds trapped on\\n   * a connector to the provided recipient.\\n   * @dev Withdraws the entire balance of the contract.\\n   *\\n   * @param _to The recipient of the funds withdrawn\\n   */\\n  function withdrawFunds(address _to) public onlyOwner {\\n    uint256 amount = address(this).balance;\\n    Address.sendValue(payable(_to), amount);\\n    emit FundsWithdrawn(_to, amount);\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Processes a message received by an AMB\\n   * @dev This is called by AMBs to process messages originating from mirror connector\\n   */\\n  function processMessage(bytes memory _data) external virtual onlyAMB {\\n    _processMessage(_data);\\n    emit MessageProcessed(_data, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Checks the cross domain sender for a given address\\n   */\\n  function verifySender(address _expected) external returns (bool) {\\n    return _verifySender(_expected);\\n  }\\n\\n  // ============ Virtual Functions ============\\n\\n  /**\\n   * @notice This function is used by the Connext contract on the l2 domain to send a message to the\\n   * l1 domain (i.e. called by Connext on optimism to send a message to mainnet with roots)\\n   * @param _data The contents of the message\\n   * @param _encodedData Data used to send the message; specific to connector\\n   */\\n  function _sendMessage(bytes memory _data, bytes memory _encodedData) internal virtual;\\n\\n  /**\\n   * @notice This function is used by the AMBs to handle incoming messages. Should store the latest\\n   * root generated on the l2 domain.\\n   */\\n  function _processMessage(\\n    bytes memory /* _data */\\n  ) internal virtual {\\n    // By default, reverts. This is to ensure the call path is not used unless this function is\\n    // overridden by the inheriting class\\n    revert Connector__processMessage_notUsed();\\n  }\\n\\n  /**\\n   * @notice Verify that the msg.sender is the correct AMB contract, and that the message's origin sender\\n   * is the expected address.\\n   * @dev Should be overridden by the implementing Connector contract.\\n   */\\n  function _verifySender(address _expected) internal virtual returns (bool);\\n\\n  // ============ Private Functions ============\\n\\n  function _setMirrorConnector(address _mirrorConnector) internal virtual {\\n    emit MirrorConnectorUpdated(mirrorConnector, _mirrorConnector);\\n    mirrorConnector = _mirrorConnector;\\n  }\\n}\\n\",\"keccak256\":\"0x11b9785b7c3ce1296c4bea0b30f3ab28d9834121c63ab1b364cb54992f8fd90c\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/HubConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {Connector} from \\\"./Connector.sol\\\";\\n\\n/**\\n * @title HubConnector\\n * @author Connext Labs, Inc.\\n * @notice This contract implements the messaging functions needed on the hub-side of a given AMB.\\n * The HubConnector has a limited set of functionality compared to the SpokeConnector, namely that\\n * it contains no logic to store or prove messages.\\n *\\n * @dev This contract should be deployed on the hub-side of an AMB (i.e. on L1), and contracts\\n * which extend this should implement the virtual functions defined in the BaseConnector class\\n */\\nabstract contract HubConnector is Connector {\\n  /**\\n   * @notice Creates a new HubConnector instance\\n   * @dev The connectors are deployed such that there is one on each side of an AMB (i.e.\\n   * for optimism, there is one connector on optimism and one connector on mainnet)\\n   * @param _domain The domain this connector lives on\\n   * @param _mirrorDomain The spoke domain\\n   * @param _amb The address of the amb on the domain this connector lives on\\n   * @param _rootManager The address of the RootManager on mainnet\\n   * @param _mirrorConnector The address of the spoke connector\\n   */\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector\\n  ) Connector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector) {}\\n\\n  // ============ Public fns ============\\n  /**\\n   * @notice Sends a message over the amb\\n   * @dev This is called by the root manager *only* on mainnet to propagate the aggregate root\\n   */\\n  function sendMessage(bytes memory _data, bytes memory _encodedData) external payable onlyRootManager {\\n    _sendMessage(_data, _encodedData);\\n    emit MessageSent(_data, _encodedData, msg.sender);\\n  }\\n}\\n\",\"keccak256\":\"0xc35621419ca872ed0550b0943a577b39942f3d2c9b54de008fee382d5ad290e4\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/polygon/PolygonHubConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {IRootManager} from \\\"../../interfaces/IRootManager.sol\\\";\\n\\nimport {FxBaseRootTunnel} from \\\"./tunnel/FxBaseRootTunnel.sol\\\";\\n\\nimport {HubConnector} from \\\"../HubConnector.sol\\\";\\n\\ncontract PolygonHubConnector is HubConnector, FxBaseRootTunnel {\\n  /**\\n   * @notice This mapping records all message roots that have already been processed in order to prevent\\n   * redundant message roots from being aggregated.\\n   */\\n  mapping(bytes32 => bool) public processedMessageRoots;\\n\\n  // ============ Constructor ============\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector,\\n    address _checkPointManager\\n  )\\n    HubConnector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector)\\n    FxBaseRootTunnel(_checkPointManager, _amb)\\n  {}\\n\\n  // ============ Private fns ============\\n\\n  function _verifySender(address _expected) internal view override returns (bool) {\\n    // NOTE: always return false on polygon\\n    return false;\\n  }\\n\\n  function _sendMessage(bytes memory _data, bytes memory _encodedData) internal override {\\n    // Should not include specialized calldata\\n    require(_encodedData.length == 0, \\\"!data length\\\");\\n    _sendMessageToChild(_data);\\n  }\\n\\n  function _processMessageFromChild(bytes memory message) internal override {\\n    // NOTE: crosschain sender is not directly exposed by the child message\\n\\n    // do not need any additional sender or origin checks here since the proof contains inclusion proofs of the snapshots\\n\\n    // get the data (should be the aggregate root)\\n    require(message.length == 32, \\\"!length\\\");\\n\\n    // check if the message root has already been processed\\n    require(!processedMessageRoots[bytes32(message)], \\\"message root already processed\\\");\\n    // mark as processed\\n    processedMessageRoots[bytes32(message)] = true;\\n\\n    // update the root on the root manager\\n    IRootManager(ROOT_MANAGER).aggregate(MIRROR_DOMAIN, bytes32(message));\\n\\n    emit MessageProcessed(message, msg.sender);\\n  }\\n\\n  // DO NOT override _processMessage, should revert from `Connector` class. All messages must use the\\n  // `_processMessageFromChild` flow.\\n\\n  function _setMirrorConnector(address _mirrorConnector) internal override {\\n    // NOTE: FxBaseRootTunnel has the following code in their `setFxChildTunnel`:\\n    // ```\\n    // require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n    // ```\\n    // Which means this function will revert if updating the `mirrorConnector`. In that case, in\\n    // changes  the\\n    // hub connector should also be redeployed\\n    super._setMirrorConnector(_mirrorConnector);\\n\\n    setFxChildTunnel(_mirrorConnector);\\n  }\\n}\\n\",\"keccak256\":\"0x77f755919ba651b119b3de76b24cae988c9c478f749f7e6bdf21cd70a0937e61\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/polygon/lib/ExitPayloadReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/fx-portal/contracts/blob/main/contracts/lib/ExitPayloadReader.sol\\npragma solidity 0.8.17;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary ExitPayloadReader {\\n  using RLPReader for bytes;\\n  using RLPReader for RLPReader.RLPItem;\\n\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct ExitPayload {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  struct Receipt {\\n    RLPReader.RLPItem[] data;\\n    bytes raw;\\n    uint256 logIndex;\\n  }\\n\\n  struct Log {\\n    RLPReader.RLPItem data;\\n    RLPReader.RLPItem[] list;\\n  }\\n\\n  struct LogTopics {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\n  function copy(\\n    uint256 src,\\n    uint256 dest,\\n    uint256 len\\n  ) private pure {\\n    if (len == 0) return;\\n\\n    // copy as many word sizes as possible\\n    for (; len > WORD_SIZE - 1; len -= WORD_SIZE) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n\\n      src += WORD_SIZE;\\n      dest += WORD_SIZE;\\n    }\\n\\n    if (len == 0) return;\\n\\n    // left over bytes. Mask is used to remove unwanted bytes from the word\\n    uint256 mask = 256**(WORD_SIZE - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask)) // zero out src\\n      let destpart := and(mload(dest), mask) // retrieve the bytes\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  function toExitPayload(bytes memory data) internal pure returns (ExitPayload memory) {\\n    RLPReader.RLPItem[] memory payloadData = data.toRlpItem().toList();\\n\\n    return ExitPayload(payloadData);\\n  }\\n\\n  function getHeaderNumber(ExitPayload memory payload) internal pure returns (uint256) {\\n    return payload.data[0].toUint();\\n  }\\n\\n  function getBlockProof(ExitPayload memory payload) internal pure returns (bytes memory) {\\n    return payload.data[1].toBytes();\\n  }\\n\\n  function getBlockNumber(ExitPayload memory payload) internal pure returns (uint256) {\\n    return payload.data[2].toUint();\\n  }\\n\\n  function getBlockTime(ExitPayload memory payload) internal pure returns (uint256) {\\n    return payload.data[3].toUint();\\n  }\\n\\n  function getTxRoot(ExitPayload memory payload) internal pure returns (bytes32) {\\n    return bytes32(payload.data[4].toUint());\\n  }\\n\\n  function getReceiptRoot(ExitPayload memory payload) internal pure returns (bytes32) {\\n    return bytes32(payload.data[5].toUint());\\n  }\\n\\n  function getReceipt(ExitPayload memory payload) internal pure returns (Receipt memory receipt) {\\n    receipt.raw = payload.data[6].toBytes();\\n    RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\n\\n    if (receiptItem.isList()) {\\n      // legacy tx\\n      receipt.data = receiptItem.toList();\\n    } else {\\n      // pop first byte before parsting receipt\\n      bytes memory typedBytes = receipt.raw;\\n      bytes memory result = new bytes(typedBytes.length - 1);\\n      uint256 srcPtr;\\n      uint256 destPtr;\\n      assembly {\\n        srcPtr := add(33, typedBytes)\\n        destPtr := add(0x20, result)\\n      }\\n\\n      copy(srcPtr, destPtr, result.length);\\n      receipt.data = result.toRlpItem().toList();\\n    }\\n\\n    receipt.logIndex = getReceiptLogIndex(payload);\\n    return receipt;\\n  }\\n\\n  function getReceiptProof(ExitPayload memory payload) internal pure returns (bytes memory) {\\n    return payload.data[7].toBytes();\\n  }\\n\\n  function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns (bytes memory) {\\n    return payload.data[8].toBytes();\\n  }\\n\\n  function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns (uint256) {\\n    return payload.data[8].toUint();\\n  }\\n\\n  function getReceiptLogIndex(ExitPayload memory payload) internal pure returns (uint256) {\\n    return payload.data[9].toUint();\\n  }\\n\\n  // Receipt methods\\n  function toBytes(Receipt memory receipt) internal pure returns (bytes memory) {\\n    return receipt.raw;\\n  }\\n\\n  function getLog(Receipt memory receipt) internal pure returns (Log memory) {\\n    RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\n    return Log(logData, logData.toList());\\n  }\\n\\n  // Log methods\\n  function getEmitter(Log memory log) internal pure returns (address) {\\n    return RLPReader.toAddress(log.list[0]);\\n  }\\n\\n  function getTopics(Log memory log) internal pure returns (LogTopics memory) {\\n    return LogTopics(log.list[1].toList());\\n  }\\n\\n  function getData(Log memory log) internal pure returns (bytes memory) {\\n    return log.list[2].toBytes();\\n  }\\n\\n  function toRlpBytes(Log memory log) internal pure returns (bytes memory) {\\n    return log.data.toRlpBytes();\\n  }\\n\\n  // LogTopics methods\\n  function getField(LogTopics memory topics, uint256 index) internal pure returns (RLPReader.RLPItem memory) {\\n    return topics.data[index];\\n  }\\n}\\n\",\"keccak256\":\"0x0d07d60a794df4d3c0a41032f0ee46912daeb73369a3a112f376fcd0487fc107\",\"license\":\"MIT\"},\"contracts/messaging/connectors/polygon/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/fx-portal/contracts/blob/main/contracts/lib/Merkle.sol\\npragma solidity 0.8.17;\\n\\nlibrary Merkle {\\n  function checkMembership(\\n    bytes32 leaf,\\n    uint256 index,\\n    bytes32 rootHash,\\n    bytes memory proof\\n  ) internal pure returns (bool) {\\n    require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n    uint256 proofHeight = proof.length / 32;\\n    // Proof of size n means, height of the tree is n+1.\\n    // In a tree of height n+1, max #leafs possible is 2 ^ n\\n    require(index < 2**proofHeight, \\\"Leaf index is too big\\\");\\n\\n    bytes32 proofElement;\\n    bytes32 computedHash = leaf;\\n    uint256 len = proof.length + 1;\\n    for (uint256 i = 32; i < len; ) {\\n      assembly {\\n        proofElement := mload(add(proof, i))\\n      }\\n\\n      if (index % 2 == 0) {\\n        computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n      } else {\\n        computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n      }\\n\\n      index = index / 2;\\n\\n      unchecked {\\n        i += 32;\\n      }\\n    }\\n    return computedHash == rootHash;\\n  }\\n}\\n\",\"keccak256\":\"0xc7282da570239b7d6c774fa6e829a605d73bdfcc7812b727f4a5b42b17b6d64f\",\"license\":\"MIT\"},\"contracts/messaging/connectors/polygon/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/fx-portal/contracts/blob/main/contracts/lib/MerklePatriciaProof.sol\\npragma solidity 0.8.17;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n  /*\\n   * @dev Verifies a merkle patricia proof.\\n   * @param value The terminating value in the trie.\\n   * @param encodedPath The path in the trie leading to value.\\n   * @param rlpParentNodes The rlp encoded stack of nodes.\\n   * @param root The root hash of the trie.\\n   * @return The boolean validity of the proof.\\n   */\\n  function verify(\\n    bytes memory value,\\n    bytes memory encodedPath,\\n    bytes memory rlpParentNodes,\\n    bytes32 root\\n  ) internal pure returns (bool) {\\n    RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n    RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n    bytes memory currentNode;\\n    RLPReader.RLPItem[] memory currentNodeList;\\n\\n    bytes32 nodeKey = root;\\n    uint256 pathPtr = 0;\\n\\n    bytes memory path = _getNibbleArray(encodedPath);\\n    if (path.length == 0) {\\n      return false;\\n    }\\n\\n    uint256 len = parentNodes.length;\\n    for (uint256 i = 0; i < len; ) {\\n      if (pathPtr > path.length) {\\n        return false;\\n      }\\n\\n      currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n      if (nodeKey != keccak256(currentNode)) {\\n        return false;\\n      }\\n      currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n      if (currentNodeList.length == 17) {\\n        if (pathPtr == path.length) {\\n          if (keccak256(RLPReader.toBytes(currentNodeList[16])) == keccak256(value)) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        }\\n\\n        uint8 nextPathNibble = uint8(path[pathPtr]);\\n        if (nextPathNibble > 16) {\\n          return false;\\n        }\\n        nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[nextPathNibble]));\\n        pathPtr += 1;\\n      } else if (currentNodeList.length == 2) {\\n        uint256 traversed = _nibblesToTraverse(RLPReader.toBytes(currentNodeList[0]), path, pathPtr);\\n        if (pathPtr + traversed == path.length) {\\n          //leaf node\\n          if (keccak256(RLPReader.toBytes(currentNodeList[1])) == keccak256(value)) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        }\\n\\n        //extension node\\n        if (traversed == 0) {\\n          return false;\\n        }\\n\\n        pathPtr += traversed;\\n        nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n      } else {\\n        return false;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  function _nibblesToTraverse(\\n    bytes memory encodedPartialPath,\\n    bytes memory path,\\n    uint256 pathPtr\\n  ) private pure returns (uint256) {\\n    uint256 len = 0;\\n    // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n    // and slicedPath have elements that are each one hex character (1 nibble)\\n    bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n    bytes memory slicedPath = new bytes(partialPath.length);\\n\\n    // pathPtr counts nibbles in path\\n    // partialPath.length is a number of nibbles\\n    uint256 _len = pathPtr + partialPath.length;\\n    for (uint256 i = pathPtr; i < _len; ) {\\n      bytes1 pathNibble = path[i];\\n      slicedPath[i - pathPtr] = pathNibble;\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    if (keccak256(partialPath) == keccak256(slicedPath)) {\\n      len = partialPath.length;\\n    } else {\\n      len = 0;\\n    }\\n    return len;\\n  }\\n\\n  // bytes b must be hp encoded\\n  function _getNibbleArray(bytes memory b) internal pure returns (bytes memory) {\\n    bytes memory nibbles = \\\"\\\";\\n    if (b.length > 0) {\\n      uint8 offset;\\n      uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n      if (hpNibble == 1 || hpNibble == 3) {\\n        nibbles = new bytes(b.length * 2 - 1);\\n        bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n        nibbles[0] = oddNibble;\\n        offset = 1;\\n      } else {\\n        nibbles = new bytes(b.length * 2 - 2);\\n        offset = 0;\\n      }\\n\\n      uint256 len = nibbles.length;\\n      for (uint256 i = offset; i < len; ) {\\n        nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n    }\\n    return nibbles;\\n  }\\n\\n  function _getNthNibbleOfBytes(uint256 n, bytes memory str) private pure returns (bytes1) {\\n    return bytes1(n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10);\\n  }\\n}\\n\",\"keccak256\":\"0x5132cb2535739352bac5f6cd66689cbd1bc086e048a05f7524079ef74ad693b3\",\"license\":\"MIT\"},\"contracts/messaging/connectors/polygon/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/fx-portal/contracts/blob/main/contracts/lib/RLPReader.sol\\npragma solidity 0.8.17;\\n\\nlibrary RLPReader {\\n  uint8 constant STRING_SHORT_START = 0x80;\\n  uint8 constant STRING_LONG_START = 0xb8;\\n  uint8 constant LIST_SHORT_START = 0xc0;\\n  uint8 constant LIST_LONG_START = 0xf8;\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct RLPItem {\\n    uint256 len;\\n    uint256 memPtr;\\n  }\\n\\n  struct Iterator {\\n    RLPItem item; // Item that's being iterated over.\\n    uint256 nextPtr; // Position of the next item in the list.\\n  }\\n\\n  /*\\n   * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n   * @param self The iterator.\\n   * @return The next element in the iteration.\\n   */\\n  function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n    require(hasNext(self));\\n\\n    uint256 ptr = self.nextPtr;\\n    uint256 itemLength = _itemLength(ptr);\\n    self.nextPtr = ptr + itemLength;\\n\\n    return RLPItem(itemLength, ptr);\\n  }\\n\\n  /*\\n   * @dev Returns true if the iteration has more elements.\\n   * @param self The iterator.\\n   * @return true if the iteration has more elements.\\n   */\\n  function hasNext(Iterator memory self) internal pure returns (bool) {\\n    RLPItem memory item = self.item;\\n    return self.nextPtr < item.memPtr + item.len;\\n  }\\n\\n  /*\\n   * @param item RLP encoded bytes\\n   */\\n  function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n    uint256 memPtr;\\n    assembly {\\n      memPtr := add(item, 0x20)\\n    }\\n\\n    return RLPItem(item.length, memPtr);\\n  }\\n\\n  /*\\n   * @dev Create an iterator. Reverts if item is not a list.\\n   * @param self The RLP item.\\n   * @return An 'Iterator' over the item.\\n   */\\n  function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n    require(isList(self));\\n\\n    uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n    return Iterator(self, ptr);\\n  }\\n\\n  /*\\n   * @param item RLP encoded bytes\\n   */\\n  function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n    return item.len;\\n  }\\n\\n  /*\\n   * @param item RLP encoded bytes\\n   */\\n  function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n    return item.len - _payloadOffset(item.memPtr);\\n  }\\n\\n  /*\\n   * @param item RLP encoded list in bytes\\n   */\\n  function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n    require(isList(item));\\n\\n    uint256 items = numItems(item);\\n    RLPItem[] memory result = new RLPItem[](items);\\n\\n    uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n    uint256 dataLen;\\n    for (uint256 i = 0; i < items; ) {\\n      dataLen = _itemLength(memPtr);\\n      result[i] = RLPItem(dataLen, memPtr);\\n      memPtr = memPtr + dataLen;\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  // @return indicator whether encoded payload is a list. negate this function call for isData.\\n  function isList(RLPItem memory item) internal pure returns (bool) {\\n    if (item.len == 0) return false;\\n\\n    uint8 byte0;\\n    uint256 memPtr = item.memPtr;\\n    assembly {\\n      byte0 := byte(0, mload(memPtr))\\n    }\\n\\n    if (byte0 < LIST_SHORT_START) return false;\\n    return true;\\n  }\\n\\n  /*\\n   * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n   * @return keccak256 hash of RLP encoded bytes.\\n   */\\n  function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n    uint256 ptr = item.memPtr;\\n    uint256 len = item.len;\\n    bytes32 result;\\n    assembly {\\n      result := keccak256(ptr, len)\\n    }\\n    return result;\\n  }\\n\\n  function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n    uint256 offset = _payloadOffset(item.memPtr);\\n    uint256 memPtr = item.memPtr + offset;\\n    uint256 len = item.len - offset; // data length\\n    return (memPtr, len);\\n  }\\n\\n  /*\\n   * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n   * @return keccak256 hash of the item payload.\\n   */\\n  function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n    (uint256 memPtr, uint256 len) = payloadLocation(item);\\n    bytes32 result;\\n    assembly {\\n      result := keccak256(memPtr, len)\\n    }\\n    return result;\\n  }\\n\\n  /** RLPItem conversions into data types **/\\n\\n  // @returns raw rlp encoding in bytes\\n  function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n    bytes memory result = new bytes(item.len);\\n    if (result.length == 0) return result;\\n\\n    uint256 ptr;\\n    assembly {\\n      ptr := add(0x20, result)\\n    }\\n\\n    copy(item.memPtr, ptr, item.len);\\n    return result;\\n  }\\n\\n  // any non-zero byte is considered true\\n  function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n    require(item.len == 1);\\n    uint256 result;\\n    uint256 memPtr = item.memPtr;\\n    assembly {\\n      result := byte(0, mload(memPtr))\\n    }\\n\\n    return result == 0 ? false : true;\\n  }\\n\\n  function toAddress(RLPItem memory item) internal pure returns (address) {\\n    // 1 byte for the length prefix\\n    require(item.len == 21);\\n\\n    return address(uint160(toUint(item)));\\n  }\\n\\n  function toUint(RLPItem memory item) internal pure returns (uint256) {\\n    require(item.len > 0 && item.len < 33 + 1);\\n\\n    uint256 offset = _payloadOffset(item.memPtr);\\n    uint256 len = item.len - offset;\\n\\n    uint256 result;\\n    uint256 memPtr = item.memPtr + offset;\\n    assembly {\\n      result := mload(memPtr)\\n\\n      // shfit to the correct location if neccesary\\n      if lt(len, 32) {\\n        result := div(result, exp(256, sub(32, len)))\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  // enforces 32 byte length\\n  function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n    // one byte prefix\\n    require(item.len == 33);\\n\\n    uint256 result;\\n    uint256 memPtr = item.memPtr + 1;\\n    assembly {\\n      result := mload(memPtr)\\n    }\\n\\n    return result;\\n  }\\n\\n  function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n    require(item.len > 0);\\n\\n    uint256 offset = _payloadOffset(item.memPtr);\\n    uint256 len = item.len - offset; // data length\\n    bytes memory result = new bytes(len);\\n\\n    uint256 destPtr;\\n    assembly {\\n      destPtr := add(0x20, result)\\n    }\\n\\n    copy(item.memPtr + offset, destPtr, len);\\n    return result;\\n  }\\n\\n  /*\\n   * Private Helpers\\n   */\\n\\n  // @return number of payload items inside an encoded list.\\n  function numItems(RLPItem memory item) private pure returns (uint256) {\\n    if (item.len == 0) return 0;\\n\\n    uint256 count = 0;\\n    uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n    uint256 endPtr = item.memPtr + item.len;\\n    while (currPtr < endPtr) {\\n      currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n      count++;\\n    }\\n\\n    return count;\\n  }\\n\\n  // @return entire rlp item byte length\\n  function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n    uint256 itemLen;\\n    uint256 byte0;\\n    assembly {\\n      byte0 := byte(0, mload(memPtr))\\n    }\\n\\n    if (byte0 < STRING_SHORT_START) itemLen = 1;\\n    else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1;\\n    else if (byte0 < LIST_SHORT_START) {\\n      assembly {\\n        let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n        memPtr := add(memPtr, 1) // skip over the first byte\\n        /* 32 byte word size */\\n        let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n        itemLen := add(dataLen, add(byteLen, 1))\\n      }\\n    } else if (byte0 < LIST_LONG_START) {\\n      itemLen = byte0 - LIST_SHORT_START + 1;\\n    } else {\\n      assembly {\\n        let byteLen := sub(byte0, 0xf7)\\n        memPtr := add(memPtr, 1)\\n\\n        let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n        itemLen := add(dataLen, add(byteLen, 1))\\n      }\\n    }\\n\\n    return itemLen;\\n  }\\n\\n  // @return number of bytes until the data\\n  function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n    uint256 byte0;\\n    assembly {\\n      byte0 := byte(0, mload(memPtr))\\n    }\\n\\n    if (byte0 < STRING_SHORT_START) return 0;\\n    else if (byte0 < STRING_LONG_START || (byte0 > LIST_SHORT_START - 1 && byte0 < LIST_LONG_START)) return 1;\\n    else if (byte0 < LIST_SHORT_START)\\n      // being explicit\\n      return byte0 - (STRING_LONG_START - 1) + 1;\\n    else return byte0 - (LIST_LONG_START - 1) + 1;\\n  }\\n\\n  /*\\n   * @param src Pointer to source\\n   * @param dest Pointer to destination\\n   * @param len Amount of memory to copy from the source\\n   */\\n  function copy(\\n    uint256 src,\\n    uint256 dest,\\n    uint256 len\\n  ) private pure {\\n    if (len == 0) return;\\n\\n    // copy as many word sizes as possible\\n    for (; len > WORD_SIZE - 1; len -= WORD_SIZE) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n\\n      src += WORD_SIZE;\\n      dest += WORD_SIZE;\\n    }\\n\\n    if (len == 0) return;\\n\\n    // left over bytes. Mask is used to remove unwanted bytes from the word\\n    uint256 mask = 256**(WORD_SIZE - len) - 1;\\n\\n    assembly {\\n      let srcpart := and(mload(src), not(mask)) // zero out src\\n      let destpart := and(mload(dest), mask) // retrieve the bytes\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x213834ee76145029ef22fab9575fbffec4309f7b52b63e23d840aeab7f5a6f44\",\"license\":\"MIT\"},\"contracts/messaging/connectors/polygon/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/fx-portal/contracts/blob/main/contracts/tunnel/FxBaseRootTunnel.sol\\npragma solidity 0.8.17;\\n\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\nimport \\\"../lib/ExitPayloadReader.sol\\\";\\n\\ninterface IFxStateSender {\\n  function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n  struct HeaderBlock {\\n    bytes32 root;\\n    uint256 start;\\n    uint256 end;\\n    uint256 createdAt;\\n    address proposer;\\n  }\\n\\n  /**\\n   * @notice mapping of checkpoint header numbers to block details\\n   * @dev These checkpoints are submited by plasma contracts\\n   */\\n  mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n  using RLPReader for RLPReader.RLPItem;\\n  using Merkle for bytes32;\\n  using ExitPayloadReader for bytes;\\n  using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\n  using ExitPayloadReader for ExitPayloadReader.Log;\\n  using ExitPayloadReader for ExitPayloadReader.LogTopics;\\n  using ExitPayloadReader for ExitPayloadReader.Receipt;\\n\\n  // keccak256(MessageSent(bytes))\\n  bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n  // state sender contract\\n  IFxStateSender public fxRoot;\\n  // root chain manager\\n  ICheckpointManager public checkpointManager;\\n  // child tunnel contract which receives and sends messages\\n  address public fxChildTunnel;\\n\\n  // storage to avoid duplicate exits\\n  mapping(bytes32 => bool) public processedExits;\\n\\n  constructor(address _checkpointManager, address _fxRoot) {\\n    checkpointManager = ICheckpointManager(_checkpointManager);\\n    fxRoot = IFxStateSender(_fxRoot);\\n  }\\n\\n  // set fxChildTunnel if not set already\\n  function setFxChildTunnel(address _fxChildTunnel) internal virtual {\\n    require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n    fxChildTunnel = _fxChildTunnel;\\n  }\\n\\n  /**\\n   * @notice Send bytes message to Child Tunnel\\n   * @param message bytes message that will be sent to Child Tunnel\\n   * some message examples -\\n   *   abi.encode(tokenId);\\n   *   abi.encode(tokenId, tokenMetadata);\\n   *   abi.encode(messageType, messageData);\\n   */\\n  function _sendMessageToChild(bytes memory message) internal {\\n    fxRoot.sendMessageToChild(fxChildTunnel, message);\\n  }\\n\\n  function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n    ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\n\\n    bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\n    uint256 blockNumber = payload.getBlockNumber();\\n    // checking if exit has already been processed\\n    // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n    bytes32 exitHash = keccak256(\\n      abi.encodePacked(\\n        blockNumber,\\n        // first 2 nibbles are dropped while generating nibble array\\n        // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n        // so converting to nibble array and then hashing it\\n        MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\n        payload.getReceiptLogIndex()\\n      )\\n    );\\n    require(processedExits[exitHash] == false, \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\");\\n    processedExits[exitHash] = true;\\n\\n    ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\n    ExitPayloadReader.Log memory log = receipt.getLog();\\n\\n    // check child tunnel\\n    require(fxChildTunnel == log.getEmitter(), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n    bytes32 receiptRoot = payload.getReceiptRoot();\\n    // verify receipt inclusion\\n    require(\\n      MerklePatriciaProof.verify(receipt.toBytes(), branchMaskBytes, payload.getReceiptProof(), receiptRoot),\\n      \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n    );\\n\\n    // verify checkpoint inclusion\\n    _checkBlockMembershipInCheckpoint(\\n      blockNumber,\\n      payload.getBlockTime(),\\n      payload.getTxRoot(),\\n      receiptRoot,\\n      payload.getHeaderNumber(),\\n      payload.getBlockProof()\\n    );\\n\\n    ExitPayloadReader.LogTopics memory topics = log.getTopics();\\n\\n    require(\\n      bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n      \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n    );\\n\\n    // received message data\\n    bytes memory message = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\n    return message;\\n  }\\n\\n  function _checkBlockMembershipInCheckpoint(\\n    uint256 blockNumber,\\n    uint256 blockTime,\\n    bytes32 txRoot,\\n    bytes32 receiptRoot,\\n    uint256 headerNumber,\\n    bytes memory blockProof\\n  ) private view returns (uint256) {\\n    (bytes32 headerRoot, uint256 startBlock, , uint256 createdAt, ) = checkpointManager.headerBlocks(headerNumber);\\n\\n    require(\\n      keccak256(abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)).checkMembership(\\n        blockNumber - startBlock,\\n        headerRoot,\\n        blockProof\\n      ),\\n      \\\"FxRootTunnel: INVALID_HEADER\\\"\\n    );\\n    return createdAt;\\n  }\\n\\n  /**\\n   * @notice receive message from  L2 to L1, validated by proof\\n   * @dev This function verifies if the transaction actually happened on child chain\\n   *\\n   * @param inputData RLP encoded data of the reference tx containing following list of fields\\n   *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n   *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n   *  2 - blockNumber - Block number containing the reference tx on child chain\\n   *  3 - blockTime - Reference tx block time\\n   *  4 - txRoot - Transactions root of block\\n   *  5 - receiptRoot - Receipts root of block\\n   *  6 - receipt - Receipt of the reference transaction\\n   *  7 - receiptProof - Merkle proof of the reference receipt\\n   *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n   *  9 - receiptLogIndex - Log Index to read from the receipt\\n   */\\n  function receiveMessage(bytes memory inputData) public virtual {\\n    bytes memory message = _validateAndExtractMessage(inputData);\\n    _processMessageFromChild(message);\\n  }\\n\\n  /**\\n   * @notice Process message received from Child Tunnel\\n   * @dev function needs to be implemented to handle message as per requirement\\n   * This is called by onStateReceive function.\\n   * Since it is called via a system call, any event will not be emitted during its execution.\\n   * @param message bytes message that was sent from Child Tunnel\\n   */\\n  function _processMessageFromChild(bytes memory message) internal virtual;\\n}\\n\",\"keccak256\":\"0x7b5d6a3850d1aba92864c1f7361e2a0f1ecd2073e9ef5783b2ff543f45a7e42d\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {IProposedOwnable} from \\\"../../shared/interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @notice This interface is what the Connext contract will send and receive messages through.\\n * The messaging layer should conform to this interface, and should be interchangeable (i.e.\\n * could be Nomad or a generic AMB under the hood).\\n *\\n * @dev This uses the nomad format to ensure nomad can be added in as it comes back online.\\n *\\n * Flow from transfer from polygon to optimism:\\n * 1. User calls `xcall` with destination specified\\n * 2. This will swap in to the bridge assets\\n * 3. The swapped assets will get burned\\n * 4. The Connext contract will call `dispatch` on the messaging contract to add the transfer\\n *    to the root\\n * 5. [At some time interval] Relayers call `send` to send the current root from polygon to\\n *    mainnet. This is done on all \\\"spoke\\\" domains.\\n * 6. [At some time interval] Relayers call `propagate` [better name] on mainnet, this generates a new merkle\\n *    root from all of the AMBs\\n *    - This function must be able to read root data from all AMBs and aggregate them into a single merkle\\n *      tree root\\n *    - Will send the mixed root from all chains back through the respective AMBs to all other chains\\n * 7. AMB will call `update` to update the latest root on the messaging contract on spoke domains\\n * 8. [At any point] Relayers can call `proveAndProcess` to prove inclusion of dispatched message, and call\\n *    process on the `Connext` contract\\n * 9. Takes minted bridge tokens and credits the LP\\n *\\n * AMB requirements:\\n * - Access `msg.sender` both from mainnet -> spoke and vice versa\\n * - Ability to read *our root* from the AMB\\n *\\n * AMBs:\\n * - PoS bridge from polygon\\n * - arbitrum bridge\\n * - optimism bridge\\n * - gnosis chain\\n * - bsc (use multichain for messaging)\\n */\\ninterface IConnector is IProposedOwnable {\\n  // ============ Events ============\\n  /**\\n   * @notice Emitted whenever a message is successfully sent over an AMB\\n   * @param data The contents of the message\\n   * @param encodedData Data used to send the message; specific to connector\\n   * @param caller Who called the function (sent the message)\\n   */\\n  event MessageSent(bytes data, bytes encodedData, address caller);\\n\\n  /**\\n   * @notice Emitted whenever a message is successfully received over an AMB\\n   * @param data The contents of the message\\n   * @param caller Who called the function\\n   */\\n  event MessageProcessed(bytes data, address caller);\\n\\n  // ============ Public fns ============\\n\\n  function processMessage(bytes memory _data) external;\\n\\n  function verifySender(address _expected) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfba166354b442fa72b05be07aed38400b47f68498e8dfdd94fc43df00c401ed1\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IRootManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\ninterface IRootManager {\\n  /**\\n   * @notice This is called by relayers to generate + send the mixed root from mainnet via AMB to\\n   * spoke domains.\\n   * @dev This must read information for the root from the registered AMBs.\\n   */\\n  function propagate(\\n    address[] calldata _connectors,\\n    uint256[] calldata _fees,\\n    bytes[] memory _encodedData\\n  ) external payable;\\n\\n  /**\\n   * @notice Called by the connectors for various domains on the hub to aggregate their latest\\n   * inbound root.\\n   * @dev This must read information for the root from the registered AMBs\\n   */\\n  function aggregate(uint32 _domain, bytes32 _outbound) external;\\n}\\n\",\"keccak256\":\"0xa895dfaa4baad37a636e7e7e7da72a0a4badfd2d3d8256f975e5101cd5a98236\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/ProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {IProposedOwnable} from \\\"./interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @title ProposedOwnable\\n * @notice Contract module which provides a basic access control mechanism,\\n * where there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed via a two step process:\\n * 1. Call `proposeOwner`\\n * 2. Wait out the delay period\\n * 3. Call `acceptOwner`\\n *\\n * @dev This module is used through inheritance. It will make available the\\n * modifier `onlyOwner`, which can be applied to your functions to restrict\\n * their use to the owner.\\n *\\n * @dev The majority of this code was taken from the openzeppelin Ownable\\n * contract\\n *\\n */\\nabstract contract ProposedOwnable is IProposedOwnable {\\n  // ========== Custom Errors ===========\\n\\n  error ProposedOwnable__onlyOwner_notOwner();\\n  error ProposedOwnable__onlyProposed_notProposedOwner();\\n  error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();\\n  error ProposedOwnable__proposeNewOwner_invalidProposal();\\n  error ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n  error ProposedOwnable__renounceOwnership_noProposal();\\n  error ProposedOwnable__renounceOwnership_invalidProposal();\\n\\n  // ============ Properties ============\\n\\n  address private _owner;\\n\\n  address private _proposed;\\n  uint256 private _proposedOwnershipTimestamp;\\n\\n  uint256 private constant _delay = 7 days;\\n\\n  // ======== Getters =========\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposed() public view virtual returns (address) {\\n    return _proposed;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposedTimestamp() public view virtual returns (uint256) {\\n    return _proposedOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the delay period before a new owner can be accepted.\\n   */\\n  function delay() public view virtual returns (uint256) {\\n    return _delay;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    if (_owner != msg.sender) revert ProposedOwnable__onlyOwner_notOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the proposed owner.\\n   */\\n  modifier onlyProposed() {\\n    if (_proposed != msg.sender) revert ProposedOwnable__onlyProposed_notProposedOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if the ownership delay has not elapsed\\n   */\\n  modifier ownershipDelayElapsed() {\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership has been renounced() by\\n   * checking if current owner is address(0)\\n   */\\n  function renounced() public view returns (bool) {\\n    return _owner == address(0);\\n  }\\n\\n  // ======== External =========\\n\\n  /**\\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\\n   * newly proposed owner as step 1 in a 2-step process\\n   */\\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\\n    // Contract as source of truth\\n    if (_proposed == newlyProposed && _proposedOwnershipTimestamp != 0)\\n      revert ProposedOwnable__proposeNewOwner_invalidProposal();\\n\\n    // Sanity check: reasonable proposal\\n    if (_owner == newlyProposed) revert ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n\\n    _setProposed(newlyProposed);\\n  }\\n\\n  /**\\n   * @notice Renounces ownership of the contract after a delay\\n   */\\n  function renounceOwnership() public virtual onlyOwner ownershipDelayElapsed {\\n    // Ensure there has been a proposal cycle started\\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnable__renounceOwnership_noProposal();\\n\\n    // Require proposed is set to 0\\n    if (_proposed != address(0)) revert ProposedOwnable__renounceOwnership_invalidProposal();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(address(0));\\n  }\\n\\n  /**\\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function acceptProposedOwner() public virtual onlyProposed ownershipDelayElapsed {\\n    // NOTE: no need to check if _owner == _proposed, because the _proposed\\n    // is 0-d out and this check is implicitly enforced by modifier\\n\\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\\n    // the only time this would happen is if the _proposed was never\\n    // set (will fail from modifier) or if the owner == _proposed (checked\\n    // above)\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  // ======== Internal =========\\n\\n  function _setOwner(address newOwner) internal {\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n    delete _proposedOwnershipTimestamp;\\n    delete _proposed;\\n  }\\n\\n  function _setProposed(address newlyProposed) private {\\n    _proposedOwnershipTimestamp = block.timestamp;\\n    _proposed = newlyProposed;\\n    emit OwnershipProposed(newlyProposed);\\n  }\\n}\\n\",\"keccak256\":\"0xa96eff4fdff55ffa29cda5c18285a9af04c3cbaf55f83696085cdd2251a8d6c0\",\"license\":\"UNLICENSED\"},\"contracts/shared/interfaces/IProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IProposedOwnable\\n * @notice Defines a minimal interface for ownership with a two step proposal and acceptance\\n * process\\n */\\ninterface IProposedOwnable {\\n  /**\\n   * @dev This emits when change in ownership of a contract is proposed.\\n   */\\n  event OwnershipProposed(address indexed proposedOwner);\\n\\n  /**\\n   * @dev This emits when ownership of a contract changes.\\n   */\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @notice Get the address of the owner\\n   * @return owner_ The address of the owner.\\n   */\\n  function owner() external view returns (address owner_);\\n\\n  /**\\n   * @notice Get the address of the proposed owner\\n   * @return proposed_ The address of the proposed.\\n   */\\n  function proposed() external view returns (address proposed_);\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   * @param newlyProposed The proposed new owner of the contract\\n   */\\n  function proposeNewOwner(address newlyProposed) external;\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   */\\n  function acceptProposedOwner() external;\\n}\\n\",\"keccak256\":\"0x4ec1aa589d37d0c1eac9966e26d2d3540d1661b81763e678f14d2c6fa0682323\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162002de838038062002de883398101604081905262000035916200036e565b8084878782878784848484846200004c33620001ba565b8463ffffffff16600003620000975760405162461bcd60e51b815260206004820152600c60248201526b32b6b83a3c903237b6b0b4b760a11b60448201526064015b60405180910390fd5b6001600160a01b038216620000e35760405162461bcd60e51b815260206004820152601160248201527032b6b83a3c903937b7ba26b0b730b3b2b960791b60448201526064016200008e565b63ffffffff8086166080526001600160a01b0380851660a05283811660c05290851660e0528116156200011b576200011b816200021f565b604080516001600160a01b0385811682528481166020830152831681830152905163ffffffff86811692908816917f4f9c27c2fe3f84576ea469d367d044da53c45e951617e8389f2b5ed8db9d25f09181900360600190a35050600580546001600160a01b039b8c166001600160a01b031991821617909155600480549a909b1699169890981790985550620003ef9c50505050505050505050505050565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316178155600255600180549091169055565b62000235816200024360201b620009241760201c565b6200024081620002ac565b50565b600354604080516001600160a01b03928316815291831660208301527fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b0316156200031a5760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201526913149150511657d4d15560b21b60648201526084016200008e565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b805163ffffffff811681146200035157600080fd5b919050565b80516001600160a01b03811681146200035157600080fd5b60008060008060008060c087890312156200038857600080fd5b62000393876200033c565b9550620003a3602088016200033c565b9450620003b36040880162000356565b9350620003c36060880162000356565b9250620003d36080880162000356565b9150620003e360a0880162000356565b90509295509295509295565b60805160a05160c05160e0516129a362000445600039600081816101cf0152610fbe0152600081816102f60152818161053a0152610f8f0152600081816104ad01526105ef015260006102a201526129a36000f3fe60806040526004361061016a5760003560e01c8063715018a6116100d1578063cc3942831161008a578063d69f9d6111610064578063d69f9d611461049b578063db1b7659146104cf578063de9b771f146104ef578063f953cec71461050f57600080fd5b8063cc3942831461043e578063d1851c921461045e578063d232c2201461047c57600080fd5b8063715018a6146103965780638da5cb5b146103ab578063972c4928146103c9578063b1f8100d146103e9578063c0857ba014610409578063c5b350df1461042957600080fd5b806352a9674b1161012357806352a9674b146102905780635bd11efc146102c45780635f61e3ec146102e4578063607f2d421461033057806368742da6146103605780636a42b8f81461038057600080fd5b80630e387de61461017657806314168416146101bd578063370dbaf1146102065780633cf52ffb1461024657806348e6fa231461025b5780634ff746f61461027057600080fd5b3661017157005b600080fd5b34801561018257600080fd5b506101aa7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b6040519081526020015b60405180910390f35b3480156101c957600080fd5b506101f17f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016101b4565b34801561021257600080fd5b506102366102213660046123c6565b60086020526000908152604090205460ff1681565b60405190151581526020016101b4565b34801561025257600080fd5b506002546101aa565b61026e6102693660046124a4565b61052f565b005b34801561027c57600080fd5b5061026e61028b366004612508565b6105e4565b34801561029c57600080fd5b506101f17f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d057600080fd5b5061026e6102df366004612552565b61068a565b3480156102f057600080fd5b506103187f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101b4565b34801561033c57600080fd5b5061023661034b3660046123c6565b60076020526000908152604090205460ff1681565b34801561036c57600080fd5b5061026e61037b366004612552565b6106c1565b34801561038c57600080fd5b5062093a806101aa565b3480156103a257600080fd5b5061026e61073e565b3480156103b757600080fd5b506000546001600160a01b0316610318565b3480156103d557600080fd5b50600654610318906001600160a01b031681565b3480156103f557600080fd5b5061026e610404366004612552565b6107f2565b34801561041557600080fd5b50600554610318906001600160a01b031681565b34801561043557600080fd5b5061026e610890565b34801561044a57600080fd5b50600354610318906001600160a01b031681565b34801561046a57600080fd5b506001546001600160a01b0316610318565b34801561048857600080fd5b506000546001600160a01b031615610236565b3480156104a757600080fd5b506103187f000000000000000000000000000000000000000000000000000000000000000081565b3480156104db57600080fd5b506102366104ea366004612552565b610900565b3480156104fb57600080fd5b50600454610318906001600160a01b031681565b34801561051b57600080fd5b5061026e61052a366004612508565b61090a565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461059b5760405162461bcd60e51b815260206004820152600c60248201526b10b937b7ba26b0b730b3b2b960a11b60448201526064015b60405180910390fd5b6105a5828261098d565b7fdcaa37a042a0087de79018c629bbd29cee82ca80bd9be394e1696bf9e93550778282336040516105d8939291906125bf565b60405180910390a15050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106455760405162461bcd60e51b81526004016105929060208082526004908201526310a0a6a160e11b604082015260600190565b61064e816109d4565b7fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced813360405161067f9291906125fd565b60405180910390a150565b6000546001600160a01b031633146106b5576040516311a8a1bb60e31b815260040160405180910390fd5b6106be816109ed565b50565b6000546001600160a01b031633146106ec576040516311a8a1bb60e31b815260040160405180910390fd5b476106f782826109ff565b816001600160a01b03167feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d8260405161073291815260200190565b60405180910390a25050565b6000546001600160a01b03163314610769576040516311a8a1bb60e31b815260040160405180910390fd5b62093a806002544261077b919061263d565b11610799576040516324e0285f60e21b815260040160405180910390fd5b6002546000036107bc57604051630e4b303f60e21b815260040160405180910390fd5b6001546001600160a01b0316156107e6576040516323295ef960e01b815260040160405180910390fd5b6107f06000610b1d565b565b6000546001600160a01b0316331461081d576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b03828116911614801561083b575060025415155b15610859576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b0380831691160361088757604051634a2fb73f60e11b815260040160405180910390fd5b6106be81610b82565b6001546001600160a01b031633146108bb576040516311a7f27160e11b815260040160405180910390fd5b62093a80600254426108cd919061263d565b116108eb576040516324e0285f60e21b815260040160405180910390fd5b6001546107f0906001600160a01b0316610b1d565b6000805b92915050565b600061091582610bd0565b905061092081610eb6565b5050565b600354604080516001600160a01b03928316815291831660208301527fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b8051156109cb5760405162461bcd60e51b815260206004820152600c60248201526b042c8c2e8c240d8cadccee8d60a31b6044820152606401610592565b61092082611073565b6040516316c2fdb560e21b815260040160405180910390fd5b6109f681610924565b6106be816110dc565b80471015610a4f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610592565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610a9c576040519150601f19603f3d011682016040523d82523d6000602084013e610aa1565b606091505b5050905080610b185760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610592565b505050565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316178155600255600180549091169055565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b60606000610bdd8361116a565b90506000610bea826111c9565b90506000610bf7836111f2565b9050600081610c058461121b565b610c0e866113d1565b604051602001610c2093929190612650565b60408051601f1981840301815291815281516020928301206000818152600790935291205490915060ff1615610ca45760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201526314d4d15160e21b6064820152608401610592565b6000818152600760205260408120805460ff19166001179055610cc6856113ed565b90506000610cd382611537565b9050610cde816115c7565b6006546001600160a01b03908116911614610d495760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604482015264155393915360da1b6064820152608401610592565b6000610d54876115f0565b9050610d74610d64846020015190565b87610d6e8a61160c565b84611628565b610dcc5760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201526227a7a360e91b6064820152608401610592565b610dfa85610dd9896118db565b610de28a6118f7565b84610dec8c611913565b610df58d61192f565b61194b565b506000610e0683611a71565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036610e3c610e37836000611aad565b611ae5565b14610e895760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e4154555245006044820152606401610592565b6000610e9484611b5f565b806020019051810190610ea7919061267d565b9b9a5050505050505050505050565b8051602014610ef15760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b6044820152606401610592565b60086000610efe836126f4565b815260208101919091526040016000205460ff1615610f5f5760405162461bcd60e51b815260206004820152601e60248201527f6d65737361676520726f6f7420616c72656164792070726f63657373656400006044820152606401610592565b600160086000610f6e846126f4565b81526020810191909152604001600020805460ff19169115159190911790557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638e7d93fa7f0000000000000000000000000000000000000000000000000000000000000000610fe6846126f4565b6040516001600160e01b031960e085901b16815263ffffffff9290921660048301526024820152604401600060405180830381600087803b15801561102a57600080fd5b505af115801561103e573d6000803e3d6000fd5b505050507fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced813360405161067f9291906125fd565b6004805460065460405163b472047760e01b81526001600160a01b039283169363b4720477936110a7931691869101612718565b600060405180830381600087803b1580156110c157600080fd5b505af11580156110d5573d6000803e3d6000fd5b5050505050565b6006546001600160a01b0316156111485760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201526913149150511657d4d15560b21b6064820152608401610592565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60408051602081019091526060815260006111b46111af8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b611b7b565b60408051602081019091529081529392505050565b606061090482600001516008815181106111e5576111e561273c565b6020026020010151611c87565b6000610904826000015160028151811061120e5761120e61273c565b6020026020010151611ae5565b6040805160208101909152600081528151606091901561090457600080611243600086611d24565b60f81c9050600181148061125a57508060ff166003145b156113025760018551600261126f9190612752565b611279919061263d565b67ffffffffffffffff811115611291576112916123df565b6040519080825280601f01601f1916602001820160405280156112bb576020820181803683370190505b50925060006112cb600187611d24565b905080846000815181106112e1576112e161273c565b60200101906001600160f81b031916908160001a9053506001925050611366565b6002855160026113129190612752565b61131c919061263d565b67ffffffffffffffff811115611334576113346123df565b6040519080825280601f01601f19166020018201604052801561135e576020820181803683370190505b509250600091505b825160ff83165b818110156113c75761139661138560ff86168361263d565b611390906002612769565b88611d24565b8582815181106113a8576113a861273c565b60200101906001600160f81b031916908160001a90535060010161136d565b5050505092915050565b6000610904826000015160098151811061120e5761120e61273c565b61141160405180606001604052806060815260200160608152602001600081525090565b61142b82600001516006815181106111e5576111e561273c565b60208281018290526040805180820182526000808252908301528051808201909152825181529181019082015261146181611da5565b156114765761146f81611b7b565b8252611523565b6020820151805160009061148c9060019061263d565b67ffffffffffffffff8111156114a4576114a46123df565b6040519080825280601f01601f1916602001820160405280156114ce576020820181803683370190505b5090506000808360210191508260200190506114ec82828551611de0565b60408051808201825260008082526020918201528151808301909252845182528085019082015261151c90611b7b565b8652505050505b61152c836113d1565b604083015250919050565b60408051608081018252600091810182815260608083019390935281526020810191909152600061158583600001516003815181106115785761157861273c565b6020026020010151611b7b565b83604001518151811061159a5761159a61273c565b6020026020010151905060405180604001604052808281526020016115be83611b7b565b90529392505050565b600061090482602001516000815181106115e3576115e361273c565b6020026020010151611e79565b6000610904826000015160058151811061120e5761120e61273c565b606061090482600001516007815181106111e5576111e561273c565b60008061165c8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b9050600061166982611b7b565b90506060808560008061167b8b61121b565b905080516000036116965760009750505050505050506118d3565b855160005b818110156118c95782518411156116be57600099505050505050505050506118d3565b6116e08882815181106116d3576116d361273c565b6020026020010151611e93565b96508680519060200120851461170257600099505050505050505050506118d3565b6117178882815181106115785761157861273c565b955085516011036117ec5782518403611778578d80519060200120611748876010815181106111e5576111e561273c565b805190602001200361176657600199505050505050505050506118d3565b600099505050505050505050506118d3565b600083858151811061178c5761178c61273c565b016020015160f81c905060108111156117b25760009a50505050505050505050506118d3565b6117d7878260ff16815181106117ca576117ca61273c565b6020026020010151611f12565b95506117e4600186612769565b9450506118c1565b8551600203611766576000611817611810886000815181106111e5576111e561273c565b8587611f40565b84519091506118268287612769565b0361187b578e80519060200120611849886001815181106111e5576111e561273c565b80519060200120036118685760019a50505050505050505050506118d3565b60009a50505050505050505050506118d3565b806000036118965760009a50505050505050505050506118d3565b6118a08186612769565b94506118b8876001815181106117ca576117ca61273c565b95506118c19050565b60010161169b565b5050505050505050505b949350505050565b6000610904826000015160038151811061120e5761120e61273c565b6000610904826000015160048151811061120e5761120e61273c565b6000610904826000015160008151811061120e5761120e61273c565b606061090482600001516001815181106111e5576111e561273c565b6005546040516320a9cea560e11b8152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a060405180830381865afa15801561199d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c1919061277c565b5093505092509250611a18828b6119d8919061263d565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a09092019092528051910120908588612044565b611a645760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f484541444552000000006044820152606401610592565b9998505050505050505050565b6040805160208101909152606081526040518060200160405280611aa584602001516001815181106115785761157861273c565b905292915050565b60408051808201909152600080825260208201528251805183908110611ad557611ad561273c565b6020026020010151905092915050565b805160009015801590611af9575081516022115b611b0257600080fd5b6000611b1183602001516121b6565b90506000818460000151611b25919061263d565b9050600080838660200151611b3a9190612769565b9050805191506020831015611b5657826020036101000a820491505b50949350505050565b606061090482602001516002815181106111e5576111e561273c565b6060611b8682611da5565b611b8f57600080fd5b6000611b9a8361224a565b905060008167ffffffffffffffff811115611bb757611bb76123df565b604051908082528060200260200182016040528015611bfc57816020015b6040805180820190915260008082526020820152815260200190600190039081611bd55790505b5090506000611c0e85602001516121b6565b8560200151611c1d9190612769565b90506000805b84811015611c7c57611c34836122cf565b9150604051806040016040528083815260200184815250848281518110611c5d57611c5d61273c565b6020908102919091010152611c728284612769565b9250600101611c23565b509195945050505050565b8051606090611c9557600080fd5b6000611ca483602001516121b6565b90506000818460000151611cb8919061263d565b905060008167ffffffffffffffff811115611cd557611cd56123df565b6040519080825280601f01601f191660200182016040528015611cff576020820181803683370190505b5090506000816020019050611b56848760200151611d1d9190612769565b8285612373565b6000611d316002846127df565b15611d6b57601082611d446002866127f3565b81518110611d5457611d5461273c565b0160200151611d66919060f81c612807565b611d9b565b601082611d796002866127f3565b81518110611d8957611d8961273c565b0160200151611d9b919060f81c612829565b60f81b9392505050565b80516000908103611db857506000919050565b6020820151805160001a9060c0821015611dd6575060009392505050565b5060019392505050565b80600003611ded57505050565b611df96001602061284b565b60ff16811115611e335782518252611e12602084612769565b9250611e1f602083612769565b9150611e2c60208261263d565b9050611ded565b80600003611e4057505050565b60006001611e4f83602061263d565b611e5b90610100612948565b611e65919061263d565b935183518516941916939093179091525050565b8051600090601514611e8a57600080fd5b61090482611ae5565b60606000826000015167ffffffffffffffff811115611eb457611eb46123df565b6040519080825280601f01601f191660200182016040528015611ede576020820181803683370190505b5090508051600003611ef05792915050565b6000816020019050611f0b8460200151828660000151612373565b5092915050565b8051600090602114611f2357600080fd5b60008083602001516001611f379190612769565b51949350505050565b60008080611f4d8661121b565b90506000815167ffffffffffffffff811115611f6b57611f6b6123df565b6040519080825280601f01601f191660200182016040528015611f95576020820181803683370190505b5090506000825186611fa79190612769565b9050855b81811015612014576000888281518110611fc757611fc761273c565b01602001516001600160f81b03191690508084611fe48a8561263d565b81518110611ff457611ff461273c565b60200101906001600160f81b031916908160001a90535050600101611fab565b5081805190602001208380519060200120036120335782519350612038565b600093505b50919695505050505050565b60006020825161205491906127df565b156120985760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b6044820152606401610592565b6000602083516120a891906127f3565b90506120b5816002612948565b85106120fb5760405162461bcd60e51b81526020600482015260156024820152744c65616620696e64657820697320746f6f2062696760581b6044820152606401610592565b82516000908790829061210f906001612769565b905060205b818110156121a75786810151935061212d60028a6127df565b600003612165576040805160208101859052908101859052606001604051602081830303815290604052805190602001209250612192565b60408051602081018690529081018490526060016040516020818303038152906040528051906020012092505b61219d60028a6127f3565b9850602001612114565b50509094149695505050505050565b8051600090811a60808110156121cf5750600092915050565b60b88110806121f657506121e5600160c061284b565b60ff16811180156121f6575060f881105b156122045750600192915050565b60c081101561223857612219600160b861284b565b6122269060ff168261263d565b612231906001612769565b9392505050565b612219600160f861284b565b50919050565b8051600090810361225d57506000919050565b60008061226d84602001516121b6565b846020015161227c9190612769565b90506000846000015185602001516122949190612769565b90505b808210156122c6576122a8826122cf565b6122b29083612769565b9150826122be81612954565b935050612297565b50909392505050565b80516000908190811a60808110156122ea5760019150611f0b565b60b8811015612310576122fe60808261263d565b612309906001612769565b9150611f0b565b60c081101561233d5760b78103600185019450806020036101000a85510460018201810193505050611f0b565b60f8811015612351576122fe60c08261263d565b60019390930151602084900360f7016101000a900490920160f5190192915050565b8060000361238057505050565b61238c6001602061284b565b60ff16811115611e3357825182526123a5602084612769565b92506123b2602083612769565b91506123bf60208261263d565b9050612380565b6000602082840312156123d857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561241e5761241e6123df565b604052919050565b600067ffffffffffffffff821115612440576124406123df565b50601f01601f191660200190565b600082601f83011261245f57600080fd5b813561247261246d82612426565b6123f5565b81815284602083860101111561248757600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156124b757600080fd5b823567ffffffffffffffff808211156124cf57600080fd5b6124db8683870161244e565b935060208501359150808211156124f157600080fd5b506124fe8582860161244e565b9150509250929050565b60006020828403121561251a57600080fd5b813567ffffffffffffffff81111561253157600080fd5b6118d38482850161244e565b6001600160a01b03811681146106be57600080fd5b60006020828403121561256457600080fd5b81356122318161253d565b60005b8381101561258a578181015183820152602001612572565b50506000910152565b600081518084526125ab81602086016020860161256f565b601f01601f19169290920160200192915050565b6060815260006125d26060830186612593565b82810360208401526125e48186612593565b91505060018060a01b0383166040830152949350505050565b6040815260006126106040830185612593565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561090457610904612627565b8381526000835161266881602085016020880161256f565b60209201918201929092526040019392505050565b60006020828403121561268f57600080fd5b815167ffffffffffffffff8111156126a657600080fd5b8201601f810184136126b757600080fd5b80516126c561246d82612426565b8181528560208385010111156126da57600080fd5b6126eb82602083016020860161256f565b95945050505050565b805160208083015191908110156122445760001960209190910360031b1b16919050565b6001600160a01b03831681526040602082018190526000906118d390830184612593565b634e487b7160e01b600052603260045260246000fd5b808202811582820484141761090457610904612627565b8082018082111561090457610904612627565b600080600080600060a0868803121561279457600080fd5b8551945060208601519350604086015192506060860151915060808601516127bb8161253d565b809150509295509295909350565b634e487b7160e01b600052601260045260246000fd5b6000826127ee576127ee6127c9565b500690565b600082612802576128026127c9565b500490565b600060ff83168061281a5761281a6127c9565b8060ff84160691505092915050565b600060ff83168061283c5761283c6127c9565b8060ff84160491505092915050565b60ff828116828216039081111561090457610904612627565b600181815b8085111561289f57816000190482111561288557612885612627565b8085161561289257918102915b93841c9390800290612869565b509250929050565b6000826128b657506001610904565b816128c357506000610904565b81600181146128d957600281146128e3576128ff565b6001915050610904565b60ff8411156128f4576128f4612627565b50506001821b610904565b5060208310610133831016604e8410600b8410161715612922575081810a610904565b61292c8383612864565b806000190482111561294057612940612627565b029392505050565b600061223183836128a7565b60006001820161296657612966612627565b506001019056fea26469706673582212208462b9f6d18b7db17756fd533a8816c0d1bc739f64f86a2f968d9c7d8e3168ff64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061016a5760003560e01c8063715018a6116100d1578063cc3942831161008a578063d69f9d6111610064578063d69f9d611461049b578063db1b7659146104cf578063de9b771f146104ef578063f953cec71461050f57600080fd5b8063cc3942831461043e578063d1851c921461045e578063d232c2201461047c57600080fd5b8063715018a6146103965780638da5cb5b146103ab578063972c4928146103c9578063b1f8100d146103e9578063c0857ba014610409578063c5b350df1461042957600080fd5b806352a9674b1161012357806352a9674b146102905780635bd11efc146102c45780635f61e3ec146102e4578063607f2d421461033057806368742da6146103605780636a42b8f81461038057600080fd5b80630e387de61461017657806314168416146101bd578063370dbaf1146102065780633cf52ffb1461024657806348e6fa231461025b5780634ff746f61461027057600080fd5b3661017157005b600080fd5b34801561018257600080fd5b506101aa7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b6040519081526020015b60405180910390f35b3480156101c957600080fd5b506101f17f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016101b4565b34801561021257600080fd5b506102366102213660046123c6565b60086020526000908152604090205460ff1681565b60405190151581526020016101b4565b34801561025257600080fd5b506002546101aa565b61026e6102693660046124a4565b61052f565b005b34801561027c57600080fd5b5061026e61028b366004612508565b6105e4565b34801561029c57600080fd5b506101f17f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d057600080fd5b5061026e6102df366004612552565b61068a565b3480156102f057600080fd5b506103187f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101b4565b34801561033c57600080fd5b5061023661034b3660046123c6565b60076020526000908152604090205460ff1681565b34801561036c57600080fd5b5061026e61037b366004612552565b6106c1565b34801561038c57600080fd5b5062093a806101aa565b3480156103a257600080fd5b5061026e61073e565b3480156103b757600080fd5b506000546001600160a01b0316610318565b3480156103d557600080fd5b50600654610318906001600160a01b031681565b3480156103f557600080fd5b5061026e610404366004612552565b6107f2565b34801561041557600080fd5b50600554610318906001600160a01b031681565b34801561043557600080fd5b5061026e610890565b34801561044a57600080fd5b50600354610318906001600160a01b031681565b34801561046a57600080fd5b506001546001600160a01b0316610318565b34801561048857600080fd5b506000546001600160a01b031615610236565b3480156104a757600080fd5b506103187f000000000000000000000000000000000000000000000000000000000000000081565b3480156104db57600080fd5b506102366104ea366004612552565b610900565b3480156104fb57600080fd5b50600454610318906001600160a01b031681565b34801561051b57600080fd5b5061026e61052a366004612508565b61090a565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461059b5760405162461bcd60e51b815260206004820152600c60248201526b10b937b7ba26b0b730b3b2b960a11b60448201526064015b60405180910390fd5b6105a5828261098d565b7fdcaa37a042a0087de79018c629bbd29cee82ca80bd9be394e1696bf9e93550778282336040516105d8939291906125bf565b60405180910390a15050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106455760405162461bcd60e51b81526004016105929060208082526004908201526310a0a6a160e11b604082015260600190565b61064e816109d4565b7fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced813360405161067f9291906125fd565b60405180910390a150565b6000546001600160a01b031633146106b5576040516311a8a1bb60e31b815260040160405180910390fd5b6106be816109ed565b50565b6000546001600160a01b031633146106ec576040516311a8a1bb60e31b815260040160405180910390fd5b476106f782826109ff565b816001600160a01b03167feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d8260405161073291815260200190565b60405180910390a25050565b6000546001600160a01b03163314610769576040516311a8a1bb60e31b815260040160405180910390fd5b62093a806002544261077b919061263d565b11610799576040516324e0285f60e21b815260040160405180910390fd5b6002546000036107bc57604051630e4b303f60e21b815260040160405180910390fd5b6001546001600160a01b0316156107e6576040516323295ef960e01b815260040160405180910390fd5b6107f06000610b1d565b565b6000546001600160a01b0316331461081d576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b03828116911614801561083b575060025415155b15610859576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b0380831691160361088757604051634a2fb73f60e11b815260040160405180910390fd5b6106be81610b82565b6001546001600160a01b031633146108bb576040516311a7f27160e11b815260040160405180910390fd5b62093a80600254426108cd919061263d565b116108eb576040516324e0285f60e21b815260040160405180910390fd5b6001546107f0906001600160a01b0316610b1d565b6000805b92915050565b600061091582610bd0565b905061092081610eb6565b5050565b600354604080516001600160a01b03928316815291831660208301527fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b8051156109cb5760405162461bcd60e51b815260206004820152600c60248201526b042c8c2e8c240d8cadccee8d60a31b6044820152606401610592565b61092082611073565b6040516316c2fdb560e21b815260040160405180910390fd5b6109f681610924565b6106be816110dc565b80471015610a4f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610592565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610a9c576040519150601f19603f3d011682016040523d82523d6000602084013e610aa1565b606091505b5050905080610b185760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610592565b505050565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316178155600255600180549091169055565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b60606000610bdd8361116a565b90506000610bea826111c9565b90506000610bf7836111f2565b9050600081610c058461121b565b610c0e866113d1565b604051602001610c2093929190612650565b60408051601f1981840301815291815281516020928301206000818152600790935291205490915060ff1615610ca45760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201526314d4d15160e21b6064820152608401610592565b6000818152600760205260408120805460ff19166001179055610cc6856113ed565b90506000610cd382611537565b9050610cde816115c7565b6006546001600160a01b03908116911614610d495760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604482015264155393915360da1b6064820152608401610592565b6000610d54876115f0565b9050610d74610d64846020015190565b87610d6e8a61160c565b84611628565b610dcc5760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201526227a7a360e91b6064820152608401610592565b610dfa85610dd9896118db565b610de28a6118f7565b84610dec8c611913565b610df58d61192f565b61194b565b506000610e0683611a71565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036610e3c610e37836000611aad565b611ae5565b14610e895760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e4154555245006044820152606401610592565b6000610e9484611b5f565b806020019051810190610ea7919061267d565b9b9a5050505050505050505050565b8051602014610ef15760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b6044820152606401610592565b60086000610efe836126f4565b815260208101919091526040016000205460ff1615610f5f5760405162461bcd60e51b815260206004820152601e60248201527f6d65737361676520726f6f7420616c72656164792070726f63657373656400006044820152606401610592565b600160086000610f6e846126f4565b81526020810191909152604001600020805460ff19169115159190911790557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638e7d93fa7f0000000000000000000000000000000000000000000000000000000000000000610fe6846126f4565b6040516001600160e01b031960e085901b16815263ffffffff9290921660048301526024820152604401600060405180830381600087803b15801561102a57600080fd5b505af115801561103e573d6000803e3d6000fd5b505050507fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced813360405161067f9291906125fd565b6004805460065460405163b472047760e01b81526001600160a01b039283169363b4720477936110a7931691869101612718565b600060405180830381600087803b1580156110c157600080fd5b505af11580156110d5573d6000803e3d6000fd5b5050505050565b6006546001600160a01b0316156111485760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201526913149150511657d4d15560b21b6064820152608401610592565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60408051602081019091526060815260006111b46111af8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b611b7b565b60408051602081019091529081529392505050565b606061090482600001516008815181106111e5576111e561273c565b6020026020010151611c87565b6000610904826000015160028151811061120e5761120e61273c565b6020026020010151611ae5565b6040805160208101909152600081528151606091901561090457600080611243600086611d24565b60f81c9050600181148061125a57508060ff166003145b156113025760018551600261126f9190612752565b611279919061263d565b67ffffffffffffffff811115611291576112916123df565b6040519080825280601f01601f1916602001820160405280156112bb576020820181803683370190505b50925060006112cb600187611d24565b905080846000815181106112e1576112e161273c565b60200101906001600160f81b031916908160001a9053506001925050611366565b6002855160026113129190612752565b61131c919061263d565b67ffffffffffffffff811115611334576113346123df565b6040519080825280601f01601f19166020018201604052801561135e576020820181803683370190505b509250600091505b825160ff83165b818110156113c75761139661138560ff86168361263d565b611390906002612769565b88611d24565b8582815181106113a8576113a861273c565b60200101906001600160f81b031916908160001a90535060010161136d565b5050505092915050565b6000610904826000015160098151811061120e5761120e61273c565b61141160405180606001604052806060815260200160608152602001600081525090565b61142b82600001516006815181106111e5576111e561273c565b60208281018290526040805180820182526000808252908301528051808201909152825181529181019082015261146181611da5565b156114765761146f81611b7b565b8252611523565b6020820151805160009061148c9060019061263d565b67ffffffffffffffff8111156114a4576114a46123df565b6040519080825280601f01601f1916602001820160405280156114ce576020820181803683370190505b5090506000808360210191508260200190506114ec82828551611de0565b60408051808201825260008082526020918201528151808301909252845182528085019082015261151c90611b7b565b8652505050505b61152c836113d1565b604083015250919050565b60408051608081018252600091810182815260608083019390935281526020810191909152600061158583600001516003815181106115785761157861273c565b6020026020010151611b7b565b83604001518151811061159a5761159a61273c565b6020026020010151905060405180604001604052808281526020016115be83611b7b565b90529392505050565b600061090482602001516000815181106115e3576115e361273c565b6020026020010151611e79565b6000610904826000015160058151811061120e5761120e61273c565b606061090482600001516007815181106111e5576111e561273c565b60008061165c8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b9050600061166982611b7b565b90506060808560008061167b8b61121b565b905080516000036116965760009750505050505050506118d3565b855160005b818110156118c95782518411156116be57600099505050505050505050506118d3565b6116e08882815181106116d3576116d361273c565b6020026020010151611e93565b96508680519060200120851461170257600099505050505050505050506118d3565b6117178882815181106115785761157861273c565b955085516011036117ec5782518403611778578d80519060200120611748876010815181106111e5576111e561273c565b805190602001200361176657600199505050505050505050506118d3565b600099505050505050505050506118d3565b600083858151811061178c5761178c61273c565b016020015160f81c905060108111156117b25760009a50505050505050505050506118d3565b6117d7878260ff16815181106117ca576117ca61273c565b6020026020010151611f12565b95506117e4600186612769565b9450506118c1565b8551600203611766576000611817611810886000815181106111e5576111e561273c565b8587611f40565b84519091506118268287612769565b0361187b578e80519060200120611849886001815181106111e5576111e561273c565b80519060200120036118685760019a50505050505050505050506118d3565b60009a50505050505050505050506118d3565b806000036118965760009a50505050505050505050506118d3565b6118a08186612769565b94506118b8876001815181106117ca576117ca61273c565b95506118c19050565b60010161169b565b5050505050505050505b949350505050565b6000610904826000015160038151811061120e5761120e61273c565b6000610904826000015160048151811061120e5761120e61273c565b6000610904826000015160008151811061120e5761120e61273c565b606061090482600001516001815181106111e5576111e561273c565b6005546040516320a9cea560e11b8152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a060405180830381865afa15801561199d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c1919061277c565b5093505092509250611a18828b6119d8919061263d565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a09092019092528051910120908588612044565b611a645760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f484541444552000000006044820152606401610592565b9998505050505050505050565b6040805160208101909152606081526040518060200160405280611aa584602001516001815181106115785761157861273c565b905292915050565b60408051808201909152600080825260208201528251805183908110611ad557611ad561273c565b6020026020010151905092915050565b805160009015801590611af9575081516022115b611b0257600080fd5b6000611b1183602001516121b6565b90506000818460000151611b25919061263d565b9050600080838660200151611b3a9190612769565b9050805191506020831015611b5657826020036101000a820491505b50949350505050565b606061090482602001516002815181106111e5576111e561273c565b6060611b8682611da5565b611b8f57600080fd5b6000611b9a8361224a565b905060008167ffffffffffffffff811115611bb757611bb76123df565b604051908082528060200260200182016040528015611bfc57816020015b6040805180820190915260008082526020820152815260200190600190039081611bd55790505b5090506000611c0e85602001516121b6565b8560200151611c1d9190612769565b90506000805b84811015611c7c57611c34836122cf565b9150604051806040016040528083815260200184815250848281518110611c5d57611c5d61273c565b6020908102919091010152611c728284612769565b9250600101611c23565b509195945050505050565b8051606090611c9557600080fd5b6000611ca483602001516121b6565b90506000818460000151611cb8919061263d565b905060008167ffffffffffffffff811115611cd557611cd56123df565b6040519080825280601f01601f191660200182016040528015611cff576020820181803683370190505b5090506000816020019050611b56848760200151611d1d9190612769565b8285612373565b6000611d316002846127df565b15611d6b57601082611d446002866127f3565b81518110611d5457611d5461273c565b0160200151611d66919060f81c612807565b611d9b565b601082611d796002866127f3565b81518110611d8957611d8961273c565b0160200151611d9b919060f81c612829565b60f81b9392505050565b80516000908103611db857506000919050565b6020820151805160001a9060c0821015611dd6575060009392505050565b5060019392505050565b80600003611ded57505050565b611df96001602061284b565b60ff16811115611e335782518252611e12602084612769565b9250611e1f602083612769565b9150611e2c60208261263d565b9050611ded565b80600003611e4057505050565b60006001611e4f83602061263d565b611e5b90610100612948565b611e65919061263d565b935183518516941916939093179091525050565b8051600090601514611e8a57600080fd5b61090482611ae5565b60606000826000015167ffffffffffffffff811115611eb457611eb46123df565b6040519080825280601f01601f191660200182016040528015611ede576020820181803683370190505b5090508051600003611ef05792915050565b6000816020019050611f0b8460200151828660000151612373565b5092915050565b8051600090602114611f2357600080fd5b60008083602001516001611f379190612769565b51949350505050565b60008080611f4d8661121b565b90506000815167ffffffffffffffff811115611f6b57611f6b6123df565b6040519080825280601f01601f191660200182016040528015611f95576020820181803683370190505b5090506000825186611fa79190612769565b9050855b81811015612014576000888281518110611fc757611fc761273c565b01602001516001600160f81b03191690508084611fe48a8561263d565b81518110611ff457611ff461273c565b60200101906001600160f81b031916908160001a90535050600101611fab565b5081805190602001208380519060200120036120335782519350612038565b600093505b50919695505050505050565b60006020825161205491906127df565b156120985760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b6044820152606401610592565b6000602083516120a891906127f3565b90506120b5816002612948565b85106120fb5760405162461bcd60e51b81526020600482015260156024820152744c65616620696e64657820697320746f6f2062696760581b6044820152606401610592565b82516000908790829061210f906001612769565b905060205b818110156121a75786810151935061212d60028a6127df565b600003612165576040805160208101859052908101859052606001604051602081830303815290604052805190602001209250612192565b60408051602081018690529081018490526060016040516020818303038152906040528051906020012092505b61219d60028a6127f3565b9850602001612114565b50509094149695505050505050565b8051600090811a60808110156121cf5750600092915050565b60b88110806121f657506121e5600160c061284b565b60ff16811180156121f6575060f881105b156122045750600192915050565b60c081101561223857612219600160b861284b565b6122269060ff168261263d565b612231906001612769565b9392505050565b612219600160f861284b565b50919050565b8051600090810361225d57506000919050565b60008061226d84602001516121b6565b846020015161227c9190612769565b90506000846000015185602001516122949190612769565b90505b808210156122c6576122a8826122cf565b6122b29083612769565b9150826122be81612954565b935050612297565b50909392505050565b80516000908190811a60808110156122ea5760019150611f0b565b60b8811015612310576122fe60808261263d565b612309906001612769565b9150611f0b565b60c081101561233d5760b78103600185019450806020036101000a85510460018201810193505050611f0b565b60f8811015612351576122fe60c08261263d565b60019390930151602084900360f7016101000a900490920160f5190192915050565b8060000361238057505050565b61238c6001602061284b565b60ff16811115611e3357825182526123a5602084612769565b92506123b2602083612769565b91506123bf60208261263d565b9050612380565b6000602082840312156123d857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561241e5761241e6123df565b604052919050565b600067ffffffffffffffff821115612440576124406123df565b50601f01601f191660200190565b600082601f83011261245f57600080fd5b813561247261246d82612426565b6123f5565b81815284602083860101111561248757600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156124b757600080fd5b823567ffffffffffffffff808211156124cf57600080fd5b6124db8683870161244e565b935060208501359150808211156124f157600080fd5b506124fe8582860161244e565b9150509250929050565b60006020828403121561251a57600080fd5b813567ffffffffffffffff81111561253157600080fd5b6118d38482850161244e565b6001600160a01b03811681146106be57600080fd5b60006020828403121561256457600080fd5b81356122318161253d565b60005b8381101561258a578181015183820152602001612572565b50506000910152565b600081518084526125ab81602086016020860161256f565b601f01601f19169290920160200192915050565b6060815260006125d26060830186612593565b82810360208401526125e48186612593565b91505060018060a01b0383166040830152949350505050565b6040815260006126106040830185612593565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561090457610904612627565b8381526000835161266881602085016020880161256f565b60209201918201929092526040019392505050565b60006020828403121561268f57600080fd5b815167ffffffffffffffff8111156126a657600080fd5b8201601f810184136126b757600080fd5b80516126c561246d82612426565b8181528560208385010111156126da57600080fd5b6126eb82602083016020860161256f565b95945050505050565b805160208083015191908110156122445760001960209190910360031b1b16919050565b6001600160a01b03831681526040602082018190526000906118d390830184612593565b634e487b7160e01b600052603260045260246000fd5b808202811582820484141761090457610904612627565b8082018082111561090457610904612627565b600080600080600060a0868803121561279457600080fd5b8551945060208601519350604086015192506060860151915060808601516127bb8161253d565b809150509295509295909350565b634e487b7160e01b600052601260045260246000fd5b6000826127ee576127ee6127c9565b500690565b600082612802576128026127c9565b500490565b600060ff83168061281a5761281a6127c9565b8060ff84160691505092915050565b600060ff83168061283c5761283c6127c9565b8060ff84160491505092915050565b60ff828116828216039081111561090457610904612627565b600181815b8085111561289f57816000190482111561288557612885612627565b8085161561289257918102915b93841c9390800290612869565b509250929050565b6000826128b657506001610904565b816128c357506000610904565b81600181146128d957600281146128e3576128ff565b6001915050610904565b60ff8411156128f4576128f4612627565b50506001821b610904565b5060208310610133831016604e8410600b8410161715612922575081810a610904565b61292c8383612864565b806000190482111561294057612940612627565b029392505050565b600061223183836128a7565b60006001820161296657612966612627565b506001019056fea26469706673582212208462b9f6d18b7db17756fd533a8816c0d1bc739f64f86a2f968d9c7d8e3168ff64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "processMessage(bytes)": {
        "details": "This is called by AMBs to process messages originating from mirror connector"
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "sendMessage(bytes,bytes)": {
        "details": "This is called by the root manager *only* on mainnet to propagate the aggregate root"
      },
      "withdrawFunds(address)": {
        "details": "Withdraws the entire balance of the contract.",
        "params": {
          "_to": "The recipient of the funds withdrawn"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "FundsWithdrawn(address,uint256)": {
        "notice": "Emitted when funds are withdrawn by the admin"
      },
      "MessageProcessed(bytes,address)": {
        "notice": "Emitted whenever a message is successfully received over an AMB"
      },
      "MessageSent(bytes,bytes,address)": {
        "notice": "Emitted whenever a message is successfully sent over an AMB"
      }
    },
    "kind": "user",
    "methods": {
      "AMB()": {
        "notice": "Address of the AMB on this domain."
      },
      "DOMAIN()": {
        "notice": "The domain of this Messaging (i.e. Connector) contract."
      },
      "MIRROR_DOMAIN()": {
        "notice": "The domain of the corresponding messaging (i.e. Connector) contract."
      },
      "ROOT_MANAGER()": {
        "notice": "RootManager contract address."
      },
      "acceptProposedOwner()": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "delay()": {
        "notice": "Returns the delay period before a new owner can be accepted."
      },
      "mirrorConnector()": {
        "notice": "Connector on L2 for L1 connectors, and vice versa."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "processMessage(bytes)": {
        "notice": "Processes a message received by an AMB"
      },
      "processedMessageRoots(bytes32)": {
        "notice": "This mapping records all message roots that have already been processed in order to prevent redundant message roots from being aggregated."
      },
      "proposeNewOwner(address)": {
        "notice": "Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process"
      },
      "proposed()": {
        "notice": "Returns the address of the proposed owner."
      },
      "proposedTimestamp()": {
        "notice": "Returns the address of the proposed owner."
      },
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      },
      "renounceOwnership()": {
        "notice": "Renounces ownership of the contract after a delay"
      },
      "renounced()": {
        "notice": "Indicates if the ownership has been renounced() by checking if current owner is address(0)"
      },
      "sendMessage(bytes,bytes)": {
        "notice": "Sends a message over the amb"
      },
      "setMirrorConnector(address)": {
        "notice": "Sets the address of the l2Connector for this domain"
      },
      "verifySender(address)": {
        "notice": "Checks the cross domain sender for a given address"
      },
      "withdrawFunds(address)": {
        "notice": "This function should be callable by owner, and send funds trapped on a connector to the provided recipient."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 46313,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 46315,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "_proposed",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 46317,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "_proposedOwnershipTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 34491,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "mirrorConnector",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 41841,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "fxRoot",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IFxStateSender)41791"
      },
      {
        "astId": 41844,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ICheckpointManager)41809"
      },
      {
        "astId": 41846,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 41850,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "processedExits",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 39460,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "processedMessageRoots",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)41809": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)41791": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}