/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type TransferInfoStruct = {
  originDomain: PromiseOrValue<BigNumberish>;
  destinationDomain: PromiseOrValue<BigNumberish>;
  canonicalDomain: PromiseOrValue<BigNumberish>;
  to: PromiseOrValue<string>;
  delegate: PromiseOrValue<string>;
  receiveLocal: PromiseOrValue<boolean>;
  callData: PromiseOrValue<BytesLike>;
  slippage: PromiseOrValue<BigNumberish>;
  originSender: PromiseOrValue<string>;
  bridgedAmt: PromiseOrValue<BigNumberish>;
  normalizedIn: PromiseOrValue<BigNumberish>;
  nonce: PromiseOrValue<BigNumberish>;
  canonicalId: PromiseOrValue<BytesLike>;
};

export type TransferInfoStructOutput = [
  number,
  number,
  number,
  string,
  string,
  boolean,
  string,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  originDomain: number;
  destinationDomain: number;
  canonicalDomain: number;
  to: string;
  delegate: string;
  receiveLocal: boolean;
  callData: string;
  slippage: BigNumber;
  originSender: string;
  bridgedAmt: BigNumber;
  normalizedIn: BigNumber;
  nonce: BigNumber;
  canonicalId: string;
};

export interface CreditsManagerInterface extends utils.Interface {
  functions: {
    "delay()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "delay"): FunctionFragment;

  encodeFunctionData(functionFragment: "delay", values?: undefined): string;

  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;

  events: {
    "XCalled(bytes32,uint256,bytes32,tuple,address,uint256,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "XCalled"): EventFragment;
}

export interface XCalledEventObject {
  transferId: string;
  nonce: BigNumber;
  messageHash: string;
  params: TransferInfoStructOutput;
  asset: string;
  amount: BigNumber;
  local: string;
  messageBody: string;
}
export type XCalledEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    TransferInfoStructOutput,
    string,
    BigNumber,
    string,
    string
  ],
  XCalledEventObject
>;

export type XCalledEventFilter = TypedEventFilter<XCalledEvent>;

export interface CreditsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CreditsManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    delay(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    delay(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "XCalled(bytes32,uint256,bytes32,tuple,address,uint256,address,bytes)"(
      transferId?: PromiseOrValue<BytesLike> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      messageHash?: PromiseOrValue<BytesLike> | null,
      params?: null,
      asset?: null,
      amount?: null,
      local?: null,
      messageBody?: null
    ): XCalledEventFilter;
    XCalled(
      transferId?: PromiseOrValue<BytesLike> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      messageHash?: PromiseOrValue<BytesLike> | null,
      params?: null,
      asset?: null,
      amount?: null,
      local?: null,
      messageBody?: null
    ): XCalledEventFilter;
  };

  estimateGas: {
    delay(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
