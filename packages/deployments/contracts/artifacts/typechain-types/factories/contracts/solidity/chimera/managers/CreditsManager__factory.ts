/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  CreditsManager,
  CreditsManagerInterface,
} from "../../../../../contracts/solidity/chimera/managers/CreditsManager";

const _abi = [
  {
    inputs: [],
    name: "BaseManager__delayElapsed_delayNotElapsed",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseManager__getConfig_notRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseManager__handleIncomingAsset_feeOnTransferNotSupported",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseManager__handleIncomingAsset_nativeAssetNotSupported",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseManager__handleOutgoingAsset_notNative",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseManager__nonReentrant_reentrantCall",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseManager__nonXCallReentrant_reentrantCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "enum Role",
        name: "_role",
        type: "uint8",
      },
    ],
    name: "BaseManager__onlyOwnerOrRole_notOwnerOrRole",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseManager__onlyOwner_notOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseManager__whenNotPaused_paused",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "transferId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "messageHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "originDomain",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "destinationDomain",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "canonicalDomain",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "address",
            name: "delegate",
            type: "address",
          },
          {
            internalType: "bool",
            name: "receiveLocal",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "slippage",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "originSender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "bridgedAmt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "normalizedIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "canonicalId",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct TransferInfo",
        name: "params",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "local",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "messageBody",
        type: "bytes",
      },
    ],
    name: "XCalled",
    type: "event",
  },
  {
    inputs: [],
    name: "delay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50607880601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636a42b8f814602d575b600080fd5b60015460405190815260200160405180910390f3fea2646970667358221220e78c0f35eb25694d41c610b37d192f87c4a176f878627acee700d466b1c6828c64736f6c63430008110033";

type CreditsManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CreditsManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CreditsManager__factory extends ContractFactory {
  constructor(...args: CreditsManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CreditsManager> {
    return super.deploy(overrides || {}) as Promise<CreditsManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CreditsManager {
    return super.attach(address) as CreditsManager;
  }
  override connect(signer: Signer): CreditsManager__factory {
    return super.connect(signer) as CreditsManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CreditsManagerInterface {
    return new utils.Interface(_abi) as CreditsManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CreditsManager {
    return new Contract(address, _abi, signerOrProvider) as CreditsManager;
  }
}
