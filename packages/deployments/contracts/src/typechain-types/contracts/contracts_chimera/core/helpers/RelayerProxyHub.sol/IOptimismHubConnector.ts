/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace Types {
  export type WithdrawalTransactionStruct = {
    nonce: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<string>;
    target: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    gasLimit: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type WithdrawalTransactionStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    nonce: BigNumber;
    sender: string;
    target: string;
    value: BigNumber;
    gasLimit: BigNumber;
    data: string;
  };

  export type OutputRootProofStruct = {
    version: PromiseOrValue<BytesLike>;
    stateRoot: PromiseOrValue<BytesLike>;
    messagePasserStorageRoot: PromiseOrValue<BytesLike>;
    latestBlockhash: PromiseOrValue<BytesLike>;
  };

  export type OutputRootProofStructOutput = [string, string, string, string] & {
    version: string;
    stateRoot: string;
    messagePasserStorageRoot: string;
    latestBlockhash: string;
  };
}

export interface IOptimismHubConnectorInterface extends utils.Interface {
  functions: {
    "processMessageFromRoot((uint256,address,address,uint256,uint256,bytes),uint256,(bytes32,bytes32,bytes32,bytes32),bytes[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "processMessageFromRoot"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "processMessageFromRoot",
    values: [
      Types.WithdrawalTransactionStruct,
      PromiseOrValue<BigNumberish>,
      Types.OutputRootProofStruct,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "processMessageFromRoot",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IOptimismHubConnector extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOptimismHubConnectorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    processMessageFromRoot(
      _tx: Types.WithdrawalTransactionStruct,
      _l2OutputIndex: PromiseOrValue<BigNumberish>,
      _outputRootProof: Types.OutputRootProofStruct,
      _withdrawalProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  processMessageFromRoot(
    _tx: Types.WithdrawalTransactionStruct,
    _l2OutputIndex: PromiseOrValue<BigNumberish>,
    _outputRootProof: Types.OutputRootProofStruct,
    _withdrawalProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    processMessageFromRoot(
      _tx: Types.WithdrawalTransactionStruct,
      _l2OutputIndex: PromiseOrValue<BigNumberish>,
      _outputRootProof: Types.OutputRootProofStruct,
      _withdrawalProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    processMessageFromRoot(
      _tx: Types.WithdrawalTransactionStruct,
      _l2OutputIndex: PromiseOrValue<BigNumberish>,
      _outputRootProof: Types.OutputRootProofStruct,
      _withdrawalProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    processMessageFromRoot(
      _tx: Types.WithdrawalTransactionStruct,
      _l2OutputIndex: PromiseOrValue<BigNumberish>,
      _outputRootProof: Types.OutputRootProofStruct,
      _withdrawalProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
