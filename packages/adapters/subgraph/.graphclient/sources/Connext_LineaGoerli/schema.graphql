schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type lineagoerli_AggregateRoot {
  id: ID!
  root: lineagoerli_Bytes!
  blockNumber: BigInt!
}

input lineagoerli_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: lineagoerli_Bytes
  root_not: lineagoerli_Bytes
  root_in: [lineagoerli_Bytes!]
  root_not_in: [lineagoerli_Bytes!]
  root_contains: lineagoerli_Bytes
  root_not_contains: lineagoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type lineagoerli_Asset {
  id: ID!
  key: lineagoerli_Bytes
  decimal: BigInt
  canonicalId: lineagoerli_Bytes
  canonicalDomain: BigInt
  adoptedAsset: lineagoerli_Bytes
  localAsset: lineagoerli_Bytes
  blockNumber: BigInt
  status: lineagoerli_AssetStatus
}

type lineagoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  locked: BigInt!
  supplied: BigInt!
  removed: BigInt!
  router: lineagoerli_Router!
  asset: lineagoerli_Asset!
  feesEarned: BigInt!
}

input lineagoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  locked: BigInt
  locked_not: BigInt
  locked_gt: BigInt
  locked_lt: BigInt
  locked_gte: BigInt
  locked_lte: BigInt
  locked_in: [BigInt!]
  locked_not_in: [BigInt!]
  supplied: BigInt
  supplied_not: BigInt
  supplied_gt: BigInt
  supplied_lt: BigInt
  supplied_gte: BigInt
  supplied_lte: BigInt
  supplied_in: [BigInt!]
  supplied_not_in: [BigInt!]
  removed: BigInt
  removed_not: BigInt
  removed_gt: BigInt
  removed_lt: BigInt
  removed_gte: BigInt
  removed_lte: BigInt
  removed_in: [BigInt!]
  removed_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: lineagoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: lineagoerli_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_AssetBalance_orderBy {
  id
  amount
  locked
  supplied
  removed
  router
  asset
  feesEarned
}

type lineagoerli_AssetStatus {
  id: ID!
  status: Boolean
}

input lineagoerli_AssetStatus_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  status: Boolean
  status_not: Boolean
  status_in: [Boolean!]
  status_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_AssetStatus_orderBy {
  id
  status
}

input lineagoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: lineagoerli_Bytes
  key_not: lineagoerli_Bytes
  key_in: [lineagoerli_Bytes!]
  key_not_in: [lineagoerli_Bytes!]
  key_contains: lineagoerli_Bytes
  key_not_contains: lineagoerli_Bytes
  decimal: BigInt
  decimal_not: BigInt
  decimal_gt: BigInt
  decimal_lt: BigInt
  decimal_gte: BigInt
  decimal_lte: BigInt
  decimal_in: [BigInt!]
  decimal_not_in: [BigInt!]
  canonicalId: lineagoerli_Bytes
  canonicalId_not: lineagoerli_Bytes
  canonicalId_in: [lineagoerli_Bytes!]
  canonicalId_not_in: [lineagoerli_Bytes!]
  canonicalId_contains: lineagoerli_Bytes
  canonicalId_not_contains: lineagoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: lineagoerli_Bytes
  adoptedAsset_not: lineagoerli_Bytes
  adoptedAsset_in: [lineagoerli_Bytes!]
  adoptedAsset_not_in: [lineagoerli_Bytes!]
  adoptedAsset_contains: lineagoerli_Bytes
  adoptedAsset_not_contains: lineagoerli_Bytes
  localAsset: lineagoerli_Bytes
  localAsset_not: lineagoerli_Bytes
  localAsset_in: [lineagoerli_Bytes!]
  localAsset_not_in: [lineagoerli_Bytes!]
  localAsset_contains: lineagoerli_Bytes
  localAsset_not_contains: lineagoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  status_: lineagoerli_AssetStatus_filter
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_Asset_orderBy {
  id
  key
  decimal
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
  status
}

scalar lineagoerli_BigDecimal

scalar BigInt

input lineagoerli_BlockChangedFilter {
  number_gte: Int!
}

input lineagoerli_Block_height {
  hash: lineagoerli_Bytes
  number: Int
  number_gte: Int
}

scalar lineagoerli_Bytes

type lineagoerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: lineagoerli_Bytes
  rootManager: lineagoerli_Bytes
  mirrorConnector: lineagoerli_Bytes
}

input lineagoerli_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: lineagoerli_Bytes
  amb_not: lineagoerli_Bytes
  amb_in: [lineagoerli_Bytes!]
  amb_not_in: [lineagoerli_Bytes!]
  amb_contains: lineagoerli_Bytes
  amb_not_contains: lineagoerli_Bytes
  rootManager: lineagoerli_Bytes
  rootManager_not: lineagoerli_Bytes
  rootManager_in: [lineagoerli_Bytes!]
  rootManager_not_in: [lineagoerli_Bytes!]
  rootManager_contains: lineagoerli_Bytes
  rootManager_not_contains: lineagoerli_Bytes
  mirrorConnector: lineagoerli_Bytes
  mirrorConnector_not: lineagoerli_Bytes
  mirrorConnector_in: [lineagoerli_Bytes!]
  mirrorConnector_not_in: [lineagoerli_Bytes!]
  mirrorConnector_contains: lineagoerli_Bytes
  mirrorConnector_not_contains: lineagoerli_Bytes
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type lineagoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: lineagoerli_Bytes
  nonce: BigInt
  status: lineagoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: lineagoerli_Router_orderBy, orderDirection: lineagoerli_OrderDirection, where: lineagoerli_Router_filter): [lineagoerli_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: lineagoerli_Bytes
  delegate: lineagoerli_Bytes
  receiveLocal: Boolean
  callData: lineagoerli_Bytes
  slippage: BigInt
  bumpSlippageCount: BigInt
  originSender: lineagoerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: lineagoerli_Bytes
  asset: lineagoerli_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: lineagoerli_Bytes
  executedTransactionHash: lineagoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: lineagoerli_Bytes
  executedTxNonce: BigInt
  reconciledCaller: lineagoerli_Bytes
  reconciledTransactionHash: lineagoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: lineagoerli_Bytes
  reconciledTxNonce: BigInt
}

input lineagoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: lineagoerli_Bytes
  transferId_not: lineagoerli_Bytes
  transferId_in: [lineagoerli_Bytes!]
  transferId_not_in: [lineagoerli_Bytes!]
  transferId_contains: lineagoerli_Bytes
  transferId_not_contains: lineagoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: lineagoerli_TransferStatus
  status_not: lineagoerli_TransferStatus
  status_in: [lineagoerli_TransferStatus!]
  status_not_in: [lineagoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: lineagoerli_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: lineagoerli_Bytes
  to_not: lineagoerli_Bytes
  to_in: [lineagoerli_Bytes!]
  to_not_in: [lineagoerli_Bytes!]
  to_contains: lineagoerli_Bytes
  to_not_contains: lineagoerli_Bytes
  delegate: lineagoerli_Bytes
  delegate_not: lineagoerli_Bytes
  delegate_in: [lineagoerli_Bytes!]
  delegate_not_in: [lineagoerli_Bytes!]
  delegate_contains: lineagoerli_Bytes
  delegate_not_contains: lineagoerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: lineagoerli_Bytes
  callData_not: lineagoerli_Bytes
  callData_in: [lineagoerli_Bytes!]
  callData_not_in: [lineagoerli_Bytes!]
  callData_contains: lineagoerli_Bytes
  callData_not_contains: lineagoerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  bumpSlippageCount: BigInt
  bumpSlippageCount_not: BigInt
  bumpSlippageCount_gt: BigInt
  bumpSlippageCount_lt: BigInt
  bumpSlippageCount_gte: BigInt
  bumpSlippageCount_lte: BigInt
  bumpSlippageCount_in: [BigInt!]
  bumpSlippageCount_not_in: [BigInt!]
  originSender: lineagoerli_Bytes
  originSender_not: lineagoerli_Bytes
  originSender_in: [lineagoerli_Bytes!]
  originSender_not_in: [lineagoerli_Bytes!]
  originSender_contains: lineagoerli_Bytes
  originSender_not_contains: lineagoerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: lineagoerli_Bytes
  canonicalId_not: lineagoerli_Bytes
  canonicalId_in: [lineagoerli_Bytes!]
  canonicalId_not_in: [lineagoerli_Bytes!]
  canonicalId_contains: lineagoerli_Bytes
  canonicalId_not_contains: lineagoerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: lineagoerli_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: lineagoerli_Bytes
  executedCaller_not: lineagoerli_Bytes
  executedCaller_in: [lineagoerli_Bytes!]
  executedCaller_not_in: [lineagoerli_Bytes!]
  executedCaller_contains: lineagoerli_Bytes
  executedCaller_not_contains: lineagoerli_Bytes
  executedTransactionHash: lineagoerli_Bytes
  executedTransactionHash_not: lineagoerli_Bytes
  executedTransactionHash_in: [lineagoerli_Bytes!]
  executedTransactionHash_not_in: [lineagoerli_Bytes!]
  executedTransactionHash_contains: lineagoerli_Bytes
  executedTransactionHash_not_contains: lineagoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: lineagoerli_Bytes
  executedTxOrigin_not: lineagoerli_Bytes
  executedTxOrigin_in: [lineagoerli_Bytes!]
  executedTxOrigin_not_in: [lineagoerli_Bytes!]
  executedTxOrigin_contains: lineagoerli_Bytes
  executedTxOrigin_not_contains: lineagoerli_Bytes
  executedTxNonce: BigInt
  executedTxNonce_not: BigInt
  executedTxNonce_gt: BigInt
  executedTxNonce_lt: BigInt
  executedTxNonce_gte: BigInt
  executedTxNonce_lte: BigInt
  executedTxNonce_in: [BigInt!]
  executedTxNonce_not_in: [BigInt!]
  reconciledCaller: lineagoerli_Bytes
  reconciledCaller_not: lineagoerli_Bytes
  reconciledCaller_in: [lineagoerli_Bytes!]
  reconciledCaller_not_in: [lineagoerli_Bytes!]
  reconciledCaller_contains: lineagoerli_Bytes
  reconciledCaller_not_contains: lineagoerli_Bytes
  reconciledTransactionHash: lineagoerli_Bytes
  reconciledTransactionHash_not: lineagoerli_Bytes
  reconciledTransactionHash_in: [lineagoerli_Bytes!]
  reconciledTransactionHash_not_in: [lineagoerli_Bytes!]
  reconciledTransactionHash_contains: lineagoerli_Bytes
  reconciledTransactionHash_not_contains: lineagoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: lineagoerli_Bytes
  reconciledTxOrigin_not: lineagoerli_Bytes
  reconciledTxOrigin_in: [lineagoerli_Bytes!]
  reconciledTxOrigin_not_in: [lineagoerli_Bytes!]
  reconciledTxOrigin_contains: lineagoerli_Bytes
  reconciledTxOrigin_not_contains: lineagoerli_Bytes
  reconciledTxNonce: BigInt
  reconciledTxNonce_not: BigInt
  reconciledTxNonce_gt: BigInt
  reconciledTxNonce_lt: BigInt
  reconciledTxNonce_gte: BigInt
  reconciledTxNonce_lte: BigInt
  reconciledTxNonce_in: [BigInt!]
  reconciledTxNonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  bumpSlippageCount
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  executedTxNonce
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
  reconciledTxNonce
}

"""Defines the order direction, either ascending or descending"""
enum lineagoerli_OrderDirection {
  asc
  desc
}

type lineagoerli_OriginMessage {
  id: ID!
  transferId: lineagoerli_Bytes
  destinationDomain: BigInt
  leaf: lineagoerli_Bytes
  index: BigInt
  message: lineagoerli_Bytes
  root: lineagoerli_Bytes
  transactionHash: lineagoerli_Bytes
  blockNumber: BigInt
  rootCount: lineagoerli_RootCount
}

input lineagoerli_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: lineagoerli_Bytes
  transferId_not: lineagoerli_Bytes
  transferId_in: [lineagoerli_Bytes!]
  transferId_not_in: [lineagoerli_Bytes!]
  transferId_contains: lineagoerli_Bytes
  transferId_not_contains: lineagoerli_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: lineagoerli_Bytes
  leaf_not: lineagoerli_Bytes
  leaf_in: [lineagoerli_Bytes!]
  leaf_not_in: [lineagoerli_Bytes!]
  leaf_contains: lineagoerli_Bytes
  leaf_not_contains: lineagoerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: lineagoerli_Bytes
  message_not: lineagoerli_Bytes
  message_in: [lineagoerli_Bytes!]
  message_not_in: [lineagoerli_Bytes!]
  message_contains: lineagoerli_Bytes
  message_not_contains: lineagoerli_Bytes
  root: lineagoerli_Bytes
  root_not: lineagoerli_Bytes
  root_in: [lineagoerli_Bytes!]
  root_not_in: [lineagoerli_Bytes!]
  root_contains: lineagoerli_Bytes
  root_not_contains: lineagoerli_Bytes
  transactionHash: lineagoerli_Bytes
  transactionHash_not: lineagoerli_Bytes
  transactionHash_in: [lineagoerli_Bytes!]
  transactionHash_not_in: [lineagoerli_Bytes!]
  transactionHash_contains: lineagoerli_Bytes
  transactionHash_not_contains: lineagoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: lineagoerli_RootCount_filter
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type lineagoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: lineagoerli_Bytes
  nonce: BigInt
  status: lineagoerli_TransferStatus
  messageHash: lineagoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: lineagoerli_Bytes
  delegate: lineagoerli_Bytes
  receiveLocal: Boolean
  callData: lineagoerli_Bytes
  slippage: BigInt
  originSender: lineagoerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: lineagoerli_Bytes
  asset: lineagoerli_Asset
  transactingAsset: lineagoerli_Bytes
  message: lineagoerli_OriginMessage
  bumpRelayerFeeCount: BigInt
  relayerFees(skip: Int = 0, first: Int = 100, orderBy: lineagoerli_RelayerFee_orderBy, orderDirection: lineagoerli_OrderDirection, where: lineagoerli_RelayerFee_filter): [lineagoerli_RelayerFee!]
  initialRelayerFeeAsset: lineagoerli_Bytes
  caller: lineagoerli_Bytes
  transactionHash: lineagoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: lineagoerli_Bytes
  txNonce: BigInt
}

input lineagoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: lineagoerli_Bytes
  transferId_not: lineagoerli_Bytes
  transferId_in: [lineagoerli_Bytes!]
  transferId_not_in: [lineagoerli_Bytes!]
  transferId_contains: lineagoerli_Bytes
  transferId_not_contains: lineagoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: lineagoerli_TransferStatus
  status_not: lineagoerli_TransferStatus
  status_in: [lineagoerli_TransferStatus!]
  status_not_in: [lineagoerli_TransferStatus!]
  messageHash: lineagoerli_Bytes
  messageHash_not: lineagoerli_Bytes
  messageHash_in: [lineagoerli_Bytes!]
  messageHash_not_in: [lineagoerli_Bytes!]
  messageHash_contains: lineagoerli_Bytes
  messageHash_not_contains: lineagoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: lineagoerli_Bytes
  to_not: lineagoerli_Bytes
  to_in: [lineagoerli_Bytes!]
  to_not_in: [lineagoerli_Bytes!]
  to_contains: lineagoerli_Bytes
  to_not_contains: lineagoerli_Bytes
  delegate: lineagoerli_Bytes
  delegate_not: lineagoerli_Bytes
  delegate_in: [lineagoerli_Bytes!]
  delegate_not_in: [lineagoerli_Bytes!]
  delegate_contains: lineagoerli_Bytes
  delegate_not_contains: lineagoerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: lineagoerli_Bytes
  callData_not: lineagoerli_Bytes
  callData_in: [lineagoerli_Bytes!]
  callData_not_in: [lineagoerli_Bytes!]
  callData_contains: lineagoerli_Bytes
  callData_not_contains: lineagoerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: lineagoerli_Bytes
  originSender_not: lineagoerli_Bytes
  originSender_in: [lineagoerli_Bytes!]
  originSender_not_in: [lineagoerli_Bytes!]
  originSender_contains: lineagoerli_Bytes
  originSender_not_contains: lineagoerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: lineagoerli_Bytes
  canonicalId_not: lineagoerli_Bytes
  canonicalId_in: [lineagoerli_Bytes!]
  canonicalId_not_in: [lineagoerli_Bytes!]
  canonicalId_contains: lineagoerli_Bytes
  canonicalId_not_contains: lineagoerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: lineagoerli_Asset_filter
  transactingAsset: lineagoerli_Bytes
  transactingAsset_not: lineagoerli_Bytes
  transactingAsset_in: [lineagoerli_Bytes!]
  transactingAsset_not_in: [lineagoerli_Bytes!]
  transactingAsset_contains: lineagoerli_Bytes
  transactingAsset_not_contains: lineagoerli_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: lineagoerli_OriginMessage_filter
  bumpRelayerFeeCount: BigInt
  bumpRelayerFeeCount_not: BigInt
  bumpRelayerFeeCount_gt: BigInt
  bumpRelayerFeeCount_lt: BigInt
  bumpRelayerFeeCount_gte: BigInt
  bumpRelayerFeeCount_lte: BigInt
  bumpRelayerFeeCount_in: [BigInt!]
  bumpRelayerFeeCount_not_in: [BigInt!]
  relayerFees: [String!]
  relayerFees_not: [String!]
  relayerFees_contains: [String!]
  relayerFees_contains_nocase: [String!]
  relayerFees_not_contains: [String!]
  relayerFees_not_contains_nocase: [String!]
  relayerFees_: lineagoerli_RelayerFee_filter
  initialRelayerFeeAsset: lineagoerli_Bytes
  initialRelayerFeeAsset_not: lineagoerli_Bytes
  initialRelayerFeeAsset_in: [lineagoerli_Bytes!]
  initialRelayerFeeAsset_not_in: [lineagoerli_Bytes!]
  initialRelayerFeeAsset_contains: lineagoerli_Bytes
  initialRelayerFeeAsset_not_contains: lineagoerli_Bytes
  caller: lineagoerli_Bytes
  caller_not: lineagoerli_Bytes
  caller_in: [lineagoerli_Bytes!]
  caller_not_in: [lineagoerli_Bytes!]
  caller_contains: lineagoerli_Bytes
  caller_not_contains: lineagoerli_Bytes
  transactionHash: lineagoerli_Bytes
  transactionHash_not: lineagoerli_Bytes
  transactionHash_in: [lineagoerli_Bytes!]
  transactionHash_not_in: [lineagoerli_Bytes!]
  transactionHash_contains: lineagoerli_Bytes
  transactionHash_not_contains: lineagoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: lineagoerli_Bytes
  txOrigin_not: lineagoerli_Bytes
  txOrigin_in: [lineagoerli_Bytes!]
  txOrigin_not_in: [lineagoerli_Bytes!]
  txOrigin_contains: lineagoerli_Bytes
  txOrigin_not_contains: lineagoerli_Bytes
  txNonce: BigInt
  txNonce_not: BigInt
  txNonce_gt: BigInt
  txNonce_lt: BigInt
  txNonce_gte: BigInt
  txNonce_lte: BigInt
  txNonce_in: [BigInt!]
  txNonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transactingAsset
  message
  bumpRelayerFeeCount
  relayerFees
  initialRelayerFeeAsset
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
  txNonce
}

type Query {
  lineagoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_Asset
  lineagoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_Asset_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_Asset!]!
  lineagoerli_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_AssetStatus
  lineagoerli_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_AssetStatus_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_AssetStatus!]!
  lineagoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_AssetBalance
  lineagoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_AssetBalance_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_AssetBalance!]!
  lineagoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_Router
  lineagoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_Router_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_Router!]!
  lineagoerli_routerDailyTVL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_RouterDailyTVL
  lineagoerli_routerDailyTVLs(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_RouterDailyTVL_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_RouterDailyTVL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_RouterDailyTVL!]!
  lineagoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_Setting
  lineagoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_Setting_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_Setting!]!
  lineagoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_Relayer
  lineagoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_Relayer_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_Relayer!]!
  lineagoerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_Sequencer
  lineagoerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_Sequencer_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_Sequencer!]!
  lineagoerli_relayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_RelayerFee
  lineagoerli_relayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_RelayerFee_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_RelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_RelayerFee!]!
  lineagoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_OriginTransfer
  lineagoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_OriginTransfer_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_OriginTransfer!]!
  lineagoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_DestinationTransfer
  lineagoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_DestinationTransfer_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_DestinationTransfer!]!
  lineagoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_OriginMessage
  lineagoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_OriginMessage_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_OriginMessage!]!
  lineagoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_AggregateRoot
  lineagoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_AggregateRoot_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_AggregateRoot!]!
  lineagoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_ConnectorMeta
  lineagoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_ConnectorMeta_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_ConnectorMeta!]!
  lineagoerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_RootCount
  lineagoerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_RootCount_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_RootCount!]!
  lineagoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_RootMessageSent
  lineagoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_RootMessageSent_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_RootMessageSent!]!
  lineagoerli_relayerFeesIncrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_RelayerFeesIncrease
  lineagoerli_relayerFeesIncreases(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_RelayerFeesIncrease_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_RelayerFeesIncrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_RelayerFeesIncrease!]!
  lineagoerli_slippageUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_SlippageUpdate
  lineagoerli_slippageUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_SlippageUpdate_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_SlippageUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_SlippageUpdate!]!
  """Access to subgraph metadata"""
  lineagoerli__meta(block: lineagoerli_Block_height): lineagoerli__Meta_
}

type lineagoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: lineagoerli_Bytes
}

type lineagoerli_RelayerFee {
  id: ID!
  transfer: lineagoerli_OriginTransfer!
  fee: BigInt!
  asset: lineagoerli_Bytes!
}

input lineagoerli_RelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: lineagoerli_OriginTransfer_filter
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  asset: lineagoerli_Bytes
  asset_not: lineagoerli_Bytes
  asset_in: [lineagoerli_Bytes!]
  asset_not_in: [lineagoerli_Bytes!]
  asset_contains: lineagoerli_Bytes
  asset_not_contains: lineagoerli_Bytes
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_RelayerFee_orderBy {
  id
  transfer
  fee
  asset
}

type lineagoerli_RelayerFeesIncrease {
  id: ID!
  transfer: lineagoerli_OriginTransfer!
  increase: BigInt
  asset: lineagoerli_Bytes
  caller: lineagoerli_Bytes!
  transactionHash: lineagoerli_Bytes!
  timestamp: BigInt!
  gasPrice: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

input lineagoerli_RelayerFeesIncrease_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: lineagoerli_OriginTransfer_filter
  increase: BigInt
  increase_not: BigInt
  increase_gt: BigInt
  increase_lt: BigInt
  increase_gte: BigInt
  increase_lte: BigInt
  increase_in: [BigInt!]
  increase_not_in: [BigInt!]
  asset: lineagoerli_Bytes
  asset_not: lineagoerli_Bytes
  asset_in: [lineagoerli_Bytes!]
  asset_not_in: [lineagoerli_Bytes!]
  asset_contains: lineagoerli_Bytes
  asset_not_contains: lineagoerli_Bytes
  caller: lineagoerli_Bytes
  caller_not: lineagoerli_Bytes
  caller_in: [lineagoerli_Bytes!]
  caller_not_in: [lineagoerli_Bytes!]
  caller_contains: lineagoerli_Bytes
  caller_not_contains: lineagoerli_Bytes
  transactionHash: lineagoerli_Bytes
  transactionHash_not: lineagoerli_Bytes
  transactionHash_in: [lineagoerli_Bytes!]
  transactionHash_not_in: [lineagoerli_Bytes!]
  transactionHash_contains: lineagoerli_Bytes
  transactionHash_not_contains: lineagoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_RelayerFeesIncrease_orderBy {
  id
  transfer
  increase
  asset
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

input lineagoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: lineagoerli_Bytes
  relayer_not: lineagoerli_Bytes
  relayer_in: [lineagoerli_Bytes!]
  relayer_not_in: [lineagoerli_Bytes!]
  relayer_contains: lineagoerli_Bytes
  relayer_not_contains: lineagoerli_Bytes
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type lineagoerli_RootCount {
  id: ID!
  count: BigInt
}

input lineagoerli_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_RootCount_orderBy {
  id
  count
}

type lineagoerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: lineagoerli_Bytes
  count: BigInt
  caller: lineagoerli_Bytes
  transactionHash: lineagoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input lineagoerli_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: lineagoerli_Bytes
  root_not: lineagoerli_Bytes
  root_in: [lineagoerli_Bytes!]
  root_not_in: [lineagoerli_Bytes!]
  root_contains: lineagoerli_Bytes
  root_not_contains: lineagoerli_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: lineagoerli_Bytes
  caller_not: lineagoerli_Bytes
  caller_in: [lineagoerli_Bytes!]
  caller_not_in: [lineagoerli_Bytes!]
  caller_contains: lineagoerli_Bytes
  caller_not_contains: lineagoerli_Bytes
  transactionHash: lineagoerli_Bytes
  transactionHash_not: lineagoerli_Bytes
  transactionHash_in: [lineagoerli_Bytes!]
  transactionHash_not_in: [lineagoerli_Bytes!]
  transactionHash_contains: lineagoerli_Bytes
  transactionHash_not_contains: lineagoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type lineagoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: lineagoerli_Bytes
  recipient: lineagoerli_Bytes
  proposedOwner: lineagoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: lineagoerli_AssetBalance_orderBy, orderDirection: lineagoerli_OrderDirection, where: lineagoerli_AssetBalance_filter): [lineagoerli_AssetBalance!]!
}

type lineagoerli_RouterDailyTVL {
  id: ID!
  router: lineagoerli_Router!
  asset: lineagoerli_Asset!
  timestamp: BigInt!
  balance: BigInt!
}

input lineagoerli_RouterDailyTVL_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: lineagoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: lineagoerli_Asset_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_RouterDailyTVL_orderBy {
  id
  router
  asset
  timestamp
  balance
}

input lineagoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: lineagoerli_Bytes
  owner_not: lineagoerli_Bytes
  owner_in: [lineagoerli_Bytes!]
  owner_not_in: [lineagoerli_Bytes!]
  owner_contains: lineagoerli_Bytes
  owner_not_contains: lineagoerli_Bytes
  recipient: lineagoerli_Bytes
  recipient_not: lineagoerli_Bytes
  recipient_in: [lineagoerli_Bytes!]
  recipient_not_in: [lineagoerli_Bytes!]
  recipient_contains: lineagoerli_Bytes
  recipient_not_contains: lineagoerli_Bytes
  proposedOwner: lineagoerli_Bytes
  proposedOwner_not: lineagoerli_Bytes
  proposedOwner_in: [lineagoerli_Bytes!]
  proposedOwner_not_in: [lineagoerli_Bytes!]
  proposedOwner_contains: lineagoerli_Bytes
  proposedOwner_not_contains: lineagoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: lineagoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type lineagoerli_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: lineagoerli_Bytes
}

input lineagoerli_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: lineagoerli_Bytes
  sequencer_not: lineagoerli_Bytes
  sequencer_in: [lineagoerli_Bytes!]
  sequencer_not_in: [lineagoerli_Bytes!]
  sequencer_contains: lineagoerli_Bytes
  sequencer_not_contains: lineagoerli_Bytes
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type lineagoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: lineagoerli_Bytes!
}

input lineagoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: lineagoerli_Bytes
  caller_not: lineagoerli_Bytes
  caller_in: [lineagoerli_Bytes!]
  caller_not_in: [lineagoerli_Bytes!]
  caller_contains: lineagoerli_Bytes
  caller_not_contains: lineagoerli_Bytes
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type lineagoerli_SlippageUpdate {
  id: ID!
  transfer: lineagoerli_DestinationTransfer!
  slippage: BigInt!
  caller: lineagoerli_Bytes!
  transactionHash: lineagoerli_Bytes!
  timestamp: BigInt!
  gasPrice: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

input lineagoerli_SlippageUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: lineagoerli_DestinationTransfer_filter
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  caller: lineagoerli_Bytes
  caller_not: lineagoerli_Bytes
  caller_in: [lineagoerli_Bytes!]
  caller_not_in: [lineagoerli_Bytes!]
  caller_contains: lineagoerli_Bytes
  caller_not_contains: lineagoerli_Bytes
  transactionHash: lineagoerli_Bytes
  transactionHash_not: lineagoerli_Bytes
  transactionHash_in: [lineagoerli_Bytes!]
  transactionHash_not_in: [lineagoerli_Bytes!]
  transactionHash_contains: lineagoerli_Bytes
  transactionHash_not_contains: lineagoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: lineagoerli_BlockChangedFilter
}

enum lineagoerli_SlippageUpdate_orderBy {
  id
  transfer
  slippage
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type Subscription {
  lineagoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_Asset
  lineagoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_Asset_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_Asset!]!
  lineagoerli_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_AssetStatus
  lineagoerli_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_AssetStatus_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_AssetStatus!]!
  lineagoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_AssetBalance
  lineagoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_AssetBalance_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_AssetBalance!]!
  lineagoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_Router
  lineagoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_Router_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_Router!]!
  lineagoerli_routerDailyTVL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_RouterDailyTVL
  lineagoerli_routerDailyTVLs(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_RouterDailyTVL_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_RouterDailyTVL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_RouterDailyTVL!]!
  lineagoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_Setting
  lineagoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_Setting_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_Setting!]!
  lineagoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_Relayer
  lineagoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_Relayer_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_Relayer!]!
  lineagoerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_Sequencer
  lineagoerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_Sequencer_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_Sequencer!]!
  lineagoerli_relayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_RelayerFee
  lineagoerli_relayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_RelayerFee_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_RelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_RelayerFee!]!
  lineagoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_OriginTransfer
  lineagoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_OriginTransfer_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_OriginTransfer!]!
  lineagoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_DestinationTransfer
  lineagoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_DestinationTransfer_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_DestinationTransfer!]!
  lineagoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_OriginMessage
  lineagoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_OriginMessage_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_OriginMessage!]!
  lineagoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_AggregateRoot
  lineagoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_AggregateRoot_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_AggregateRoot!]!
  lineagoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_ConnectorMeta
  lineagoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_ConnectorMeta_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_ConnectorMeta!]!
  lineagoerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_RootCount
  lineagoerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_RootCount_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_RootCount!]!
  lineagoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_RootMessageSent
  lineagoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_RootMessageSent_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_RootMessageSent!]!
  lineagoerli_relayerFeesIncrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_RelayerFeesIncrease
  lineagoerli_relayerFeesIncreases(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_RelayerFeesIncrease_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_RelayerFeesIncrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_RelayerFeesIncrease!]!
  lineagoerli_slippageUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): lineagoerli_SlippageUpdate
  lineagoerli_slippageUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: lineagoerli_SlippageUpdate_orderBy
    orderDirection: lineagoerli_OrderDirection
    where: lineagoerli_SlippageUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: lineagoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [lineagoerli_SlippageUpdate!]!
  """Access to subgraph metadata"""
  lineagoerli__meta(block: lineagoerli_Block_height): lineagoerli__Meta_
}

enum lineagoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type lineagoerli__Block_ {
  """The hash of the block"""
  hash: lineagoerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type lineagoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: lineagoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}