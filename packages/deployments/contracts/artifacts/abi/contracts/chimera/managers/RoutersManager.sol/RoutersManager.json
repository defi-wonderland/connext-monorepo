[
  "error BaseManager__delayElapsed_delayNotElapsed()",
  "error BaseManager__getConfig_notRegistered()",
  "error BaseManager__handleIncomingAsset_feeOnTransferNotSupported()",
  "error BaseManager__handleIncomingAsset_nativeAssetNotSupported()",
  "error BaseManager__handleOutgoingAsset_notNative()",
  "error BaseManager__nonReentrant_reentrantCall()",
  "error BaseManager__nonXCallReentrant_reentrantCall()",
  "error BaseManager__onlyOwnerOrRole_notOwnerOrRole(uint8 _role)",
  "error BaseManager__onlyOwner_notOwner()",
  "error BaseManager__whenNotPaused_paused()",
  "error RoutersManager__acceptProposedRouterOwner_badCaller()",
  "error RoutersManager__acceptProposedRouterOwner_notElapsed()",
  "error RoutersManager__addLiquidityForRouter_amountIsZero()",
  "error RoutersManager__addLiquidityForRouter_badRouter()",
  "error RoutersManager__addLiquidityForRouter_capReached()",
  "error RoutersManager__addLiquidityForRouter_routerEmpty()",
  "error RoutersManager__approveRouter_alreadyAdded()",
  "error RoutersManager__approveRouter_routerEmpty()",
  "error RoutersManager__getApprovedCanonicalId_notAllowlisted()",
  "error RoutersManager__initializeRouter_configNotEmpty()",
  "error RoutersManager__onlyRouterOwner_notRouterOwner()",
  "error RoutersManager__proposeRouterOwner_badRouter()",
  "error RoutersManager__proposeRouterOwner_notNewOwner()",
  "error RoutersManager__removeRouterLiquidityFor_notOwner()",
  "error RoutersManager__removeRouterLiquidity_amountIsZero()",
  "error RoutersManager__removeRouterLiquidity_insufficientFunds()",
  "error RoutersManager__removeRouterLiquidity_recipientEmpty()",
  "error RoutersManager__setRouterOwner_noChange()",
  "error RoutersManager__setRouterRecipient_notNewRecipient()",
  "error RoutersManager__unapproveRouter_notAdded()",
  "error RoutersManager__unapproveRouter_routerEmpty()",
  "event RouterAdded(address indexed router, address caller)",
  "event RouterInitialized(address indexed router)",
  "event RouterLiquidityAdded(address indexed router, address local, bytes32 key, uint256 amount, address caller)",
  "event RouterLiquidityRemoved(address indexed router, address to, address local, bytes32 key, uint256 amount, address caller)",
  "event RouterOwnerAccepted(address indexed router, address indexed prevOwner, address indexed newOwner)",
  "event RouterOwnerProposed(address indexed router, address indexed prevProposed, address indexed newProposed)",
  "event RouterRecipientSet(address indexed router, address indexed prevRecipient, address indexed newRecipient)",
  "event RouterRemoved(address indexed router, address caller)",
  "function acceptProposedRouterOwner(address _router)",
  "function acceptanceDelay() view returns (uint256)",
  "function addRouterLiquidity(uint256 _amount, address _local) payable",
  "function addRouterLiquidityFor(uint256 _amount, address _local, address _router) payable",
  "function approveRouter(address _router)",
  "function approvedRelayers(address _relayer) view returns (bool _approved)",
  "function approvedSequencers(address _sequencer) view returns (bool _approved)",
  "function assetCanonicalIds(address _asset) view returns (bytes32 _canonicalId)",
  "function assetIdToTickerHash(address _assetId) view returns (bytes32 _tickerHash)",
  "function domain() view returns (uint32)",
  "function initializeRouter(address _owner, address _recipient)",
  "function initialized() view returns (bool)",
  "function maxRoutersPerTransfer() view returns (uint256)",
  "function nextAssetToTickerHash(address _nextAsset) view returns (bytes32 _tickerHash)",
  "function nonce() view returns (uint256)",
  "function owner() view returns (address)",
  "function proposeRouterOwner(address _router, address _proposed)",
  "function proposed() view returns (address)",
  "function proposedOwnershipTimestamp() view returns (uint256)",
  "function receiveLocalOverride(bytes32 _transferId) view returns (bool _receives)",
  "function relayerFeeVault() view returns (address)",
  "function remotes(uint32 _domain) view returns (bytes32 _router)",
  "function removeRouterLiquidity(tuple(uint32 domain, bytes32 id) _canonical, uint256 _amount, address _to)",
  "function removeRouterLiquidityFor(tuple(uint32 domain, bytes32 id) _canonical, uint256 _amount, address _to, address _router)",
  "function roles(address _account) view returns (uint8 _role)",
  "function routedTransfers(bytes32 _transferId, uint256) view returns (address _routers)",
  "function routerAllowlistRemoved() view returns (bool)",
  "function routerAllowlistTimestamp() view returns (uint256)",
  "function routerBalances(address _router, address _assetId) view returns (uint256 _amount)",
  "function routerConfigs(address _router) view returns (bool approved, bool portalApproved, address owner, address recipient, address proposed, uint256 proposedTimestamp)",
  "function routerCredits(address _assetId, address _router) view returns (uint256 _amount)",
  "function setRouterRecipient(address _router, address _recipient)",
  "function settlementStrategies(bytes32 _tickerHash, bytes _path) view returns (address _strategy)",
  "function supportedAssetDomains(bytes32 _tickerHash, uint32 _domain) view returns (bool _supported)",
  "function tickerHashToAssetId(bytes32 _tickerHash) view returns (address _assetId)",
  "function tickerHashToNextAsset(bytes32 _tickerHash) view returns (address _nextAsset)",
  "function tokenConfigs(bytes32 _canonicalId) view returns (address representation, uint8 representationDecimals, address adopted, uint8 adoptedDecimals, address adoptedToLocalExternalPools, bool approval, uint256 cap, uint256 custodied)",
  "function transferStatus(bytes32 _domain) view returns (uint8 _status)",
  "function unapproveRouter(address _router)",
  "function unclaimedAssets(address _assetId) view returns (uint256 _amount)",
  "function xAppConnectionManager() view returns (address)"
]
