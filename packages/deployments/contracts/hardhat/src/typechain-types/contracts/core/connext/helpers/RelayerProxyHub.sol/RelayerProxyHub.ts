/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export type TransferInfoStruct = {
  originDomain: PromiseOrValue<BigNumberish>;
  destinationDomain: PromiseOrValue<BigNumberish>;
  canonicalDomain: PromiseOrValue<BigNumberish>;
  to: PromiseOrValue<string>;
  delegate: PromiseOrValue<string>;
  receiveLocal: PromiseOrValue<boolean>;
  callData: PromiseOrValue<BytesLike>;
  slippage: PromiseOrValue<BigNumberish>;
  originSender: PromiseOrValue<string>;
  bridgedAmt: PromiseOrValue<BigNumberish>;
  normalizedIn: PromiseOrValue<BigNumberish>;
  nonce: PromiseOrValue<BigNumberish>;
  canonicalId: PromiseOrValue<BytesLike>;
};

export type TransferInfoStructOutput = [
  number,
  number,
  number,
  string,
  string,
  boolean,
  string,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  originDomain: number;
  destinationDomain: number;
  canonicalDomain: number;
  to: string;
  delegate: string;
  receiveLocal: boolean;
  callData: string;
  slippage: BigNumber;
  originSender: string;
  bridgedAmt: BigNumber;
  normalizedIn: BigNumber;
  nonce: BigNumber;
  canonicalId: string;
};

export type ExecuteArgsStruct = {
  params: TransferInfoStruct;
  routers: PromiseOrValue<string>[];
  routerSignatures: PromiseOrValue<BytesLike>[];
  sequencer: PromiseOrValue<string>;
  sequencerSignature: PromiseOrValue<BytesLike>;
};

export type ExecuteArgsStructOutput = [
  TransferInfoStructOutput,
  string[],
  string[],
  string,
  string
] & {
  params: TransferInfoStructOutput;
  routers: string[];
  routerSignatures: string[];
  sequencer: string;
  sequencerSignature: string;
};

export declare namespace RelayerProxyHub {
  export type HubConstructorParamsStruct = {
    connext: PromiseOrValue<string>;
    spokeConnector: PromiseOrValue<string>;
    gelatoRelayer: PromiseOrValue<string>;
    feeCollector: PromiseOrValue<string>;
    keep3r: PromiseOrValue<string>;
    rootManager: PromiseOrValue<string>;
    autonolas: PromiseOrValue<string>;
    propagateCooldown: PromiseOrValue<BigNumberish>;
    finalizeCooldown: PromiseOrValue<BigNumberish>;
    proposeAggregateRootCooldown: PromiseOrValue<BigNumberish>;
    hubConnectors: PromiseOrValue<string>[];
    hubConnectorChains: PromiseOrValue<BigNumberish>[];
  };

  export type HubConstructorParamsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string[],
    number[]
  ] & {
    connext: string;
    spokeConnector: string;
    gelatoRelayer: string;
    feeCollector: string;
    keep3r: string;
    rootManager: string;
    autonolas: string;
    propagateCooldown: BigNumber;
    finalizeCooldown: BigNumber;
    proposeAggregateRootCooldown: BigNumber;
    hubConnectors: string[];
    hubConnectorChains: number[];
  };
}

export declare namespace ISpokeConnector {
  export type ProofStruct = {
    message: PromiseOrValue<BytesLike>;
    path: PromiseOrValue<BytesLike>[];
    index: PromiseOrValue<BigNumberish>;
  };

  export type ProofStructOutput = [string, string[], BigNumber] & {
    message: string;
    path: string[];
    index: BigNumber;
  };
}

export interface RelayerProxyHubInterface extends utils.Interface {
  functions: {
    "acceptProposedOwner()": FunctionFragment;
    "addRelayer(address)": FunctionFragment;
    "allowedRelayer(address)": FunctionFragment;
    "autonolas()": FunctionFragment;
    "autonolasPriority(uint8)": FunctionFragment;
    "connext()": FunctionFragment;
    "delay()": FunctionFragment;
    "domain()": FunctionFragment;
    "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes),uint256)": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "finalize(bytes32,uint256,uint256)": FunctionFragment;
    "finalizeAndPropagate(address[],uint256[],bytes[],bytes32,uint256)": FunctionFragment;
    "finalizeAndPropagateKeep3r(address[],uint256[],bytes[],bytes32,uint256)": FunctionFragment;
    "finalizeCooldown()": FunctionFragment;
    "finalizeOnRoot(bytes32,uint256)": FunctionFragment;
    "gelatoRelayer()": FunctionFragment;
    "hubConnectors(uint32)": FunctionFragment;
    "keep3r()": FunctionFragment;
    "lastFinalizeAt()": FunctionFragment;
    "lastPropagateAt()": FunctionFragment;
    "lastProposeAggregateRootAt()": FunctionFragment;
    "owner()": FunctionFragment;
    "processFromRoot(bytes,uint32,bytes32)": FunctionFragment;
    "processFromRootKeep3r(bytes,uint32,bytes32)": FunctionFragment;
    "processedRootMessages(uint32,bytes32)": FunctionFragment;
    "propagate(address[],uint256[],bytes[],uint256)": FunctionFragment;
    "propagateCooldown()": FunctionFragment;
    "propagateKeep3r(address[],uint256[],bytes[])": FunctionFragment;
    "propagateWorkable(uint32[])": FunctionFragment;
    "proposeAggregateRoot(bytes32,uint256,bytes,uint256)": FunctionFragment;
    "proposeAggregateRootCooldown()": FunctionFragment;
    "proposeAggregateRootOnRoot(uint256,bytes32,bytes32[],uint32[],bytes)": FunctionFragment;
    "proposeAggregateRootOnRootKeep3r(uint256,bytes32,bytes32[],uint32[],bytes)": FunctionFragment;
    "proposeNewOwner(address)": FunctionFragment;
    "proposed()": FunctionFragment;
    "proposedTimestamp()": FunctionFragment;
    "proveAndProcess((bytes,bytes32[32],uint256)[],bytes32,bytes32[32],uint256,uint256)": FunctionFragment;
    "removeRelayer(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounced()": FunctionFragment;
    "rootManager()": FunctionFragment;
    "send(bytes,uint256,uint256)": FunctionFragment;
    "sendRootToHubSpoke()": FunctionFragment;
    "setAutonolas(address)": FunctionFragment;
    "setAutonolasPriority(uint8,uint8)": FunctionFragment;
    "setConnext(address)": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "setFinalizeCooldown(uint256)": FunctionFragment;
    "setGelatoRelayer(address)": FunctionFragment;
    "setHubConnector(address,uint32)": FunctionFragment;
    "setKeep3r(address)": FunctionFragment;
    "setPropagateCooldown(uint256)": FunctionFragment;
    "setProposeAggregateRootCooldown(uint256)": FunctionFragment;
    "setRootManager(address)": FunctionFragment;
    "setSpokeConnector(address)": FunctionFragment;
    "spokeConnector()": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptProposedOwner"
      | "addRelayer"
      | "allowedRelayer"
      | "autonolas"
      | "autonolasPriority"
      | "connext"
      | "delay"
      | "domain"
      | "execute"
      | "feeCollector"
      | "finalize"
      | "finalizeAndPropagate"
      | "finalizeAndPropagateKeep3r"
      | "finalizeCooldown"
      | "finalizeOnRoot"
      | "gelatoRelayer"
      | "hubConnectors"
      | "keep3r"
      | "lastFinalizeAt"
      | "lastPropagateAt"
      | "lastProposeAggregateRootAt"
      | "owner"
      | "processFromRoot"
      | "processFromRootKeep3r"
      | "processedRootMessages"
      | "propagate"
      | "propagateCooldown"
      | "propagateKeep3r"
      | "propagateWorkable"
      | "proposeAggregateRoot"
      | "proposeAggregateRootCooldown"
      | "proposeAggregateRootOnRoot"
      | "proposeAggregateRootOnRootKeep3r"
      | "proposeNewOwner"
      | "proposed"
      | "proposedTimestamp"
      | "proveAndProcess"
      | "removeRelayer"
      | "renounceOwnership"
      | "renounced"
      | "rootManager"
      | "send"
      | "sendRootToHubSpoke"
      | "setAutonolas"
      | "setAutonolasPriority"
      | "setConnext"
      | "setFeeCollector"
      | "setFinalizeCooldown"
      | "setGelatoRelayer"
      | "setHubConnector"
      | "setKeep3r"
      | "setPropagateCooldown"
      | "setProposeAggregateRootCooldown"
      | "setRootManager"
      | "setSpokeConnector"
      | "spokeConnector"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptProposedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "autonolas", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "autonolasPriority",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "connext", values?: undefined): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(functionFragment: "domain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [ExecuteArgsStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeAndPropagate",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeAndPropagateKeep3r",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeOnRoot",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gelatoRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hubConnectors",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "keep3r", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastFinalizeAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastPropagateAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastProposeAggregateRootAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processFromRoot",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processFromRootKeep3r",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processedRootMessages",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "propagate",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "propagateCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "propagateKeep3r",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "propagateWorkable",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeAggregateRoot",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeAggregateRootCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeAggregateRootOnRoot",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeAggregateRootOnRootKeep3r",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "proposed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposedTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proveAndProcess",
    values: [
      ISpokeConnector.ProofStruct[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "renounced", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rootManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRootToHubSpoke",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutonolas",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAutonolasPriority",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConnext",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFinalizeCooldown",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGelatoRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHubConnector",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeep3r",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPropagateCooldown",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposeAggregateRootCooldown",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRootManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpokeConnector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "spokeConnector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptProposedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRelayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "autonolas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "autonolasPriority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "connext", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "domain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeAndPropagate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeAndPropagateKeep3r",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeOnRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gelatoRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hubConnectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keep3r", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastFinalizeAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPropagateAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastProposeAggregateRootAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processFromRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processFromRootKeep3r",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processedRootMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propagate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propagateCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "propagateKeep3r",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "propagateWorkable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeAggregateRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeAggregateRootCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeAggregateRootOnRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeAggregateRootOnRootKeep3r",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveAndProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renounced", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rootManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendRootToHubSpoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutonolas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutonolasPriority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConnext", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFinalizeCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGelatoRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHubConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeep3r", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPropagateCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposeAggregateRootCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRootManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpokeConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spokeConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AutonolasChanged(address,address)": EventFragment;
    "AutonolasPriorityChanged(uint8,uint8,uint8)": EventFragment;
    "ConnextChanged(address,address)": EventFragment;
    "FeeCollectorChanged(address,address)": EventFragment;
    "FinalizeCooldownChanged(uint256,uint256)": EventFragment;
    "FundsDeducted(address,uint256,uint256)": EventFragment;
    "FundsReceived(uint256,uint256)": EventFragment;
    "GelatoRelayerChanged(address,address)": EventFragment;
    "HubConnectorChanged(address,address,uint32)": EventFragment;
    "Keep3rChanged(address,address)": EventFragment;
    "OwnershipProposed(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PropagateCooldownChanged(uint256,uint256)": EventFragment;
    "ProposeAggregateRootCooldownChanged(uint256,uint256)": EventFragment;
    "RelayerAdded(address)": EventFragment;
    "RelayerRemoved(address)": EventFragment;
    "RootManagerChanged(address,address)": EventFragment;
    "SpokeConnectorChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AutonolasChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AutonolasPriorityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConnextChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCollectorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalizeCooldownChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsDeducted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GelatoRelayerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HubConnectorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Keep3rChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PropagateCooldownChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProposeAggregateRootCooldownChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpokeConnectorChanged"): EventFragment;
}

export interface AutonolasChangedEventObject {
  updated: string;
  previous: string;
}
export type AutonolasChangedEvent = TypedEvent<
  [string, string],
  AutonolasChangedEventObject
>;

export type AutonolasChangedEventFilter =
  TypedEventFilter<AutonolasChangedEvent>;

export interface AutonolasPriorityChangedEventObject {
  fn: number;
  updated: number;
  previous: number;
}
export type AutonolasPriorityChangedEvent = TypedEvent<
  [number, number, number],
  AutonolasPriorityChangedEventObject
>;

export type AutonolasPriorityChangedEventFilter =
  TypedEventFilter<AutonolasPriorityChangedEvent>;

export interface ConnextChangedEventObject {
  updated: string;
  previous: string;
}
export type ConnextChangedEvent = TypedEvent<
  [string, string],
  ConnextChangedEventObject
>;

export type ConnextChangedEventFilter = TypedEventFilter<ConnextChangedEvent>;

export interface FeeCollectorChangedEventObject {
  updated: string;
  previous: string;
}
export type FeeCollectorChangedEvent = TypedEvent<
  [string, string],
  FeeCollectorChangedEventObject
>;

export type FeeCollectorChangedEventFilter =
  TypedEventFilter<FeeCollectorChangedEvent>;

export interface FinalizeCooldownChangedEventObject {
  finalizeCooldown: BigNumber;
  oldFinalizeCooldown: BigNumber;
}
export type FinalizeCooldownChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FinalizeCooldownChangedEventObject
>;

export type FinalizeCooldownChangedEventFilter =
  TypedEventFilter<FinalizeCooldownChangedEvent>;

export interface FundsDeductedEventObject {
  token: string;
  amount: BigNumber;
  balance: BigNumber;
}
export type FundsDeductedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  FundsDeductedEventObject
>;

export type FundsDeductedEventFilter = TypedEventFilter<FundsDeductedEvent>;

export interface FundsReceivedEventObject {
  amount: BigNumber;
  balance: BigNumber;
}
export type FundsReceivedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FundsReceivedEventObject
>;

export type FundsReceivedEventFilter = TypedEventFilter<FundsReceivedEvent>;

export interface GelatoRelayerChangedEventObject {
  updated: string;
  previous: string;
}
export type GelatoRelayerChangedEvent = TypedEvent<
  [string, string],
  GelatoRelayerChangedEventObject
>;

export type GelatoRelayerChangedEventFilter =
  TypedEventFilter<GelatoRelayerChangedEvent>;

export interface HubConnectorChangedEventObject {
  hubConnector: string;
  oldHubConnector: string;
  chain: number;
}
export type HubConnectorChangedEvent = TypedEvent<
  [string, string, number],
  HubConnectorChangedEventObject
>;

export type HubConnectorChangedEventFilter =
  TypedEventFilter<HubConnectorChangedEvent>;

export interface Keep3rChangedEventObject {
  updated: string;
  previous: string;
}
export type Keep3rChangedEvent = TypedEvent<
  [string, string],
  Keep3rChangedEventObject
>;

export type Keep3rChangedEventFilter = TypedEventFilter<Keep3rChangedEvent>;

export interface OwnershipProposedEventObject {
  proposedOwner: string;
}
export type OwnershipProposedEvent = TypedEvent<
  [string],
  OwnershipProposedEventObject
>;

export type OwnershipProposedEventFilter =
  TypedEventFilter<OwnershipProposedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PropagateCooldownChangedEventObject {
  propagateCooldown: BigNumber;
  oldPropagateCooldown: BigNumber;
}
export type PropagateCooldownChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PropagateCooldownChangedEventObject
>;

export type PropagateCooldownChangedEventFilter =
  TypedEventFilter<PropagateCooldownChangedEvent>;

export interface ProposeAggregateRootCooldownChangedEventObject {
  proposeAggregateRootCooldown: BigNumber;
  oldProposeAggregateRootCooldown: BigNumber;
}
export type ProposeAggregateRootCooldownChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProposeAggregateRootCooldownChangedEventObject
>;

export type ProposeAggregateRootCooldownChangedEventFilter =
  TypedEventFilter<ProposeAggregateRootCooldownChangedEvent>;

export interface RelayerAddedEventObject {
  relayer: string;
}
export type RelayerAddedEvent = TypedEvent<[string], RelayerAddedEventObject>;

export type RelayerAddedEventFilter = TypedEventFilter<RelayerAddedEvent>;

export interface RelayerRemovedEventObject {
  relayer: string;
}
export type RelayerRemovedEvent = TypedEvent<
  [string],
  RelayerRemovedEventObject
>;

export type RelayerRemovedEventFilter = TypedEventFilter<RelayerRemovedEvent>;

export interface RootManagerChangedEventObject {
  rootManager: string;
  oldRootManager: string;
}
export type RootManagerChangedEvent = TypedEvent<
  [string, string],
  RootManagerChangedEventObject
>;

export type RootManagerChangedEventFilter =
  TypedEventFilter<RootManagerChangedEvent>;

export interface SpokeConnectorChangedEventObject {
  updated: string;
  previous: string;
}
export type SpokeConnectorChangedEvent = TypedEvent<
  [string, string],
  SpokeConnectorChangedEventObject
>;

export type SpokeConnectorChangedEventFilter =
  TypedEventFilter<SpokeConnectorChangedEvent>;

export interface RelayerProxyHub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RelayerProxyHubInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptProposedOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowedRelayer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    autonolas(overrides?: CallOverrides): Promise<[string]>;

    autonolasPriority(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    connext(overrides?: CallOverrides): Promise<[string]>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    domain(overrides?: CallOverrides): Promise<[number]>;

    execute(
      _args: ExecuteArgsStruct,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    finalize(
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeAndPropagate(
      _connectors: PromiseOrValue<string>[],
      _fees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeAndPropagateKeep3r(
      _connectors: PromiseOrValue<string>[],
      _fees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeCooldown(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalizeOnRoot(
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gelatoRelayer(overrides?: CallOverrides): Promise<[string]>;

    hubConnectors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    keep3r(overrides?: CallOverrides): Promise<[string]>;

    lastFinalizeAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastPropagateAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastProposeAggregateRootAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processFromRoot(
      _encodedData: PromiseOrValue<BytesLike>,
      _fromChain: PromiseOrValue<BigNumberish>,
      _l2Hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processFromRootKeep3r(
      _encodedData: PromiseOrValue<BytesLike>,
      _fromChain: PromiseOrValue<BigNumberish>,
      _l2Hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processedRootMessages(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    propagate(
      _connectors: PromiseOrValue<string>[],
      _messageFees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      _relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    propagateCooldown(overrides?: CallOverrides): Promise<[BigNumber]>;

    propagateKeep3r(
      _connectors: PromiseOrValue<string>[],
      _messageFees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    propagateWorkable(
      domains: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeAggregateRoot(
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeAggregateRootCooldown(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proposeAggregateRootOnRoot(
      _snapshotId: PromiseOrValue<BigNumberish>,
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _snapshotsRoots: PromiseOrValue<BytesLike>[],
      _domains: PromiseOrValue<BigNumberish>[],
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeAggregateRootOnRootKeep3r(
      _snapshotId: PromiseOrValue<BigNumberish>,
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _snapshotsRoots: PromiseOrValue<BytesLike>[],
      _domains: PromiseOrValue<BigNumberish>[],
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeNewOwner(
      newlyProposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposed(overrides?: CallOverrides): Promise<[string]>;

    proposedTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    proveAndProcess(
      _proofs: ISpokeConnector.ProofStruct[],
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _aggregatePath: PromiseOrValue<BytesLike>[],
      _aggregateIndex: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounced(overrides?: CallOverrides): Promise<[boolean]>;

    rootManager(overrides?: CallOverrides): Promise<[string]>;

    send(
      _encodedData: PromiseOrValue<BytesLike>,
      _messageFee: PromiseOrValue<BigNumberish>,
      _relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendRootToHubSpoke(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAutonolas(
      _autonolas: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAutonolasPriority(
      _function: PromiseOrValue<BigNumberish>,
      _autonolasPriority: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConnext(
      _connext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFinalizeCooldown(
      _finalizeCooldown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGelatoRelayer(
      _gelatoRelayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHubConnector(
      _hubConnector: PromiseOrValue<string>,
      _chain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeep3r(
      _keep3r: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPropagateCooldown(
      _propagateCooldown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProposeAggregateRootCooldown(
      _proposeCooldown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRootManager(
      _rootManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpokeConnector(
      _spokeConnector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spokeConnector(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptProposedOwner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRelayer(
    _relayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowedRelayer(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  autonolas(overrides?: CallOverrides): Promise<string>;

  autonolasPriority(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  connext(overrides?: CallOverrides): Promise<string>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  domain(overrides?: CallOverrides): Promise<number>;

  execute(
    _args: ExecuteArgsStruct,
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  finalize(
    _proposedAggregateRoot: PromiseOrValue<BytesLike>,
    _rootTimestamp: PromiseOrValue<BigNumberish>,
    _endOfDispute: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeAndPropagate(
    _connectors: PromiseOrValue<string>[],
    _fees: PromiseOrValue<BigNumberish>[],
    _encodedData: PromiseOrValue<BytesLike>[],
    _proposedAggregateRoot: PromiseOrValue<BytesLike>,
    _endOfDispute: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeAndPropagateKeep3r(
    _connectors: PromiseOrValue<string>[],
    _fees: PromiseOrValue<BigNumberish>[],
    _encodedData: PromiseOrValue<BytesLike>[],
    _proposedAggregateRoot: PromiseOrValue<BytesLike>,
    _endOfDispute: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeCooldown(overrides?: CallOverrides): Promise<BigNumber>;

  finalizeOnRoot(
    _proposedAggregateRoot: PromiseOrValue<BytesLike>,
    _endOfDispute: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gelatoRelayer(overrides?: CallOverrides): Promise<string>;

  hubConnectors(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  keep3r(overrides?: CallOverrides): Promise<string>;

  lastFinalizeAt(overrides?: CallOverrides): Promise<BigNumber>;

  lastPropagateAt(overrides?: CallOverrides): Promise<BigNumber>;

  lastProposeAggregateRootAt(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  processFromRoot(
    _encodedData: PromiseOrValue<BytesLike>,
    _fromChain: PromiseOrValue<BigNumberish>,
    _l2Hash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processFromRootKeep3r(
    _encodedData: PromiseOrValue<BytesLike>,
    _fromChain: PromiseOrValue<BigNumberish>,
    _l2Hash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processedRootMessages(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  propagate(
    _connectors: PromiseOrValue<string>[],
    _messageFees: PromiseOrValue<BigNumberish>[],
    _encodedData: PromiseOrValue<BytesLike>[],
    _relayerFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  propagateCooldown(overrides?: CallOverrides): Promise<BigNumber>;

  propagateKeep3r(
    _connectors: PromiseOrValue<string>[],
    _messageFees: PromiseOrValue<BigNumberish>[],
    _encodedData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  propagateWorkable(
    domains: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeAggregateRoot(
    _aggregateRoot: PromiseOrValue<BytesLike>,
    _rootTimestamp: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeAggregateRootCooldown(overrides?: CallOverrides): Promise<BigNumber>;

  proposeAggregateRootOnRoot(
    _snapshotId: PromiseOrValue<BigNumberish>,
    _aggregateRoot: PromiseOrValue<BytesLike>,
    _snapshotsRoots: PromiseOrValue<BytesLike>[],
    _domains: PromiseOrValue<BigNumberish>[],
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeAggregateRootOnRootKeep3r(
    _snapshotId: PromiseOrValue<BigNumberish>,
    _aggregateRoot: PromiseOrValue<BytesLike>,
    _snapshotsRoots: PromiseOrValue<BytesLike>[],
    _domains: PromiseOrValue<BigNumberish>[],
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeNewOwner(
    newlyProposed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposed(overrides?: CallOverrides): Promise<string>;

  proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  proveAndProcess(
    _proofs: ISpokeConnector.ProofStruct[],
    _aggregateRoot: PromiseOrValue<BytesLike>,
    _aggregatePath: PromiseOrValue<BytesLike>[],
    _aggregateIndex: PromiseOrValue<BigNumberish>,
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRelayer(
    _relayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounced(overrides?: CallOverrides): Promise<boolean>;

  rootManager(overrides?: CallOverrides): Promise<string>;

  send(
    _encodedData: PromiseOrValue<BytesLike>,
    _messageFee: PromiseOrValue<BigNumberish>,
    _relayerFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendRootToHubSpoke(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAutonolas(
    _autonolas: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAutonolasPriority(
    _function: PromiseOrValue<BigNumberish>,
    _autonolasPriority: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConnext(
    _connext: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    _feeCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFinalizeCooldown(
    _finalizeCooldown: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGelatoRelayer(
    _gelatoRelayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHubConnector(
    _hubConnector: PromiseOrValue<string>,
    _chain: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeep3r(
    _keep3r: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPropagateCooldown(
    _propagateCooldown: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProposeAggregateRootCooldown(
    _proposeCooldown: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRootManager(
    _rootManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpokeConnector(
    _spokeConnector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spokeConnector(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptProposedOwner(overrides?: CallOverrides): Promise<void>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedRelayer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    autonolas(overrides?: CallOverrides): Promise<string>;

    autonolasPriority(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    connext(overrides?: CallOverrides): Promise<string>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    domain(overrides?: CallOverrides): Promise<number>;

    execute(
      _args: ExecuteArgsStruct,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    finalize(
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeAndPropagate(
      _connectors: PromiseOrValue<string>[],
      _fees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeAndPropagateKeep3r(
      _connectors: PromiseOrValue<string>[],
      _fees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeOnRoot(
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    gelatoRelayer(overrides?: CallOverrides): Promise<string>;

    hubConnectors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    keep3r(overrides?: CallOverrides): Promise<string>;

    lastFinalizeAt(overrides?: CallOverrides): Promise<BigNumber>;

    lastPropagateAt(overrides?: CallOverrides): Promise<BigNumber>;

    lastProposeAggregateRootAt(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    processFromRoot(
      _encodedData: PromiseOrValue<BytesLike>,
      _fromChain: PromiseOrValue<BigNumberish>,
      _l2Hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processFromRootKeep3r(
      _encodedData: PromiseOrValue<BytesLike>,
      _fromChain: PromiseOrValue<BigNumberish>,
      _l2Hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processedRootMessages(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    propagate(
      _connectors: PromiseOrValue<string>[],
      _messageFees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      _relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    propagateCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    propagateKeep3r(
      _connectors: PromiseOrValue<string>[],
      _messageFees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    propagateWorkable(
      domains: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    proposeAggregateRoot(
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeAggregateRootCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    proposeAggregateRootOnRoot(
      _snapshotId: PromiseOrValue<BigNumberish>,
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _snapshotsRoots: PromiseOrValue<BytesLike>[],
      _domains: PromiseOrValue<BigNumberish>[],
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeAggregateRootOnRootKeep3r(
      _snapshotId: PromiseOrValue<BigNumberish>,
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _snapshotsRoots: PromiseOrValue<BytesLike>[],
      _domains: PromiseOrValue<BigNumberish>[],
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeNewOwner(
      newlyProposed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposed(overrides?: CallOverrides): Promise<string>;

    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    proveAndProcess(
      _proofs: ISpokeConnector.ProofStruct[],
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _aggregatePath: PromiseOrValue<BytesLike>[],
      _aggregateIndex: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounced(overrides?: CallOverrides): Promise<boolean>;

    rootManager(overrides?: CallOverrides): Promise<string>;

    send(
      _encodedData: PromiseOrValue<BytesLike>,
      _messageFee: PromiseOrValue<BigNumberish>,
      _relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendRootToHubSpoke(overrides?: CallOverrides): Promise<void>;

    setAutonolas(
      _autonolas: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAutonolasPriority(
      _function: PromiseOrValue<BigNumberish>,
      _autonolasPriority: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConnext(
      _connext: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFinalizeCooldown(
      _finalizeCooldown: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGelatoRelayer(
      _gelatoRelayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHubConnector(
      _hubConnector: PromiseOrValue<string>,
      _chain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeep3r(
      _keep3r: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPropagateCooldown(
      _propagateCooldown: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposeAggregateRootCooldown(
      _proposeCooldown: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRootManager(
      _rootManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpokeConnector(
      _spokeConnector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    spokeConnector(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AutonolasChanged(address,address)"(
      updated?: null,
      previous?: null
    ): AutonolasChangedEventFilter;
    AutonolasChanged(
      updated?: null,
      previous?: null
    ): AutonolasChangedEventFilter;

    "AutonolasPriorityChanged(uint8,uint8,uint8)"(
      fn?: null,
      updated?: null,
      previous?: null
    ): AutonolasPriorityChangedEventFilter;
    AutonolasPriorityChanged(
      fn?: null,
      updated?: null,
      previous?: null
    ): AutonolasPriorityChangedEventFilter;

    "ConnextChanged(address,address)"(
      updated?: null,
      previous?: null
    ): ConnextChangedEventFilter;
    ConnextChanged(updated?: null, previous?: null): ConnextChangedEventFilter;

    "FeeCollectorChanged(address,address)"(
      updated?: null,
      previous?: null
    ): FeeCollectorChangedEventFilter;
    FeeCollectorChanged(
      updated?: null,
      previous?: null
    ): FeeCollectorChangedEventFilter;

    "FinalizeCooldownChanged(uint256,uint256)"(
      finalizeCooldown?: null,
      oldFinalizeCooldown?: null
    ): FinalizeCooldownChangedEventFilter;
    FinalizeCooldownChanged(
      finalizeCooldown?: null,
      oldFinalizeCooldown?: null
    ): FinalizeCooldownChangedEventFilter;

    "FundsDeducted(address,uint256,uint256)"(
      token?: null,
      amount?: null,
      balance?: null
    ): FundsDeductedEventFilter;
    FundsDeducted(
      token?: null,
      amount?: null,
      balance?: null
    ): FundsDeductedEventFilter;

    "FundsReceived(uint256,uint256)"(
      amount?: null,
      balance?: null
    ): FundsReceivedEventFilter;
    FundsReceived(amount?: null, balance?: null): FundsReceivedEventFilter;

    "GelatoRelayerChanged(address,address)"(
      updated?: null,
      previous?: null
    ): GelatoRelayerChangedEventFilter;
    GelatoRelayerChanged(
      updated?: null,
      previous?: null
    ): GelatoRelayerChangedEventFilter;

    "HubConnectorChanged(address,address,uint32)"(
      hubConnector?: null,
      oldHubConnector?: null,
      chain?: null
    ): HubConnectorChangedEventFilter;
    HubConnectorChanged(
      hubConnector?: null,
      oldHubConnector?: null,
      chain?: null
    ): HubConnectorChangedEventFilter;

    "Keep3rChanged(address,address)"(
      updated?: null,
      previous?: null
    ): Keep3rChangedEventFilter;
    Keep3rChanged(updated?: null, previous?: null): Keep3rChangedEventFilter;

    "OwnershipProposed(address)"(
      proposedOwner?: PromiseOrValue<string> | null
    ): OwnershipProposedEventFilter;
    OwnershipProposed(
      proposedOwner?: PromiseOrValue<string> | null
    ): OwnershipProposedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PropagateCooldownChanged(uint256,uint256)"(
      propagateCooldown?: null,
      oldPropagateCooldown?: null
    ): PropagateCooldownChangedEventFilter;
    PropagateCooldownChanged(
      propagateCooldown?: null,
      oldPropagateCooldown?: null
    ): PropagateCooldownChangedEventFilter;

    "ProposeAggregateRootCooldownChanged(uint256,uint256)"(
      proposeAggregateRootCooldown?: null,
      oldProposeAggregateRootCooldown?: null
    ): ProposeAggregateRootCooldownChangedEventFilter;
    ProposeAggregateRootCooldownChanged(
      proposeAggregateRootCooldown?: null,
      oldProposeAggregateRootCooldown?: null
    ): ProposeAggregateRootCooldownChangedEventFilter;

    "RelayerAdded(address)"(relayer?: null): RelayerAddedEventFilter;
    RelayerAdded(relayer?: null): RelayerAddedEventFilter;

    "RelayerRemoved(address)"(relayer?: null): RelayerRemovedEventFilter;
    RelayerRemoved(relayer?: null): RelayerRemovedEventFilter;

    "RootManagerChanged(address,address)"(
      rootManager?: null,
      oldRootManager?: null
    ): RootManagerChangedEventFilter;
    RootManagerChanged(
      rootManager?: null,
      oldRootManager?: null
    ): RootManagerChangedEventFilter;

    "SpokeConnectorChanged(address,address)"(
      updated?: null,
      previous?: null
    ): SpokeConnectorChangedEventFilter;
    SpokeConnectorChanged(
      updated?: null,
      previous?: null
    ): SpokeConnectorChangedEventFilter;
  };

  estimateGas: {
    acceptProposedOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowedRelayer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    autonolas(overrides?: CallOverrides): Promise<BigNumber>;

    autonolasPriority(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    connext(overrides?: CallOverrides): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    domain(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _args: ExecuteArgsStruct,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeAndPropagate(
      _connectors: PromiseOrValue<string>[],
      _fees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeAndPropagateKeep3r(
      _connectors: PromiseOrValue<string>[],
      _fees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeOnRoot(
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gelatoRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    hubConnectors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keep3r(overrides?: CallOverrides): Promise<BigNumber>;

    lastFinalizeAt(overrides?: CallOverrides): Promise<BigNumber>;

    lastPropagateAt(overrides?: CallOverrides): Promise<BigNumber>;

    lastProposeAggregateRootAt(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processFromRoot(
      _encodedData: PromiseOrValue<BytesLike>,
      _fromChain: PromiseOrValue<BigNumberish>,
      _l2Hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processFromRootKeep3r(
      _encodedData: PromiseOrValue<BytesLike>,
      _fromChain: PromiseOrValue<BigNumberish>,
      _l2Hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processedRootMessages(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propagate(
      _connectors: PromiseOrValue<string>[],
      _messageFees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      _relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    propagateCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    propagateKeep3r(
      _connectors: PromiseOrValue<string>[],
      _messageFees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    propagateWorkable(
      domains: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeAggregateRoot(
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeAggregateRootCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    proposeAggregateRootOnRoot(
      _snapshotId: PromiseOrValue<BigNumberish>,
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _snapshotsRoots: PromiseOrValue<BytesLike>[],
      _domains: PromiseOrValue<BigNumberish>[],
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeAggregateRootOnRootKeep3r(
      _snapshotId: PromiseOrValue<BigNumberish>,
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _snapshotsRoots: PromiseOrValue<BytesLike>[],
      _domains: PromiseOrValue<BigNumberish>[],
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeNewOwner(
      newlyProposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposed(overrides?: CallOverrides): Promise<BigNumber>;

    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    proveAndProcess(
      _proofs: ISpokeConnector.ProofStruct[],
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _aggregatePath: PromiseOrValue<BytesLike>[],
      _aggregateIndex: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounced(overrides?: CallOverrides): Promise<BigNumber>;

    rootManager(overrides?: CallOverrides): Promise<BigNumber>;

    send(
      _encodedData: PromiseOrValue<BytesLike>,
      _messageFee: PromiseOrValue<BigNumberish>,
      _relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendRootToHubSpoke(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAutonolas(
      _autonolas: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAutonolasPriority(
      _function: PromiseOrValue<BigNumberish>,
      _autonolasPriority: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConnext(
      _connext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFinalizeCooldown(
      _finalizeCooldown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGelatoRelayer(
      _gelatoRelayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHubConnector(
      _hubConnector: PromiseOrValue<string>,
      _chain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeep3r(
      _keep3r: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPropagateCooldown(
      _propagateCooldown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProposeAggregateRootCooldown(
      _proposeCooldown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRootManager(
      _rootManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpokeConnector(
      _spokeConnector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spokeConnector(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptProposedOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowedRelayer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    autonolas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    autonolasPriority(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connext(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      _args: ExecuteArgsStruct,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeAndPropagate(
      _connectors: PromiseOrValue<string>[],
      _fees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeAndPropagateKeep3r(
      _connectors: PromiseOrValue<string>[],
      _fees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizeOnRoot(
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gelatoRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hubConnectors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keep3r(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastFinalizeAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPropagateAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastProposeAggregateRootAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processFromRoot(
      _encodedData: PromiseOrValue<BytesLike>,
      _fromChain: PromiseOrValue<BigNumberish>,
      _l2Hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processFromRootKeep3r(
      _encodedData: PromiseOrValue<BytesLike>,
      _fromChain: PromiseOrValue<BigNumberish>,
      _l2Hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processedRootMessages(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propagate(
      _connectors: PromiseOrValue<string>[],
      _messageFees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      _relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    propagateCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    propagateKeep3r(
      _connectors: PromiseOrValue<string>[],
      _messageFees: PromiseOrValue<BigNumberish>[],
      _encodedData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    propagateWorkable(
      domains: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeAggregateRoot(
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeAggregateRootCooldown(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeAggregateRootOnRoot(
      _snapshotId: PromiseOrValue<BigNumberish>,
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _snapshotsRoots: PromiseOrValue<BytesLike>[],
      _domains: PromiseOrValue<BigNumberish>[],
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeAggregateRootOnRootKeep3r(
      _snapshotId: PromiseOrValue<BigNumberish>,
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _snapshotsRoots: PromiseOrValue<BytesLike>[],
      _domains: PromiseOrValue<BigNumberish>[],
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeNewOwner(
      newlyProposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proveAndProcess(
      _proofs: ISpokeConnector.ProofStruct[],
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _aggregatePath: PromiseOrValue<BytesLike>[],
      _aggregateIndex: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounced(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rootManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    send(
      _encodedData: PromiseOrValue<BytesLike>,
      _messageFee: PromiseOrValue<BigNumberish>,
      _relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendRootToHubSpoke(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAutonolas(
      _autonolas: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAutonolasPriority(
      _function: PromiseOrValue<BigNumberish>,
      _autonolasPriority: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConnext(
      _connext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFinalizeCooldown(
      _finalizeCooldown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGelatoRelayer(
      _gelatoRelayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHubConnector(
      _hubConnector: PromiseOrValue<string>,
      _chain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeep3r(
      _keep3r: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPropagateCooldown(
      _propagateCooldown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProposeAggregateRootCooldown(
      _proposeCooldown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRootManager(
      _rootManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpokeConnector(
      _spokeConnector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spokeConnector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
