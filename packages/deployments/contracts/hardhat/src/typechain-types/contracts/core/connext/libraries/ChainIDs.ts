/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ChainIDsInterface extends utils.Interface {
  functions: {
    "ARBITRUM_GOERLI()": FunctionFragment;
    "ARBITRUM_ONE()": FunctionFragment;
    "BNB()": FunctionFragment;
    "GNOSIS()": FunctionFragment;
    "GNOSIS_CHIADO()": FunctionFragment;
    "GOERLI()": FunctionFragment;
    "LINEA()": FunctionFragment;
    "LINEA_TEST()": FunctionFragment;
    "MAINNET()": FunctionFragment;
    "MUMBAI()": FunctionFragment;
    "OPTIMISM()": FunctionFragment;
    "OPTIMISM_GOERLI()": FunctionFragment;
    "POLYGON_POS()": FunctionFragment;
    "POLYGON_ZKEVM()": FunctionFragment;
    "POLYGON_ZKEVM_TEST()": FunctionFragment;
    "ZKSYNC()": FunctionFragment;
    "ZKSYNC_TEST()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ARBITRUM_GOERLI"
      | "ARBITRUM_ONE"
      | "BNB"
      | "GNOSIS"
      | "GNOSIS_CHIADO"
      | "GOERLI"
      | "LINEA"
      | "LINEA_TEST"
      | "MAINNET"
      | "MUMBAI"
      | "OPTIMISM"
      | "OPTIMISM_GOERLI"
      | "POLYGON_POS"
      | "POLYGON_ZKEVM"
      | "POLYGON_ZKEVM_TEST"
      | "ZKSYNC"
      | "ZKSYNC_TEST"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ARBITRUM_GOERLI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ARBITRUM_ONE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BNB", values?: undefined): string;
  encodeFunctionData(functionFragment: "GNOSIS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GNOSIS_CHIADO",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GOERLI", values?: undefined): string;
  encodeFunctionData(functionFragment: "LINEA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LINEA_TEST",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAINNET", values?: undefined): string;
  encodeFunctionData(functionFragment: "MUMBAI", values?: undefined): string;
  encodeFunctionData(functionFragment: "OPTIMISM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "OPTIMISM_GOERLI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POLYGON_POS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POLYGON_ZKEVM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POLYGON_ZKEVM_TEST",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ZKSYNC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ZKSYNC_TEST",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ARBITRUM_GOERLI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ARBITRUM_ONE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BNB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GNOSIS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GNOSIS_CHIADO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GOERLI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LINEA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LINEA_TEST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAINNET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MUMBAI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OPTIMISM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OPTIMISM_GOERLI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POLYGON_POS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POLYGON_ZKEVM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POLYGON_ZKEVM_TEST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ZKSYNC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ZKSYNC_TEST",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ChainIDs extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChainIDsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ARBITRUM_GOERLI(overrides?: CallOverrides): Promise<[number]>;

    ARBITRUM_ONE(overrides?: CallOverrides): Promise<[number]>;

    BNB(overrides?: CallOverrides): Promise<[number]>;

    GNOSIS(overrides?: CallOverrides): Promise<[number]>;

    GNOSIS_CHIADO(overrides?: CallOverrides): Promise<[number]>;

    GOERLI(overrides?: CallOverrides): Promise<[number]>;

    LINEA(overrides?: CallOverrides): Promise<[number]>;

    LINEA_TEST(overrides?: CallOverrides): Promise<[number]>;

    MAINNET(overrides?: CallOverrides): Promise<[number]>;

    MUMBAI(overrides?: CallOverrides): Promise<[number]>;

    OPTIMISM(overrides?: CallOverrides): Promise<[number]>;

    OPTIMISM_GOERLI(overrides?: CallOverrides): Promise<[number]>;

    POLYGON_POS(overrides?: CallOverrides): Promise<[number]>;

    POLYGON_ZKEVM(overrides?: CallOverrides): Promise<[number]>;

    POLYGON_ZKEVM_TEST(overrides?: CallOverrides): Promise<[number]>;

    ZKSYNC(overrides?: CallOverrides): Promise<[number]>;

    ZKSYNC_TEST(overrides?: CallOverrides): Promise<[number]>;
  };

  ARBITRUM_GOERLI(overrides?: CallOverrides): Promise<number>;

  ARBITRUM_ONE(overrides?: CallOverrides): Promise<number>;

  BNB(overrides?: CallOverrides): Promise<number>;

  GNOSIS(overrides?: CallOverrides): Promise<number>;

  GNOSIS_CHIADO(overrides?: CallOverrides): Promise<number>;

  GOERLI(overrides?: CallOverrides): Promise<number>;

  LINEA(overrides?: CallOverrides): Promise<number>;

  LINEA_TEST(overrides?: CallOverrides): Promise<number>;

  MAINNET(overrides?: CallOverrides): Promise<number>;

  MUMBAI(overrides?: CallOverrides): Promise<number>;

  OPTIMISM(overrides?: CallOverrides): Promise<number>;

  OPTIMISM_GOERLI(overrides?: CallOverrides): Promise<number>;

  POLYGON_POS(overrides?: CallOverrides): Promise<number>;

  POLYGON_ZKEVM(overrides?: CallOverrides): Promise<number>;

  POLYGON_ZKEVM_TEST(overrides?: CallOverrides): Promise<number>;

  ZKSYNC(overrides?: CallOverrides): Promise<number>;

  ZKSYNC_TEST(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    ARBITRUM_GOERLI(overrides?: CallOverrides): Promise<number>;

    ARBITRUM_ONE(overrides?: CallOverrides): Promise<number>;

    BNB(overrides?: CallOverrides): Promise<number>;

    GNOSIS(overrides?: CallOverrides): Promise<number>;

    GNOSIS_CHIADO(overrides?: CallOverrides): Promise<number>;

    GOERLI(overrides?: CallOverrides): Promise<number>;

    LINEA(overrides?: CallOverrides): Promise<number>;

    LINEA_TEST(overrides?: CallOverrides): Promise<number>;

    MAINNET(overrides?: CallOverrides): Promise<number>;

    MUMBAI(overrides?: CallOverrides): Promise<number>;

    OPTIMISM(overrides?: CallOverrides): Promise<number>;

    OPTIMISM_GOERLI(overrides?: CallOverrides): Promise<number>;

    POLYGON_POS(overrides?: CallOverrides): Promise<number>;

    POLYGON_ZKEVM(overrides?: CallOverrides): Promise<number>;

    POLYGON_ZKEVM_TEST(overrides?: CallOverrides): Promise<number>;

    ZKSYNC(overrides?: CallOverrides): Promise<number>;

    ZKSYNC_TEST(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    ARBITRUM_GOERLI(overrides?: CallOverrides): Promise<BigNumber>;

    ARBITRUM_ONE(overrides?: CallOverrides): Promise<BigNumber>;

    BNB(overrides?: CallOverrides): Promise<BigNumber>;

    GNOSIS(overrides?: CallOverrides): Promise<BigNumber>;

    GNOSIS_CHIADO(overrides?: CallOverrides): Promise<BigNumber>;

    GOERLI(overrides?: CallOverrides): Promise<BigNumber>;

    LINEA(overrides?: CallOverrides): Promise<BigNumber>;

    LINEA_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    MAINNET(overrides?: CallOverrides): Promise<BigNumber>;

    MUMBAI(overrides?: CallOverrides): Promise<BigNumber>;

    OPTIMISM(overrides?: CallOverrides): Promise<BigNumber>;

    OPTIMISM_GOERLI(overrides?: CallOverrides): Promise<BigNumber>;

    POLYGON_POS(overrides?: CallOverrides): Promise<BigNumber>;

    POLYGON_ZKEVM(overrides?: CallOverrides): Promise<BigNumber>;

    POLYGON_ZKEVM_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    ZKSYNC(overrides?: CallOverrides): Promise<BigNumber>;

    ZKSYNC_TEST(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ARBITRUM_GOERLI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ARBITRUM_ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BNB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GNOSIS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GNOSIS_CHIADO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GOERLI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LINEA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LINEA_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAINNET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MUMBAI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPTIMISM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPTIMISM_GOERLI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POLYGON_POS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POLYGON_ZKEVM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POLYGON_ZKEVM_TEST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ZKSYNC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZKSYNC_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
