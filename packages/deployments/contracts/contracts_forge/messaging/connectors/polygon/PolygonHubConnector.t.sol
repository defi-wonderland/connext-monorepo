// SPDX-License-Identifier: MIT OR Apache-2.0
pragma solidity 0.8.17;

import "@openzeppelin/contracts/crosschain/errors.sol";

import {IRootManager} from "../../../../contracts/messaging/interfaces/IRootManager.sol";

import {IFxStateSender, ICheckpointManager} from "../../../../contracts/messaging/connectors/polygon/tunnel/FxBaseRootTunnel.sol";
import {PolygonHubConnector} from "../../../../contracts/messaging/connectors/polygon/PolygonHubConnector.sol";
import {RLPReader} from "../../../../contracts/messaging/connectors/polygon/lib/RLPReader.sol";
import {TypeCasts} from "../../../../contracts/shared/libraries/TypeCasts.sol";

import "../../../utils/ConnectorHelper.sol";
import "../../../utils/Mock.sol";

contract ICheckpointManagerTest is ICheckpointManager {
  function setHeaderBlocks(uint256 key, HeaderBlock memory value) public {
    headerBlocks[key] = value;
  }
}

contract PolygonHubConnectorTarget is PolygonHubConnector {
  constructor(
    uint32 _domain,
    uint32 _mirrorDomain,
    address _amb,
    address _rootManager,
    address _mirrorConnector,
    address _checkPointManager
  ) PolygonHubConnector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector, _checkPointManager) {}

  function markAsProcessed(bytes32 _root) public {
    processedMessageRoots[_root] = true;
  }
}

library SampleTransaction {
  // this transaction is a spoke -> hub connector with a root:
  // https://etherscan.io/tx/0x7591fc43602f8f5916ee535d44ed0f14fdff441c8e2f85e8fe37e18ead7b6e66

  // root: 0xf13ac1d04c41ca8349344610c9a148a7d1a29be208282d5e98e56dfa99b38fdb
  bytes32 public constant root = 0xf13ac1d04c41ca8349344610c9a148a7d1a29be208282d5e98e56dfa99b38fdb;

  // RLP encoded data from above tx
  bytes public constant data =
    hex"";

  bytes32 public constant headerRoot = 0xf1cc830a1abe74ed7eefc77489dd2ed6adee9ad08c8fd8c98449b65f3bdd808e;
  uint256 public constant startBlock = 50861222;
  uint256 public constant end = 50863525;
  uint256 public constant createdAt = 1701982919;
  address public constant proposer = address(0x67B94473D81D0cd00849D563C94d0432Ac988B49);
  uint256 public constant headerBlock = 546670000;
}

contract PolygonHubConnectorTest is ConnectorHelper {
  address _checkPointManager;

  function setUp() public {
    _l1Domain = 6648936;
    _l2Domain = 1886350457;
    _checkPointManager = address(new ICheckpointManagerTest());
    _l2Connector = payable(address(0x96fDDc1A6FBDb232e9adA1fFc1026799F85128e9));
    // deploy
    _l1Connector = payable(
      address(new PolygonHubConnectorTarget(_l1Domain, _l2Domain, _amb, _rootManager, _l2Connector, _checkPointManager))
    );
  }

  // ============ Utils ============
  function utils_setHubConnectorProcessMocks(address _sender) public {
    // 3. call to root manager
    vm.mockCall(_rootManager, abi.encodeWithSelector(IRootManager.aggregate.selector), abi.encode(true));
  }

  // ============ PolygonHubConnector.setFxChildTunnel ============

  function test_PolygonHubConnector__setMirrorConnector_shouldWork() public {
    // redeploy without setting mirror
    _l1Connector = payable(
      address(new PolygonHubConnectorTarget(_l1Domain, _l2Domain, _amb, _rootManager, address(0), _checkPointManager))
    );
    PolygonHubConnector(_l1Connector).setMirrorConnector(_l2Connector);
    assertEq(PolygonHubConnector(_l1Connector).fxChildTunnel(), _l2Connector);
    assertEq(PolygonHubConnector(_l1Connector).mirrorConnector(), _l2Connector);
  }

  function test_PolygonHubConnector__setFxChildTunnel_failedIfAlreadySet() public {
    _l2Connector = payable(address(2));
    vm.expectRevert(bytes("FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET"));

    PolygonHubConnector(_l1Connector).setMirrorConnector(_l2Connector);
  }

  // ============ PolygonHubConnector.sendMessage ============
  function test_PolygonHubConnector__sendMessage_works() public {
    // setup mock
    vm.mockCall(_amb, abi.encodeWithSelector(IFxStateSender.sendMessageToChild.selector), abi.encode(123));

    // data
    bytes memory _data = abi.encode(123123123);

    // should emit an event
    vm.expectEmit(true, true, true, true);
    emit MessageSent(_data, bytes(""), _rootManager);

    // should call send contract transaction
    vm.expectCall(_amb, abi.encodeWithSelector(IFxStateSender.sendMessageToChild.selector, _l2Connector, _data));

    vm.prank(_rootManager);
    PolygonHubConnector(_l1Connector).sendMessage(_data, bytes(""));
  }

  function test_PolygonHubConnector__sendMessage_works_fuzz(bytes32 data) public {
    // setup mock
    vm.mockCall(_amb, abi.encodeWithSelector(IFxStateSender.sendMessageToChild.selector), abi.encode(123));

    // data
    bytes memory _data = abi.encode(data);

    // should emit an event
    vm.expectEmit(true, true, true, true);
    emit MessageSent(_data, bytes(""), _rootManager);

    // should call send contract transaction
    vm.expectCall(_amb, abi.encodeWithSelector(IFxStateSender.sendMessageToChild.selector, _l2Connector, _data));

    vm.prank(_rootManager);
    PolygonHubConnector(_l1Connector).sendMessage(_data, bytes(""));
  }

  // ============ PolygonHubConnector.receiveMessage ============
  function test_PolygonHubConnector__receiveMessage_works() public {
    // RLP encoded data from sample tx
    ICheckpointManagerTest(_checkPointManager).setHeaderBlocks(
      SampleTransaction.headerBlock,
      ICheckpointManager.HeaderBlock(
        SampleTransaction.headerRoot,
        SampleTransaction.startBlock,
        SampleTransaction.end,
        SampleTransaction.createdAt,
        SampleTransaction.proposer
      )
    );

    vm.mockCall(
      _rootManager,
      abi.encodeWithSelector(IRootManager.aggregate.selector, _l2Domain, SampleTransaction.root),
      abi.encode(true)
    );

    vm.expectCall(
      _rootManager,
      abi.encodeWithSelector(IRootManager.aggregate.selector, _l2Domain, SampleTransaction.root)
    );

    vm.expectEmit();
    emit MessageProcessed(abi.encode(SampleTransaction.root), address(this));

    // Call receiveMessage
    PolygonHubConnector(_l1Connector).receiveMessage(SampleTransaction.data);
  }

  function test_PolygonHubConnector__receiveMessage_failsOnDuplicate() public {
    PolygonHubConnectorTarget(_l1Connector).markAsProcessed(SampleTransaction.root);

    ICheckpointManagerTest(_checkPointManager).setHeaderBlocks(
      SampleTransaction.headerBlock,
      ICheckpointManager.HeaderBlock(
        SampleTransaction.headerRoot,
        SampleTransaction.startBlock,
        SampleTransaction.end,
        SampleTransaction.createdAt,
        SampleTransaction.proposer
      )
    );

    vm.expectRevert("message root already processed");
    // Call receiveMessage
    PolygonHubConnector(_l1Connector).receiveMessage(SampleTransaction.data);
  }
}
