/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface BaseManagerInterface extends utils.Interface {
  functions: {
    "acceptanceDelay()": FunctionFragment;
    "approvedRelayers(address)": FunctionFragment;
    "approvedSequencers(address)": FunctionFragment;
    "assetCanonicalIds(address)": FunctionFragment;
    "assetIdToTickerHash(address)": FunctionFragment;
    "domain()": FunctionFragment;
    "initialized()": FunctionFragment;
    "maxRoutersPerTransfer()": FunctionFragment;
    "nextAssetToTickerHash(address)": FunctionFragment;
    "nonce()": FunctionFragment;
    "owner()": FunctionFragment;
    "proposed()": FunctionFragment;
    "proposedOwnershipTimestamp()": FunctionFragment;
    "receiveLocalOverride(bytes32)": FunctionFragment;
    "relayerFeeVault()": FunctionFragment;
    "remotes(uint32)": FunctionFragment;
    "roles(address)": FunctionFragment;
    "routedTransfers(bytes32,uint256)": FunctionFragment;
    "routerAllowlistRemoved()": FunctionFragment;
    "routerAllowlistTimestamp()": FunctionFragment;
    "routerBalances(address,address)": FunctionFragment;
    "routerConfigs(address)": FunctionFragment;
    "routerCredits(address,address)": FunctionFragment;
    "settlementStrategies(bytes32,bytes)": FunctionFragment;
    "supportedAssetDomains(bytes32,uint32)": FunctionFragment;
    "tickerHashToAssetId(bytes32)": FunctionFragment;
    "tickerHashToNextAsset(bytes32)": FunctionFragment;
    "tokenConfigs(bytes32)": FunctionFragment;
    "transferStatus(bytes32)": FunctionFragment;
    "unclaimedAssets(address)": FunctionFragment;
    "xAppConnectionManager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptanceDelay"
      | "approvedRelayers"
      | "approvedSequencers"
      | "assetCanonicalIds"
      | "assetIdToTickerHash"
      | "domain"
      | "initialized"
      | "maxRoutersPerTransfer"
      | "nextAssetToTickerHash"
      | "nonce"
      | "owner"
      | "proposed"
      | "proposedOwnershipTimestamp"
      | "receiveLocalOverride"
      | "relayerFeeVault"
      | "remotes"
      | "roles"
      | "routedTransfers"
      | "routerAllowlistRemoved"
      | "routerAllowlistTimestamp"
      | "routerBalances"
      | "routerConfigs"
      | "routerCredits"
      | "settlementStrategies"
      | "supportedAssetDomains"
      | "tickerHashToAssetId"
      | "tickerHashToNextAsset"
      | "tokenConfigs"
      | "transferStatus"
      | "unclaimedAssets"
      | "xAppConnectionManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptanceDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvedRelayers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedSequencers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetCanonicalIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetIdToTickerHash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "domain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRoutersPerTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextAssetToTickerHash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "proposed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposedOwnershipTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveLocalOverride",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerFeeVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remotes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "roles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "routedTransfers",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "routerAllowlistRemoved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerAllowlistTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerBalances",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "routerConfigs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "routerCredits",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementStrategies",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAssetDomains",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tickerHashToAssetId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tickerHashToNextAsset",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenConfigs",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferStatus",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimedAssets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "xAppConnectionManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptanceDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedSequencers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetCanonicalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetIdToTickerHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "domain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRoutersPerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextAssetToTickerHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposedOwnershipTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveLocalOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerFeeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "routedTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerAllowlistRemoved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerAllowlistTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedAssetDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickerHashToAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickerHashToNextAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unclaimedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xAppConnectionManager",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BaseManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BaseManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptanceDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    approvedRelayers(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _approved: boolean }>;

    approvedSequencers(
      _sequencer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _approved: boolean }>;

    assetCanonicalIds(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { _canonicalId: string }>;

    assetIdToTickerHash(
      _assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { _tickerHash: string }>;

    domain(overrides?: CallOverrides): Promise<[number]>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    maxRoutersPerTransfer(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextAssetToTickerHash(
      _nextAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { _tickerHash: string }>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposed(overrides?: CallOverrides): Promise<[string]>;

    proposedOwnershipTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    receiveLocalOverride(
      _transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _receives: boolean }>;

    relayerFeeVault(overrides?: CallOverrides): Promise<[string]>;

    remotes(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _router: string }>;

    roles(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number] & { _role: number }>;

    routedTransfers(
      _transferId: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _routers: string }>;

    routerAllowlistRemoved(overrides?: CallOverrides): Promise<[boolean]>;

    routerAllowlistTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    routerBalances(
      _router: PromiseOrValue<string>,
      _assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    routerConfigs(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, string, string, string, BigNumber] & {
        approved: boolean;
        portalApproved: boolean;
        owner: string;
        recipient: string;
        proposed: string;
        proposedTimestamp: BigNumber;
      }
    >;

    routerCredits(
      _assetId: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    settlementStrategies(
      _tickerHash: PromiseOrValue<BytesLike>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { _strategy: string }>;

    supportedAssetDomains(
      _tickerHash: PromiseOrValue<BytesLike>,
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _supported: boolean }>;

    tickerHashToAssetId(
      _tickerHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { _assetId: string }>;

    tickerHashToNextAsset(
      _tickerHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { _nextAsset: string }>;

    tokenConfigs(
      _canonicalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        number,
        string,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        representation: string;
        representationDecimals: number;
        adopted: string;
        adoptedDecimals: number;
        adoptedToLocalExternalPools: string;
        approval: boolean;
        cap: BigNumber;
        custodied: BigNumber;
      }
    >;

    transferStatus(
      _domain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number] & { _status: number }>;

    unclaimedAssets(
      _assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    xAppConnectionManager(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptanceDelay(overrides?: CallOverrides): Promise<BigNumber>;

  approvedRelayers(
    _relayer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approvedSequencers(
    _sequencer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  assetCanonicalIds(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  assetIdToTickerHash(
    _assetId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  domain(overrides?: CallOverrides): Promise<number>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  maxRoutersPerTransfer(overrides?: CallOverrides): Promise<BigNumber>;

  nextAssetToTickerHash(
    _nextAsset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposed(overrides?: CallOverrides): Promise<string>;

  proposedOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  receiveLocalOverride(
    _transferId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  relayerFeeVault(overrides?: CallOverrides): Promise<string>;

  remotes(
    _domain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  roles(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  routedTransfers(
    _transferId: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  routerAllowlistRemoved(overrides?: CallOverrides): Promise<boolean>;

  routerAllowlistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  routerBalances(
    _router: PromiseOrValue<string>,
    _assetId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  routerConfigs(
    _router: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, string, string, string, BigNumber] & {
      approved: boolean;
      portalApproved: boolean;
      owner: string;
      recipient: string;
      proposed: string;
      proposedTimestamp: BigNumber;
    }
  >;

  routerCredits(
    _assetId: PromiseOrValue<string>,
    _router: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  settlementStrategies(
    _tickerHash: PromiseOrValue<BytesLike>,
    _path: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  supportedAssetDomains(
    _tickerHash: PromiseOrValue<BytesLike>,
    _domain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tickerHashToAssetId(
    _tickerHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  tickerHashToNextAsset(
    _tickerHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenConfigs(
    _canonicalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, string, number, string, boolean, BigNumber, BigNumber] & {
      representation: string;
      representationDecimals: number;
      adopted: string;
      adoptedDecimals: number;
      adoptedToLocalExternalPools: string;
      approval: boolean;
      cap: BigNumber;
      custodied: BigNumber;
    }
  >;

  transferStatus(
    _domain: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  unclaimedAssets(
    _assetId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  xAppConnectionManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptanceDelay(overrides?: CallOverrides): Promise<BigNumber>;

    approvedRelayers(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approvedSequencers(
      _sequencer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetCanonicalIds(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    assetIdToTickerHash(
      _assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    domain(overrides?: CallOverrides): Promise<number>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    maxRoutersPerTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    nextAssetToTickerHash(
      _nextAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposed(overrides?: CallOverrides): Promise<string>;

    proposedOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    receiveLocalOverride(
      _transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    relayerFeeVault(overrides?: CallOverrides): Promise<string>;

    remotes(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    roles(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    routedTransfers(
      _transferId: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    routerAllowlistRemoved(overrides?: CallOverrides): Promise<boolean>;

    routerAllowlistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    routerBalances(
      _router: PromiseOrValue<string>,
      _assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerConfigs(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, string, string, string, BigNumber] & {
        approved: boolean;
        portalApproved: boolean;
        owner: string;
        recipient: string;
        proposed: string;
        proposedTimestamp: BigNumber;
      }
    >;

    routerCredits(
      _assetId: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settlementStrategies(
      _tickerHash: PromiseOrValue<BytesLike>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    supportedAssetDomains(
      _tickerHash: PromiseOrValue<BytesLike>,
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tickerHashToAssetId(
      _tickerHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    tickerHashToNextAsset(
      _tickerHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenConfigs(
      _canonicalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        number,
        string,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        representation: string;
        representationDecimals: number;
        adopted: string;
        adoptedDecimals: number;
        adoptedToLocalExternalPools: string;
        approval: boolean;
        cap: BigNumber;
        custodied: BigNumber;
      }
    >;

    transferStatus(
      _domain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    unclaimedAssets(
      _assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xAppConnectionManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    acceptanceDelay(overrides?: CallOverrides): Promise<BigNumber>;

    approvedRelayers(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedSequencers(
      _sequencer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetCanonicalIds(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetIdToTickerHash(
      _assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domain(overrides?: CallOverrides): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    maxRoutersPerTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    nextAssetToTickerHash(
      _nextAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposed(overrides?: CallOverrides): Promise<BigNumber>;

    proposedOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    receiveLocalOverride(
      _transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relayerFeeVault(overrides?: CallOverrides): Promise<BigNumber>;

    remotes(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roles(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routedTransfers(
      _transferId: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerAllowlistRemoved(overrides?: CallOverrides): Promise<BigNumber>;

    routerAllowlistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    routerBalances(
      _router: PromiseOrValue<string>,
      _assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerConfigs(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerCredits(
      _assetId: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settlementStrategies(
      _tickerHash: PromiseOrValue<BytesLike>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedAssetDomains(
      _tickerHash: PromiseOrValue<BytesLike>,
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tickerHashToAssetId(
      _tickerHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tickerHashToNextAsset(
      _tickerHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenConfigs(
      _canonicalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferStatus(
      _domain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unclaimedAssets(
      _assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xAppConnectionManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptanceDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approvedRelayers(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedSequencers(
      _sequencer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetCanonicalIds(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetIdToTickerHash(
      _assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRoutersPerTransfer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextAssetToTickerHash(
      _nextAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedOwnershipTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveLocalOverride(
      _transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayerFeeVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remotes(
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roles(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routedTransfers(
      _transferId: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerAllowlistRemoved(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerAllowlistTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerBalances(
      _router: PromiseOrValue<string>,
      _assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerConfigs(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerCredits(
      _assetId: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settlementStrategies(
      _tickerHash: PromiseOrValue<BytesLike>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedAssetDomains(
      _tickerHash: PromiseOrValue<BytesLike>,
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tickerHashToAssetId(
      _tickerHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tickerHashToNextAsset(
      _tickerHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenConfigs(
      _canonicalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferStatus(
      _domain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unclaimedAssets(
      _assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xAppConnectionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
