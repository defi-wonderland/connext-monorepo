/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type TokenIdStruct = {
  domain: PromiseOrValue<BigNumberish>;
  id: PromiseOrValue<BytesLike>;
};

export type TokenIdStructOutput = [number, string] & {
  domain: number;
  id: string;
};

export interface AssetsManagerInterface extends utils.Interface {
  functions: {
    "approvedAssets(bytes32)": FunctionFragment;
    "approvedAssets((uint32,bytes32))": FunctionFragment;
    "delay()": FunctionFragment;
    "getCustodiedAmount(bytes32)": FunctionFragment;
    "handle(uint32,uint32,bytes32,bytes)": FunctionFragment;
    "removeAssetId((uint32,bytes32),address,address)": FunctionFragment;
    "removeAssetId(bytes32,address,address)": FunctionFragment;
    "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)": FunctionFragment;
    "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)": FunctionFragment;
    "updateDetails((uint32,bytes32),string,string)": FunctionFragment;
    "updateLiquidityCap((uint32,bytes32),uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approvedAssets(bytes32)"
      | "approvedAssets((uint32,bytes32))"
      | "delay"
      | "getCustodiedAmount"
      | "handle"
      | "removeAssetId((uint32,bytes32),address,address)"
      | "removeAssetId(bytes32,address,address)"
      | "setupAsset"
      | "setupAssetWithDeployedRepresentation"
      | "updateDetails"
      | "updateLiquidityCap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approvedAssets(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedAssets((uint32,bytes32))",
    values: [TokenIdStruct]
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCustodiedAmount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "handle",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetId((uint32,bytes32),address,address)",
    values: [TokenIdStruct, PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetId(bytes32,address,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setupAsset",
    values: [
      TokenIdStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setupAssetWithDeployedRepresentation",
    values: [
      TokenIdStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDetails",
    values: [TokenIdStruct, PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidityCap",
    values: [TokenIdStruct, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approvedAssets(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedAssets((uint32,bytes32))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCustodiedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetId((uint32,bytes32),address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetId(bytes32,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setupAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setupAssetWithDeployedRepresentation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidityCap",
    data: BytesLike
  ): Result;

  events: {
    "AssetAdded(bytes32,bytes32,uint32,address,address,address)": EventFragment;
    "AssetRemoved(bytes32,address)": EventFragment;
    "LiquidityCapUpdated(bytes32,bytes32,uint32,uint256,address)": EventFragment;
    "Receive(uint64,address,address,address,uint256)": EventFragment;
    "Reconciled(bytes32,uint32,address,address[],uint256,address)": EventFragment;
    "TokenDeployed(uint32,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityCapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Receive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reconciled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDeployed"): EventFragment;
}

export interface AssetAddedEventObject {
  key: string;
  canonicalId: string;
  domain: number;
  adoptedAsset: string;
  localAsset: string;
  caller: string;
}
export type AssetAddedEvent = TypedEvent<
  [string, string, number, string, string, string],
  AssetAddedEventObject
>;

export type AssetAddedEventFilter = TypedEventFilter<AssetAddedEvent>;

export interface AssetRemovedEventObject {
  key: string;
  caller: string;
}
export type AssetRemovedEvent = TypedEvent<
  [string, string],
  AssetRemovedEventObject
>;

export type AssetRemovedEventFilter = TypedEventFilter<AssetRemovedEvent>;

export interface LiquidityCapUpdatedEventObject {
  key: string;
  canonicalId: string;
  domain: number;
  cap: BigNumber;
  caller: string;
}
export type LiquidityCapUpdatedEvent = TypedEvent<
  [string, string, number, BigNumber, string],
  LiquidityCapUpdatedEventObject
>;

export type LiquidityCapUpdatedEventFilter =
  TypedEventFilter<LiquidityCapUpdatedEvent>;

export interface ReceiveEventObject {
  originAndNonce: BigNumber;
  token: string;
  recipient: string;
  liquidityProvider: string;
  amount: BigNumber;
}
export type ReceiveEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber],
  ReceiveEventObject
>;

export type ReceiveEventFilter = TypedEventFilter<ReceiveEvent>;

export interface ReconciledEventObject {
  transferId: string;
  originDomain: number;
  local: string;
  routers: string[];
  amount: BigNumber;
  caller: string;
}
export type ReconciledEvent = TypedEvent<
  [string, number, string, string[], BigNumber, string],
  ReconciledEventObject
>;

export type ReconciledEventFilter = TypedEventFilter<ReconciledEvent>;

export interface TokenDeployedEventObject {
  domain: number;
  id: string;
  representation: string;
}
export type TokenDeployedEvent = TypedEvent<
  [number, string, string],
  TokenDeployedEventObject
>;

export type TokenDeployedEventFilter = TypedEventFilter<TokenDeployedEvent>;

export interface AssetsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AssetsManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "approvedAssets(bytes32)"(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "approvedAssets((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCustodiedAmount(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    handle(
      _origin: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeAssetId((uint32,bytes32),address,address)"(
      _canonical: TokenIdStruct,
      _adoptedAssetId: PromiseOrValue<string>,
      _representation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeAssetId(bytes32,address,address)"(
      _key: PromiseOrValue<BytesLike>,
      _adoptedAssetId: PromiseOrValue<string>,
      _representation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setupAsset(
      _canonical: TokenIdStruct,
      _canonicalDecimals: PromiseOrValue<BigNumberish>,
      _representationName: PromiseOrValue<string>,
      _representationSymbol: PromiseOrValue<string>,
      _adoptedAssetId: PromiseOrValue<string>,
      _stableSwapPool: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setupAssetWithDeployedRepresentation(
      _canonical: TokenIdStruct,
      _representation: PromiseOrValue<string>,
      _adoptedAssetId: PromiseOrValue<string>,
      _stableSwapPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDetails(
      _canonical: TokenIdStruct,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateLiquidityCap(
      _canonical: TokenIdStruct,
      _updated: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  "approvedAssets(bytes32)"(
    _key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "approvedAssets((uint32,bytes32))"(
    _canonical: TokenIdStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  getCustodiedAmount(
    _key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  handle(
    _origin: PromiseOrValue<BigNumberish>,
    _nonce: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<BytesLike>,
    _message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeAssetId((uint32,bytes32),address,address)"(
    _canonical: TokenIdStruct,
    _adoptedAssetId: PromiseOrValue<string>,
    _representation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeAssetId(bytes32,address,address)"(
    _key: PromiseOrValue<BytesLike>,
    _adoptedAssetId: PromiseOrValue<string>,
    _representation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setupAsset(
    _canonical: TokenIdStruct,
    _canonicalDecimals: PromiseOrValue<BigNumberish>,
    _representationName: PromiseOrValue<string>,
    _representationSymbol: PromiseOrValue<string>,
    _adoptedAssetId: PromiseOrValue<string>,
    _stableSwapPool: PromiseOrValue<string>,
    _cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setupAssetWithDeployedRepresentation(
    _canonical: TokenIdStruct,
    _representation: PromiseOrValue<string>,
    _adoptedAssetId: PromiseOrValue<string>,
    _stableSwapPool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDetails(
    _canonical: TokenIdStruct,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateLiquidityCap(
    _canonical: TokenIdStruct,
    _updated: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "approvedAssets(bytes32)"(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approvedAssets((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    getCustodiedAmount(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handle(
      _origin: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAssetId((uint32,bytes32),address,address)"(
      _canonical: TokenIdStruct,
      _adoptedAssetId: PromiseOrValue<string>,
      _representation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAssetId(bytes32,address,address)"(
      _key: PromiseOrValue<BytesLike>,
      _adoptedAssetId: PromiseOrValue<string>,
      _representation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setupAsset(
      _canonical: TokenIdStruct,
      _canonicalDecimals: PromiseOrValue<BigNumberish>,
      _representationName: PromiseOrValue<string>,
      _representationSymbol: PromiseOrValue<string>,
      _adoptedAssetId: PromiseOrValue<string>,
      _stableSwapPool: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setupAssetWithDeployedRepresentation(
      _canonical: TokenIdStruct,
      _representation: PromiseOrValue<string>,
      _adoptedAssetId: PromiseOrValue<string>,
      _stableSwapPool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    updateDetails(
      _canonical: TokenIdStruct,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLiquidityCap(
      _canonical: TokenIdStruct,
      _updated: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetAdded(bytes32,bytes32,uint32,address,address,address)"(
      key?: PromiseOrValue<BytesLike> | null,
      canonicalId?: PromiseOrValue<BytesLike> | null,
      domain?: PromiseOrValue<BigNumberish> | null,
      adoptedAsset?: null,
      localAsset?: null,
      caller?: null
    ): AssetAddedEventFilter;
    AssetAdded(
      key?: PromiseOrValue<BytesLike> | null,
      canonicalId?: PromiseOrValue<BytesLike> | null,
      domain?: PromiseOrValue<BigNumberish> | null,
      adoptedAsset?: null,
      localAsset?: null,
      caller?: null
    ): AssetAddedEventFilter;

    "AssetRemoved(bytes32,address)"(
      key?: PromiseOrValue<BytesLike> | null,
      caller?: null
    ): AssetRemovedEventFilter;
    AssetRemoved(
      key?: PromiseOrValue<BytesLike> | null,
      caller?: null
    ): AssetRemovedEventFilter;

    "LiquidityCapUpdated(bytes32,bytes32,uint32,uint256,address)"(
      key?: PromiseOrValue<BytesLike> | null,
      canonicalId?: PromiseOrValue<BytesLike> | null,
      domain?: PromiseOrValue<BigNumberish> | null,
      cap?: null,
      caller?: null
    ): LiquidityCapUpdatedEventFilter;
    LiquidityCapUpdated(
      key?: PromiseOrValue<BytesLike> | null,
      canonicalId?: PromiseOrValue<BytesLike> | null,
      domain?: PromiseOrValue<BigNumberish> | null,
      cap?: null,
      caller?: null
    ): LiquidityCapUpdatedEventFilter;

    "Receive(uint64,address,address,address,uint256)"(
      originAndNonce?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      liquidityProvider?: null,
      amount?: null
    ): ReceiveEventFilter;
    Receive(
      originAndNonce?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      liquidityProvider?: null,
      amount?: null
    ): ReceiveEventFilter;

    "Reconciled(bytes32,uint32,address,address[],uint256,address)"(
      transferId?: PromiseOrValue<BytesLike> | null,
      originDomain?: PromiseOrValue<BigNumberish> | null,
      local?: PromiseOrValue<string> | null,
      routers?: null,
      amount?: null,
      caller?: null
    ): ReconciledEventFilter;
    Reconciled(
      transferId?: PromiseOrValue<BytesLike> | null,
      originDomain?: PromiseOrValue<BigNumberish> | null,
      local?: PromiseOrValue<string> | null,
      routers?: null,
      amount?: null,
      caller?: null
    ): ReconciledEventFilter;

    "TokenDeployed(uint32,bytes32,address)"(
      domain?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BytesLike> | null,
      representation?: PromiseOrValue<string> | null
    ): TokenDeployedEventFilter;
    TokenDeployed(
      domain?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BytesLike> | null,
      representation?: PromiseOrValue<string> | null
    ): TokenDeployedEventFilter;
  };

  estimateGas: {
    "approvedAssets(bytes32)"(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approvedAssets((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    getCustodiedAmount(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handle(
      _origin: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeAssetId((uint32,bytes32),address,address)"(
      _canonical: TokenIdStruct,
      _adoptedAssetId: PromiseOrValue<string>,
      _representation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeAssetId(bytes32,address,address)"(
      _key: PromiseOrValue<BytesLike>,
      _adoptedAssetId: PromiseOrValue<string>,
      _representation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setupAsset(
      _canonical: TokenIdStruct,
      _canonicalDecimals: PromiseOrValue<BigNumberish>,
      _representationName: PromiseOrValue<string>,
      _representationSymbol: PromiseOrValue<string>,
      _adoptedAssetId: PromiseOrValue<string>,
      _stableSwapPool: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setupAssetWithDeployedRepresentation(
      _canonical: TokenIdStruct,
      _representation: PromiseOrValue<string>,
      _adoptedAssetId: PromiseOrValue<string>,
      _stableSwapPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDetails(
      _canonical: TokenIdStruct,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateLiquidityCap(
      _canonical: TokenIdStruct,
      _updated: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "approvedAssets(bytes32)"(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approvedAssets((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCustodiedAmount(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handle(
      _origin: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeAssetId((uint32,bytes32),address,address)"(
      _canonical: TokenIdStruct,
      _adoptedAssetId: PromiseOrValue<string>,
      _representation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeAssetId(bytes32,address,address)"(
      _key: PromiseOrValue<BytesLike>,
      _adoptedAssetId: PromiseOrValue<string>,
      _representation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setupAsset(
      _canonical: TokenIdStruct,
      _canonicalDecimals: PromiseOrValue<BigNumberish>,
      _representationName: PromiseOrValue<string>,
      _representationSymbol: PromiseOrValue<string>,
      _adoptedAssetId: PromiseOrValue<string>,
      _stableSwapPool: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setupAssetWithDeployedRepresentation(
      _canonical: TokenIdStruct,
      _representation: PromiseOrValue<string>,
      _adoptedAssetId: PromiseOrValue<string>,
      _stableSwapPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDetails(
      _canonical: TokenIdStruct,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateLiquidityCap(
      _canonical: TokenIdStruct,
      _updated: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
