[
  "error AssetsManager__addAssetId_alreadyAdded()",
  "error AssetsManager__addAssetId_badBurn()",
  "error AssetsManager__addAssetId_badMint()",
  "error AssetsManager__enrollAdoptedAndLocalAssets_emptyCanonical()",
  "error AssetsManager__handle_notTransfer()",
  "error AssetsManager__onlyRemoteRouter_notRemote()",
  "error AssetsManager__onlyReplica_notReplica()",
  "error AssetsManager__reconcile_alreadyReconciled()",
  "error AssetsManager__reconcile_noPortalRouter()",
  "error AssetsManager__removeAssetId_invalidParams()",
  "error AssetsManager__removeAssetId_notAdded()",
  "error AssetsManager__removeAssetId_remainsCustodied()",
  "error AssetsManager__setLiquidityCap_notCanonicalDomain()",
  "error AssetsManager__setupAssetWithDeployedRepresentation_invalidRepresentation()",
  "error AssetsManager__setupAssetWithDeployedRepresentation_onCanonicalDomain()",
  "error AssetsManager__setupAsset_invalidCanonicalConfiguration()",
  "error AssetsManager__setupAsset_representationListed()",
  "error AssetsManager__updateDetails_localNotFound()",
  "error AssetsManager__updateDetails_notApproved()",
  "error AssetsManager__updateDetails_onlyRemote()",
  "error BaseManager__delayElapsed_delayNotElapsed()",
  "error BaseManager__getConfig_notRegistered()",
  "error BaseManager__handleIncomingAsset_feeOnTransferNotSupported()",
  "error BaseManager__handleIncomingAsset_nativeAssetNotSupported()",
  "error BaseManager__handleOutgoingAsset_notNative()",
  "error BaseManager__nonReentrant_reentrantCall()",
  "error BaseManager__nonXCallReentrant_reentrantCall()",
  "error BaseManager__onlyOwnerOrRole_notOwnerOrRole(uint8 _role)",
  "error BaseManager__onlyOwner_notOwner()",
  "error BaseManager__whenNotPaused_paused()",
  "error Connext__bumpTransfer_noRelayerVault()",
  "error Connext__bumpTransfer_valueIsZero()",
  "error Connext__excecute_insufficientGas()",
  "error Connext__execute_badFastLiquidityStatus()",
  "error Connext__execute_externalCallFailed()",
  "error Connext__execute_invalidRouterSignature()",
  "error Connext__execute_invalidSequencerSignature()",
  "error Connext__execute_maxRoutersExceeded()",
  "error Connext__execute_notReconciled()",
  "error Connext__execute_notSupportedRouter()",
  "error Connext__execute_notSupportedSequencer()",
  "error Connext__execute_unapprovedSender()",
  "error Connext__execute_wrongDomain()",
  "error Connext__forceReceiveLocal_notDestination()",
  "error Connext__forceUpdateSlippage_invalidSlippage()",
  "error Connext__forceUpdateSlippage_notDestination()",
  "error Connext__mustHaveRemote_destinationNotSupported()",
  "error Connext__onlyDelegate_notDelegate()",
  "error Connext__xcall_capReached()",
  "error Connext__xcall_emptyTo()",
  "error Connext__xcall_invalidSlippage()",
  "error Connext__xcall_nativeAssetNotSupported()",
  "error Connext_xcall__emptyLocalAsset()",
  "error ProtocolManager__acceptProposedOwner_noOwnershipChange()",
  "error ProtocolManager__onlyProposed_notProposedOwner()",
  "error ProtocolManager__proposeNewOwner_invalidProposal()",
  "error ProtocolManager__proposeNewOwner_noOwnershipChange()",
  "error ProtocolManager__setLiquidityFeeNumerator_tooLarge()",
  "error ProtocolManager__setLiquidityFeeNumerator_tooSmall()",
  "error ProtocolManager__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer()",
  "error ProtocolManager__setRelayerFeeVault_invalidRelayerFeeVault()",
  "error ProtocolManager__setXAppConnectionManager_domainsDontMatch()",
  "error RolesManager__addRelayer_alreadyApproved()",
  "error RolesManager__addRemote_invalidDomain()",
  "error RolesManager__addRemote_invalidRouter()",
  "error RolesManager__addSequencer_alreadyApproved()",
  "error RolesManager__addSequencer_invalidSequencer()",
  "error RolesManager__assignRole_invalidInput(address _account, uint8 _currentRole, uint8 _newRole)",
  "error RolesManager__proposeAssetAllowlistRemoval_noOwnershipChange()",
  "error RolesManager__proposeRouterAllowlistRemoval_noOwnershipChange()",
  "error RolesManager__removeAssetAllowlist_noOwnershipChange()",
  "error RolesManager__removeAssetAllowlist_noProposal()",
  "error RolesManager__removeRelayer_notApproved()",
  "error RolesManager__removeRouterAllowlist_noOwnershipChange()",
  "error RolesManager__removeRouterAllowlist_noProposal()",
  "error RolesManager__removeSequencer_notApproved()",
  "error RolesManager__revokeRole_invalidInput()",
  "error RoutersManager__acceptProposedRouterOwner_badCaller()",
  "error RoutersManager__acceptProposedRouterOwner_notElapsed()",
  "error RoutersManager__addLiquidityForRouter_amountIsZero()",
  "error RoutersManager__addLiquidityForRouter_badRouter()",
  "error RoutersManager__addLiquidityForRouter_capReached()",
  "error RoutersManager__addLiquidityForRouter_routerEmpty()",
  "error RoutersManager__approveRouter_alreadyAdded()",
  "error RoutersManager__approveRouter_routerEmpty()",
  "error RoutersManager__getApprovedCanonicalId_notAllowlisted()",
  "error RoutersManager__initializeRouter_configNotEmpty()",
  "error RoutersManager__onlyRouterOwner_notRouterOwner()",
  "error RoutersManager__proposeRouterOwner_badRouter()",
  "error RoutersManager__proposeRouterOwner_notNewOwner()",
  "error RoutersManager__removeRouterLiquidityFor_notOwner()",
  "error RoutersManager__removeRouterLiquidity_amountIsZero()",
  "error RoutersManager__removeRouterLiquidity_insufficientFunds()",
  "error RoutersManager__removeRouterLiquidity_recipientEmpty()",
  "error RoutersManager__setRouterOwner_noChange()",
  "error RoutersManager__setRouterRecipient_notNewRecipient()",
  "error RoutersManager__unapproveRouter_notAdded()",
  "error RoutersManager__unapproveRouter_routerEmpty()",
  "error TypedMemView__assertType_typeAssertionFailed(uint256 actual, uint256 expected)",
  "error TypedMemView__assertValid_validityAssertionFailed()",
  "error TypedMemView__index_indexMoreThan32Bytes()",
  "error TypedMemView__index_overrun(uint256 loc, uint256 len, uint256 index, uint256 slice)",
  "event AssetAdded(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, address adoptedAsset, address localAsset, address caller)",
  "event AssetRemoved(bytes32 indexed key, address caller)",
  "event AssignRole(address account, uint8 role)",
  "event Executed(bytes32 indexed transferId, address indexed to, address indexed asset, tuple(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address[] routers, bytes[] routerSignatures, address sequencer, bytes sequencerSignature) args, address local, uint256 amount, address caller)",
  "event ExternalCalldataExecuted(bytes32 indexed transferId, bool success, bytes returnData)",
  "event ForceReceiveLocal(bytes32 indexed transferId)",
  "event LiquidityCapUpdated(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, uint256 cap, address caller)",
  "event MaxRoutersPerTransferUpdated(uint256 maxRoutersPerTransfer, address caller)",
  "event OwnershipProposed(address indexed proposedOwner)",
  "event Paused()",
  "event Receive(uint64 indexed originAndNonce, address indexed token, address indexed recipient, address liquidityProvider, uint256 amount)",
  "event Reconciled(bytes32 indexed transferId, uint32 indexed originDomain, address indexed local, address[] routers, uint256 amount, address caller)",
  "event RelayerAdded(address relayer, address caller)",
  "event RelayerFeeVaultUpdated(address oldVault, address newVault, address caller)",
  "event RelayerRemoved(address relayer, address caller)",
  "event RemoteAdded(uint32 domain, address remote, address caller)",
  "event RevokeRole(address revokedAddress, uint8 revokedRole)",
  "event RouterAdded(address indexed router, address caller)",
  "event RouterAllowlistRemovalProposed(uint256 timestamp)",
  "event RouterAllowlistRemoved(bool renounced)",
  "event RouterInitialized(address indexed router)",
  "event RouterLiquidityAdded(address indexed router, address local, bytes32 key, uint256 amount, address caller)",
  "event RouterLiquidityRemoved(address indexed router, address to, address local, bytes32 key, uint256 amount, address caller)",
  "event RouterOwnerAccepted(address indexed router, address indexed prevOwner, address indexed newOwner)",
  "event RouterOwnerProposed(address indexed router, address indexed prevProposed, address indexed newProposed)",
  "event RouterRecipientSet(address indexed router, address indexed prevRecipient, address indexed newRecipient)",
  "event RouterRemoved(address indexed router, address caller)",
  "event SequencerAdded(address sequencer, address caller)",
  "event SequencerRemoved(address sequencer, address caller)",
  "event SlippageUpdated(bytes32 indexed transferId, uint256 slippage)",
  "event TokenDeployed(uint32 indexed domain, bytes32 indexed id, address indexed representation)",
  "event TransferRelayerFeesIncreased(bytes32 indexed transferId, uint256 increase, address asset, address caller)",
  "event Unpaused()",
  "event XAppConnectionManagerSet(address updated, address caller)",
  "event XCalled(bytes32 indexed transferId, uint256 indexed nonce, bytes32 indexed messageHash, tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address asset, uint256 amount, address local, bytes messageBody)",
  "function acceptProposedOwner()",
  "function acceptProposedRouterOwner(address _router)",
  "function acceptanceDelay() view returns (uint256)",
  "function addRelayer(address _relayer)",
  "function addRouterLiquidity(uint256 _amount, address _local) payable",
  "function addRouterLiquidityFor(uint256 _amount, address _local, address _router) payable",
  "function addSequencer(address _sequencer)",
  "function approveRouter(address _router)",
  "function approvedRelayers(address _relayer) view returns (bool _approved)",
  "function approvedSequencers(address _sequencer) view returns (bool _approved)",
  "function assetCanonicalIds(address _asset) view returns (bytes32 _canonicalId)",
  "function assetIdToTickerHash(address _assetId) view returns (bytes32 _tickerHash)",
  "function assignRole(address _account, uint8 _role)",
  "function bumpTransfer(bytes32 _transferId) payable",
  "function bumpTransfer(bytes32 _transferId, address _relayerFeeAsset, uint256 _relayerFee)",
  "function domain() view returns (uint32)",
  "function enrollRemoteRouter(uint32 _domain, bytes32 _router)",
  "function execute(tuple(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address[] routers, bytes[] routerSignatures, address sequencer, bytes sequencerSignature) _args) returns (bytes32)",
  "function forceReceiveLocal(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params)",
  "function handle(uint32 _origin, uint32 _nonce, bytes32 _sender, bytes _message)",
  "function initializeRouter(address _owner, address _recipient)",
  "function initialized() view returns (bool)",
  "function maxRoutersPerTransfer() view returns (uint256)",
  "function nextAssetToTickerHash(address _nextAsset) view returns (bytes32 _tickerHash)",
  "function nonce() view returns (uint256)",
  "function owner() view returns (address)",
  "function pause()",
  "function proposeNewOwner(address newlyProposed)",
  "function proposeRouterAllowlistRemoval()",
  "function proposeRouterOwner(address _router, address _proposed)",
  "function proposed() view returns (address)",
  "function proposedOwnershipTimestamp() view returns (uint256)",
  "function receiveLocalOverride(bytes32 _transferId) view returns (bool _receives)",
  "function relayerFeeVault() view returns (address)",
  "function remotes(uint32 _domain) view returns (bytes32 _router)",
  "function removeAssetId(tuple(uint32 domain, bytes32 id) _canonical, address _adoptedAssetId, address _representation)",
  "function removeAssetId(bytes32 _key, address _adoptedAssetId, address _representation)",
  "function removeRelayer(address _relayer)",
  "function removeRouterAllowlist()",
  "function removeRouterLiquidity(tuple(uint32 domain, bytes32 id) _canonical, uint256 _amount, address _to)",
  "function removeRouterLiquidityFor(tuple(uint32 domain, bytes32 id) _canonical, uint256 _amount, address _to, address _router)",
  "function removeSequencer(address _sequencer)",
  "function revokeRole(address _revoke)",
  "function roles(address _account) view returns (uint8 _role)",
  "function routedTransfers(bytes32 _transferId, uint256) view returns (address _routers)",
  "function routerAllowlistRemoved() view returns (bool)",
  "function routerAllowlistTimestamp() view returns (uint256)",
  "function routerBalances(address _router, address _assetId) view returns (uint256 _amount)",
  "function routerConfigs(address _router) view returns (bool approved, bool portalApproved, address owner, address recipient, address proposed, uint256 proposedTimestamp)",
  "function routerCredits(address _assetId, address _router) view returns (uint256 _amount)",
  "function setMaxRoutersPerTransfer(uint256 _newMaxRouters)",
  "function setRelayerFeeVault(address _relayerFeeVault)",
  "function setRouterRecipient(address _router, address _recipient)",
  "function setXAppConnectionManager(address _xAppConnectionManager)",
  "function settlementStrategies(bytes32 _tickerHash, bytes _path) view returns (address _strategy)",
  "function setupAsset(tuple(uint32 domain, bytes32 id) _canonical, uint8 _canonicalDecimals, string _representationName, string _representationSymbol, address _adoptedAssetId, address _stableSwapPool, uint256 _cap) returns (address _local)",
  "function setupAssetWithDeployedRepresentation(tuple(uint32 domain, bytes32 id) _canonical, address _representation, address _adoptedAssetId, address _stableSwapPool) returns (address)",
  "function supportedAssetDomains(bytes32 _tickerHash, uint32 _domain) view returns (bool _supported)",
  "function tickerHashToAssetId(bytes32 _tickerHash) view returns (address _assetId)",
  "function tickerHashToNextAsset(bytes32 _tickerHash) view returns (address _nextAsset)",
  "function tokenConfigs(bytes32 _canonicalId) view returns (address representation, uint8 representationDecimals, address adopted, uint8 adoptedDecimals, address adoptedToLocalExternalPools, bool approval, uint256 cap, uint256 custodied)",
  "function transferStatus(bytes32 _domain) view returns (uint8 _status)",
  "function unapproveRouter(address _router)",
  "function unclaimedAssets(address _assetId) view returns (uint256 _amount)",
  "function unpause()",
  "function updateDetails(tuple(uint32 domain, bytes32 id) _canonical, string _name, string _symbol)",
  "function updateLiquidityCap(tuple(uint32 domain, bytes32 id) _canonical, uint256 _updated)",
  "function xAppConnectionManager() view returns (address)",
  "function xcall(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData) payable returns (bytes32)",
  "function xcall(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData, uint256 _relayerFee) returns (bytes32)",
  "function xcallIntoLocal(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData, uint256 _relayerFee) returns (bytes32)",
  "function xcallIntoLocal(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData) payable returns (bytes32)"
]
