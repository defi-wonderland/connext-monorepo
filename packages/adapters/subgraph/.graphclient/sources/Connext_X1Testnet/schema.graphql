schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type x1testnet_AggregateRoot {
  id: ID!
  root: x1testnet_Bytes!
  blockNumber: BigInt!
}

type x1testnet_AggregateRootProposed {
  id: ID!
  aggregateRoot: x1testnet_Bytes!
  rootTimestamp: BigInt!
  endOfDispute: BigInt!
  domain: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt
}

input x1testnet_AggregateRootProposed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: x1testnet_Bytes
  aggregateRoot_not: x1testnet_Bytes
  aggregateRoot_gt: x1testnet_Bytes
  aggregateRoot_lt: x1testnet_Bytes
  aggregateRoot_gte: x1testnet_Bytes
  aggregateRoot_lte: x1testnet_Bytes
  aggregateRoot_in: [x1testnet_Bytes!]
  aggregateRoot_not_in: [x1testnet_Bytes!]
  aggregateRoot_contains: x1testnet_Bytes
  aggregateRoot_not_contains: x1testnet_Bytes
  rootTimestamp: BigInt
  rootTimestamp_not: BigInt
  rootTimestamp_gt: BigInt
  rootTimestamp_lt: BigInt
  rootTimestamp_gte: BigInt
  rootTimestamp_lte: BigInt
  rootTimestamp_in: [BigInt!]
  rootTimestamp_not_in: [BigInt!]
  endOfDispute: BigInt
  endOfDispute_not: BigInt
  endOfDispute_gt: BigInt
  endOfDispute_lt: BigInt
  endOfDispute_gte: BigInt
  endOfDispute_lte: BigInt
  endOfDispute_in: [BigInt!]
  endOfDispute_not_in: [BigInt!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_AggregateRootProposed_filter]
  or: [x1testnet_AggregateRootProposed_filter]
}

enum x1testnet_AggregateRootProposed_orderBy {
  id
  aggregateRoot
  rootTimestamp
  endOfDispute
  domain
  timestamp
  blockNumber
}

input x1testnet_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: x1testnet_Bytes
  root_not: x1testnet_Bytes
  root_gt: x1testnet_Bytes
  root_lt: x1testnet_Bytes
  root_gte: x1testnet_Bytes
  root_lte: x1testnet_Bytes
  root_in: [x1testnet_Bytes!]
  root_not_in: [x1testnet_Bytes!]
  root_contains: x1testnet_Bytes
  root_not_contains: x1testnet_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_AggregateRoot_filter]
  or: [x1testnet_AggregateRoot_filter]
}

enum x1testnet_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type x1testnet_Asset {
  id: ID!
  key: x1testnet_Bytes
  decimal: BigInt
  adoptedDecimal: BigInt
  canonicalId: x1testnet_Bytes
  canonicalDomain: BigInt
  adoptedAsset: x1testnet_Bytes
  localAsset: x1testnet_Bytes
  blockNumber: BigInt
  status: x1testnet_AssetStatus
}

type x1testnet_AssetBalance {
  id: ID!
  amount: BigInt!
  locked: BigInt!
  supplied: BigInt!
  removed: BigInt!
  router: x1testnet_Router!
  asset: x1testnet_Asset!
  feesEarned: BigInt!
}

input x1testnet_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  locked: BigInt
  locked_not: BigInt
  locked_gt: BigInt
  locked_lt: BigInt
  locked_gte: BigInt
  locked_lte: BigInt
  locked_in: [BigInt!]
  locked_not_in: [BigInt!]
  supplied: BigInt
  supplied_not: BigInt
  supplied_gt: BigInt
  supplied_lt: BigInt
  supplied_gte: BigInt
  supplied_lte: BigInt
  supplied_in: [BigInt!]
  supplied_not_in: [BigInt!]
  removed: BigInt
  removed_not: BigInt
  removed_gt: BigInt
  removed_lt: BigInt
  removed_gte: BigInt
  removed_lte: BigInt
  removed_in: [BigInt!]
  removed_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: x1testnet_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: x1testnet_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_AssetBalance_filter]
  or: [x1testnet_AssetBalance_filter]
}

enum x1testnet_AssetBalance_orderBy {
  id
  amount
  locked
  supplied
  removed
  router
  router__id
  router__isActive
  router__owner
  router__recipient
  router__proposedOwner
  router__proposedTimestamp
  asset
  asset__id
  asset__key
  asset__decimal
  asset__adoptedDecimal
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  feesEarned
}

type x1testnet_AssetStatus {
  id: ID!
  status: Boolean
}

input x1testnet_AssetStatus_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  status: Boolean
  status_not: Boolean
  status_in: [Boolean!]
  status_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_AssetStatus_filter]
  or: [x1testnet_AssetStatus_filter]
}

enum x1testnet_AssetStatus_orderBy {
  id
  status
}

input x1testnet_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: x1testnet_Bytes
  key_not: x1testnet_Bytes
  key_gt: x1testnet_Bytes
  key_lt: x1testnet_Bytes
  key_gte: x1testnet_Bytes
  key_lte: x1testnet_Bytes
  key_in: [x1testnet_Bytes!]
  key_not_in: [x1testnet_Bytes!]
  key_contains: x1testnet_Bytes
  key_not_contains: x1testnet_Bytes
  decimal: BigInt
  decimal_not: BigInt
  decimal_gt: BigInt
  decimal_lt: BigInt
  decimal_gte: BigInt
  decimal_lte: BigInt
  decimal_in: [BigInt!]
  decimal_not_in: [BigInt!]
  adoptedDecimal: BigInt
  adoptedDecimal_not: BigInt
  adoptedDecimal_gt: BigInt
  adoptedDecimal_lt: BigInt
  adoptedDecimal_gte: BigInt
  adoptedDecimal_lte: BigInt
  adoptedDecimal_in: [BigInt!]
  adoptedDecimal_not_in: [BigInt!]
  canonicalId: x1testnet_Bytes
  canonicalId_not: x1testnet_Bytes
  canonicalId_gt: x1testnet_Bytes
  canonicalId_lt: x1testnet_Bytes
  canonicalId_gte: x1testnet_Bytes
  canonicalId_lte: x1testnet_Bytes
  canonicalId_in: [x1testnet_Bytes!]
  canonicalId_not_in: [x1testnet_Bytes!]
  canonicalId_contains: x1testnet_Bytes
  canonicalId_not_contains: x1testnet_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: x1testnet_Bytes
  adoptedAsset_not: x1testnet_Bytes
  adoptedAsset_gt: x1testnet_Bytes
  adoptedAsset_lt: x1testnet_Bytes
  adoptedAsset_gte: x1testnet_Bytes
  adoptedAsset_lte: x1testnet_Bytes
  adoptedAsset_in: [x1testnet_Bytes!]
  adoptedAsset_not_in: [x1testnet_Bytes!]
  adoptedAsset_contains: x1testnet_Bytes
  adoptedAsset_not_contains: x1testnet_Bytes
  localAsset: x1testnet_Bytes
  localAsset_not: x1testnet_Bytes
  localAsset_gt: x1testnet_Bytes
  localAsset_lt: x1testnet_Bytes
  localAsset_gte: x1testnet_Bytes
  localAsset_lte: x1testnet_Bytes
  localAsset_in: [x1testnet_Bytes!]
  localAsset_not_in: [x1testnet_Bytes!]
  localAsset_contains: x1testnet_Bytes
  localAsset_not_contains: x1testnet_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  status_: x1testnet_AssetStatus_filter
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_Asset_filter]
  or: [x1testnet_Asset_filter]
}

enum x1testnet_Asset_orderBy {
  id
  key
  decimal
  adoptedDecimal
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
  status
  status__id
  status__status
}

scalar x1testnet_BigDecimal

scalar BigInt

input x1testnet_BlockChangedFilter {
  number_gte: Int!
}

input x1testnet_Block_height {
  hash: x1testnet_Bytes
  number: Int
  number_gte: Int
}

scalar x1testnet_Bytes

type x1testnet_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: x1testnet_Bytes
  rootManager: x1testnet_Bytes
  mirrorConnector: x1testnet_Bytes
}

input x1testnet_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: x1testnet_Bytes
  amb_not: x1testnet_Bytes
  amb_gt: x1testnet_Bytes
  amb_lt: x1testnet_Bytes
  amb_gte: x1testnet_Bytes
  amb_lte: x1testnet_Bytes
  amb_in: [x1testnet_Bytes!]
  amb_not_in: [x1testnet_Bytes!]
  amb_contains: x1testnet_Bytes
  amb_not_contains: x1testnet_Bytes
  rootManager: x1testnet_Bytes
  rootManager_not: x1testnet_Bytes
  rootManager_gt: x1testnet_Bytes
  rootManager_lt: x1testnet_Bytes
  rootManager_gte: x1testnet_Bytes
  rootManager_lte: x1testnet_Bytes
  rootManager_in: [x1testnet_Bytes!]
  rootManager_not_in: [x1testnet_Bytes!]
  rootManager_contains: x1testnet_Bytes
  rootManager_not_contains: x1testnet_Bytes
  mirrorConnector: x1testnet_Bytes
  mirrorConnector_not: x1testnet_Bytes
  mirrorConnector_gt: x1testnet_Bytes
  mirrorConnector_lt: x1testnet_Bytes
  mirrorConnector_gte: x1testnet_Bytes
  mirrorConnector_lte: x1testnet_Bytes
  mirrorConnector_in: [x1testnet_Bytes!]
  mirrorConnector_not_in: [x1testnet_Bytes!]
  mirrorConnector_contains: x1testnet_Bytes
  mirrorConnector_not_contains: x1testnet_Bytes
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_ConnectorMeta_filter]
  or: [x1testnet_ConnectorMeta_filter]
}

enum x1testnet_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type x1testnet_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: x1testnet_Bytes
  nonce: BigInt
  status: x1testnet_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: x1testnet_Router_orderBy, orderDirection: x1testnet_OrderDirection, where: x1testnet_Router_filter): [x1testnet_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: x1testnet_Bytes
  delegate: x1testnet_Bytes
  receiveLocal: Boolean
  callData: x1testnet_Bytes
  slippage: BigInt
  bumpSlippageCount: BigInt
  originSender: x1testnet_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: x1testnet_Bytes
  asset: x1testnet_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: x1testnet_Bytes
  executedTransactionHash: x1testnet_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: x1testnet_Bytes
  executedTxNonce: BigInt
  reconciledCaller: x1testnet_Bytes
  reconciledTransactionHash: x1testnet_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: x1testnet_Bytes
  reconciledTxNonce: BigInt
}

input x1testnet_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: x1testnet_Bytes
  transferId_not: x1testnet_Bytes
  transferId_gt: x1testnet_Bytes
  transferId_lt: x1testnet_Bytes
  transferId_gte: x1testnet_Bytes
  transferId_lte: x1testnet_Bytes
  transferId_in: [x1testnet_Bytes!]
  transferId_not_in: [x1testnet_Bytes!]
  transferId_contains: x1testnet_Bytes
  transferId_not_contains: x1testnet_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: x1testnet_TransferStatus
  status_not: x1testnet_TransferStatus
  status_in: [x1testnet_TransferStatus!]
  status_not_in: [x1testnet_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: x1testnet_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: x1testnet_Bytes
  to_not: x1testnet_Bytes
  to_gt: x1testnet_Bytes
  to_lt: x1testnet_Bytes
  to_gte: x1testnet_Bytes
  to_lte: x1testnet_Bytes
  to_in: [x1testnet_Bytes!]
  to_not_in: [x1testnet_Bytes!]
  to_contains: x1testnet_Bytes
  to_not_contains: x1testnet_Bytes
  delegate: x1testnet_Bytes
  delegate_not: x1testnet_Bytes
  delegate_gt: x1testnet_Bytes
  delegate_lt: x1testnet_Bytes
  delegate_gte: x1testnet_Bytes
  delegate_lte: x1testnet_Bytes
  delegate_in: [x1testnet_Bytes!]
  delegate_not_in: [x1testnet_Bytes!]
  delegate_contains: x1testnet_Bytes
  delegate_not_contains: x1testnet_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: x1testnet_Bytes
  callData_not: x1testnet_Bytes
  callData_gt: x1testnet_Bytes
  callData_lt: x1testnet_Bytes
  callData_gte: x1testnet_Bytes
  callData_lte: x1testnet_Bytes
  callData_in: [x1testnet_Bytes!]
  callData_not_in: [x1testnet_Bytes!]
  callData_contains: x1testnet_Bytes
  callData_not_contains: x1testnet_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  bumpSlippageCount: BigInt
  bumpSlippageCount_not: BigInt
  bumpSlippageCount_gt: BigInt
  bumpSlippageCount_lt: BigInt
  bumpSlippageCount_gte: BigInt
  bumpSlippageCount_lte: BigInt
  bumpSlippageCount_in: [BigInt!]
  bumpSlippageCount_not_in: [BigInt!]
  originSender: x1testnet_Bytes
  originSender_not: x1testnet_Bytes
  originSender_gt: x1testnet_Bytes
  originSender_lt: x1testnet_Bytes
  originSender_gte: x1testnet_Bytes
  originSender_lte: x1testnet_Bytes
  originSender_in: [x1testnet_Bytes!]
  originSender_not_in: [x1testnet_Bytes!]
  originSender_contains: x1testnet_Bytes
  originSender_not_contains: x1testnet_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: x1testnet_Bytes
  canonicalId_not: x1testnet_Bytes
  canonicalId_gt: x1testnet_Bytes
  canonicalId_lt: x1testnet_Bytes
  canonicalId_gte: x1testnet_Bytes
  canonicalId_lte: x1testnet_Bytes
  canonicalId_in: [x1testnet_Bytes!]
  canonicalId_not_in: [x1testnet_Bytes!]
  canonicalId_contains: x1testnet_Bytes
  canonicalId_not_contains: x1testnet_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: x1testnet_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: x1testnet_Bytes
  executedCaller_not: x1testnet_Bytes
  executedCaller_gt: x1testnet_Bytes
  executedCaller_lt: x1testnet_Bytes
  executedCaller_gte: x1testnet_Bytes
  executedCaller_lte: x1testnet_Bytes
  executedCaller_in: [x1testnet_Bytes!]
  executedCaller_not_in: [x1testnet_Bytes!]
  executedCaller_contains: x1testnet_Bytes
  executedCaller_not_contains: x1testnet_Bytes
  executedTransactionHash: x1testnet_Bytes
  executedTransactionHash_not: x1testnet_Bytes
  executedTransactionHash_gt: x1testnet_Bytes
  executedTransactionHash_lt: x1testnet_Bytes
  executedTransactionHash_gte: x1testnet_Bytes
  executedTransactionHash_lte: x1testnet_Bytes
  executedTransactionHash_in: [x1testnet_Bytes!]
  executedTransactionHash_not_in: [x1testnet_Bytes!]
  executedTransactionHash_contains: x1testnet_Bytes
  executedTransactionHash_not_contains: x1testnet_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: x1testnet_Bytes
  executedTxOrigin_not: x1testnet_Bytes
  executedTxOrigin_gt: x1testnet_Bytes
  executedTxOrigin_lt: x1testnet_Bytes
  executedTxOrigin_gte: x1testnet_Bytes
  executedTxOrigin_lte: x1testnet_Bytes
  executedTxOrigin_in: [x1testnet_Bytes!]
  executedTxOrigin_not_in: [x1testnet_Bytes!]
  executedTxOrigin_contains: x1testnet_Bytes
  executedTxOrigin_not_contains: x1testnet_Bytes
  executedTxNonce: BigInt
  executedTxNonce_not: BigInt
  executedTxNonce_gt: BigInt
  executedTxNonce_lt: BigInt
  executedTxNonce_gte: BigInt
  executedTxNonce_lte: BigInt
  executedTxNonce_in: [BigInt!]
  executedTxNonce_not_in: [BigInt!]
  reconciledCaller: x1testnet_Bytes
  reconciledCaller_not: x1testnet_Bytes
  reconciledCaller_gt: x1testnet_Bytes
  reconciledCaller_lt: x1testnet_Bytes
  reconciledCaller_gte: x1testnet_Bytes
  reconciledCaller_lte: x1testnet_Bytes
  reconciledCaller_in: [x1testnet_Bytes!]
  reconciledCaller_not_in: [x1testnet_Bytes!]
  reconciledCaller_contains: x1testnet_Bytes
  reconciledCaller_not_contains: x1testnet_Bytes
  reconciledTransactionHash: x1testnet_Bytes
  reconciledTransactionHash_not: x1testnet_Bytes
  reconciledTransactionHash_gt: x1testnet_Bytes
  reconciledTransactionHash_lt: x1testnet_Bytes
  reconciledTransactionHash_gte: x1testnet_Bytes
  reconciledTransactionHash_lte: x1testnet_Bytes
  reconciledTransactionHash_in: [x1testnet_Bytes!]
  reconciledTransactionHash_not_in: [x1testnet_Bytes!]
  reconciledTransactionHash_contains: x1testnet_Bytes
  reconciledTransactionHash_not_contains: x1testnet_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: x1testnet_Bytes
  reconciledTxOrigin_not: x1testnet_Bytes
  reconciledTxOrigin_gt: x1testnet_Bytes
  reconciledTxOrigin_lt: x1testnet_Bytes
  reconciledTxOrigin_gte: x1testnet_Bytes
  reconciledTxOrigin_lte: x1testnet_Bytes
  reconciledTxOrigin_in: [x1testnet_Bytes!]
  reconciledTxOrigin_not_in: [x1testnet_Bytes!]
  reconciledTxOrigin_contains: x1testnet_Bytes
  reconciledTxOrigin_not_contains: x1testnet_Bytes
  reconciledTxNonce: BigInt
  reconciledTxNonce_not: BigInt
  reconciledTxNonce_gt: BigInt
  reconciledTxNonce_lt: BigInt
  reconciledTxNonce_gte: BigInt
  reconciledTxNonce_lte: BigInt
  reconciledTxNonce_in: [BigInt!]
  reconciledTxNonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_DestinationTransfer_filter]
  or: [x1testnet_DestinationTransfer_filter]
}

enum x1testnet_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  bumpSlippageCount
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  asset__id
  asset__key
  asset__decimal
  asset__adoptedDecimal
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  executedTxNonce
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
  reconciledTxNonce
}

"""
8 bytes signed integer

"""
scalar x1testnet_Int8

type x1testnet_OptimisticRootFinalized {
  id: ID!
  aggregateRoot: x1testnet_Bytes!
  timestamp: BigInt!
  blockNumber: BigInt
}

input x1testnet_OptimisticRootFinalized_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: x1testnet_Bytes
  aggregateRoot_not: x1testnet_Bytes
  aggregateRoot_gt: x1testnet_Bytes
  aggregateRoot_lt: x1testnet_Bytes
  aggregateRoot_gte: x1testnet_Bytes
  aggregateRoot_lte: x1testnet_Bytes
  aggregateRoot_in: [x1testnet_Bytes!]
  aggregateRoot_not_in: [x1testnet_Bytes!]
  aggregateRoot_contains: x1testnet_Bytes
  aggregateRoot_not_contains: x1testnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_OptimisticRootFinalized_filter]
  or: [x1testnet_OptimisticRootFinalized_filter]
}

enum x1testnet_OptimisticRootFinalized_orderBy {
  id
  aggregateRoot
  timestamp
  blockNumber
}

"""Defines the order direction, either ascending or descending"""
enum x1testnet_OrderDirection {
  asc
  desc
}

type x1testnet_OriginMessage {
  id: ID!
  transferId: x1testnet_Bytes
  destinationDomain: BigInt
  leaf: x1testnet_Bytes
  index: BigInt
  message: x1testnet_Bytes
  root: x1testnet_Bytes
  transactionHash: x1testnet_Bytes
  blockNumber: BigInt
  rootCount: x1testnet_RootCount
}

input x1testnet_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: x1testnet_Bytes
  transferId_not: x1testnet_Bytes
  transferId_gt: x1testnet_Bytes
  transferId_lt: x1testnet_Bytes
  transferId_gte: x1testnet_Bytes
  transferId_lte: x1testnet_Bytes
  transferId_in: [x1testnet_Bytes!]
  transferId_not_in: [x1testnet_Bytes!]
  transferId_contains: x1testnet_Bytes
  transferId_not_contains: x1testnet_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: x1testnet_Bytes
  leaf_not: x1testnet_Bytes
  leaf_gt: x1testnet_Bytes
  leaf_lt: x1testnet_Bytes
  leaf_gte: x1testnet_Bytes
  leaf_lte: x1testnet_Bytes
  leaf_in: [x1testnet_Bytes!]
  leaf_not_in: [x1testnet_Bytes!]
  leaf_contains: x1testnet_Bytes
  leaf_not_contains: x1testnet_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: x1testnet_Bytes
  message_not: x1testnet_Bytes
  message_gt: x1testnet_Bytes
  message_lt: x1testnet_Bytes
  message_gte: x1testnet_Bytes
  message_lte: x1testnet_Bytes
  message_in: [x1testnet_Bytes!]
  message_not_in: [x1testnet_Bytes!]
  message_contains: x1testnet_Bytes
  message_not_contains: x1testnet_Bytes
  root: x1testnet_Bytes
  root_not: x1testnet_Bytes
  root_gt: x1testnet_Bytes
  root_lt: x1testnet_Bytes
  root_gte: x1testnet_Bytes
  root_lte: x1testnet_Bytes
  root_in: [x1testnet_Bytes!]
  root_not_in: [x1testnet_Bytes!]
  root_contains: x1testnet_Bytes
  root_not_contains: x1testnet_Bytes
  transactionHash: x1testnet_Bytes
  transactionHash_not: x1testnet_Bytes
  transactionHash_gt: x1testnet_Bytes
  transactionHash_lt: x1testnet_Bytes
  transactionHash_gte: x1testnet_Bytes
  transactionHash_lte: x1testnet_Bytes
  transactionHash_in: [x1testnet_Bytes!]
  transactionHash_not_in: [x1testnet_Bytes!]
  transactionHash_contains: x1testnet_Bytes
  transactionHash_not_contains: x1testnet_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: x1testnet_RootCount_filter
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_OriginMessage_filter]
  or: [x1testnet_OriginMessage_filter]
}

enum x1testnet_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
  rootCount__id
  rootCount__count
}

type x1testnet_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: x1testnet_Bytes
  nonce: BigInt
  status: x1testnet_TransferStatus
  messageHash: x1testnet_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: x1testnet_Bytes
  delegate: x1testnet_Bytes
  receiveLocal: Boolean
  callData: x1testnet_Bytes
  slippage: BigInt
  originSender: x1testnet_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: x1testnet_Bytes
  asset: x1testnet_Asset
  transactingAsset: x1testnet_Bytes
  message: x1testnet_OriginMessage
  bumpRelayerFeeCount: BigInt
  relayerFees(skip: Int = 0, first: Int = 100, orderBy: x1testnet_RelayerFee_orderBy, orderDirection: x1testnet_OrderDirection, where: x1testnet_RelayerFee_filter): [x1testnet_RelayerFee!]
  initialRelayerFeeAsset: x1testnet_Bytes
  caller: x1testnet_Bytes
  transactionHash: x1testnet_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: x1testnet_Bytes
  txNonce: BigInt
}

input x1testnet_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: x1testnet_Bytes
  transferId_not: x1testnet_Bytes
  transferId_gt: x1testnet_Bytes
  transferId_lt: x1testnet_Bytes
  transferId_gte: x1testnet_Bytes
  transferId_lte: x1testnet_Bytes
  transferId_in: [x1testnet_Bytes!]
  transferId_not_in: [x1testnet_Bytes!]
  transferId_contains: x1testnet_Bytes
  transferId_not_contains: x1testnet_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: x1testnet_TransferStatus
  status_not: x1testnet_TransferStatus
  status_in: [x1testnet_TransferStatus!]
  status_not_in: [x1testnet_TransferStatus!]
  messageHash: x1testnet_Bytes
  messageHash_not: x1testnet_Bytes
  messageHash_gt: x1testnet_Bytes
  messageHash_lt: x1testnet_Bytes
  messageHash_gte: x1testnet_Bytes
  messageHash_lte: x1testnet_Bytes
  messageHash_in: [x1testnet_Bytes!]
  messageHash_not_in: [x1testnet_Bytes!]
  messageHash_contains: x1testnet_Bytes
  messageHash_not_contains: x1testnet_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: x1testnet_Bytes
  to_not: x1testnet_Bytes
  to_gt: x1testnet_Bytes
  to_lt: x1testnet_Bytes
  to_gte: x1testnet_Bytes
  to_lte: x1testnet_Bytes
  to_in: [x1testnet_Bytes!]
  to_not_in: [x1testnet_Bytes!]
  to_contains: x1testnet_Bytes
  to_not_contains: x1testnet_Bytes
  delegate: x1testnet_Bytes
  delegate_not: x1testnet_Bytes
  delegate_gt: x1testnet_Bytes
  delegate_lt: x1testnet_Bytes
  delegate_gte: x1testnet_Bytes
  delegate_lte: x1testnet_Bytes
  delegate_in: [x1testnet_Bytes!]
  delegate_not_in: [x1testnet_Bytes!]
  delegate_contains: x1testnet_Bytes
  delegate_not_contains: x1testnet_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: x1testnet_Bytes
  callData_not: x1testnet_Bytes
  callData_gt: x1testnet_Bytes
  callData_lt: x1testnet_Bytes
  callData_gte: x1testnet_Bytes
  callData_lte: x1testnet_Bytes
  callData_in: [x1testnet_Bytes!]
  callData_not_in: [x1testnet_Bytes!]
  callData_contains: x1testnet_Bytes
  callData_not_contains: x1testnet_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: x1testnet_Bytes
  originSender_not: x1testnet_Bytes
  originSender_gt: x1testnet_Bytes
  originSender_lt: x1testnet_Bytes
  originSender_gte: x1testnet_Bytes
  originSender_lte: x1testnet_Bytes
  originSender_in: [x1testnet_Bytes!]
  originSender_not_in: [x1testnet_Bytes!]
  originSender_contains: x1testnet_Bytes
  originSender_not_contains: x1testnet_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: x1testnet_Bytes
  canonicalId_not: x1testnet_Bytes
  canonicalId_gt: x1testnet_Bytes
  canonicalId_lt: x1testnet_Bytes
  canonicalId_gte: x1testnet_Bytes
  canonicalId_lte: x1testnet_Bytes
  canonicalId_in: [x1testnet_Bytes!]
  canonicalId_not_in: [x1testnet_Bytes!]
  canonicalId_contains: x1testnet_Bytes
  canonicalId_not_contains: x1testnet_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: x1testnet_Asset_filter
  transactingAsset: x1testnet_Bytes
  transactingAsset_not: x1testnet_Bytes
  transactingAsset_gt: x1testnet_Bytes
  transactingAsset_lt: x1testnet_Bytes
  transactingAsset_gte: x1testnet_Bytes
  transactingAsset_lte: x1testnet_Bytes
  transactingAsset_in: [x1testnet_Bytes!]
  transactingAsset_not_in: [x1testnet_Bytes!]
  transactingAsset_contains: x1testnet_Bytes
  transactingAsset_not_contains: x1testnet_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: x1testnet_OriginMessage_filter
  bumpRelayerFeeCount: BigInt
  bumpRelayerFeeCount_not: BigInt
  bumpRelayerFeeCount_gt: BigInt
  bumpRelayerFeeCount_lt: BigInt
  bumpRelayerFeeCount_gte: BigInt
  bumpRelayerFeeCount_lte: BigInt
  bumpRelayerFeeCount_in: [BigInt!]
  bumpRelayerFeeCount_not_in: [BigInt!]
  relayerFees: [String!]
  relayerFees_not: [String!]
  relayerFees_contains: [String!]
  relayerFees_contains_nocase: [String!]
  relayerFees_not_contains: [String!]
  relayerFees_not_contains_nocase: [String!]
  relayerFees_: x1testnet_RelayerFee_filter
  initialRelayerFeeAsset: x1testnet_Bytes
  initialRelayerFeeAsset_not: x1testnet_Bytes
  initialRelayerFeeAsset_gt: x1testnet_Bytes
  initialRelayerFeeAsset_lt: x1testnet_Bytes
  initialRelayerFeeAsset_gte: x1testnet_Bytes
  initialRelayerFeeAsset_lte: x1testnet_Bytes
  initialRelayerFeeAsset_in: [x1testnet_Bytes!]
  initialRelayerFeeAsset_not_in: [x1testnet_Bytes!]
  initialRelayerFeeAsset_contains: x1testnet_Bytes
  initialRelayerFeeAsset_not_contains: x1testnet_Bytes
  caller: x1testnet_Bytes
  caller_not: x1testnet_Bytes
  caller_gt: x1testnet_Bytes
  caller_lt: x1testnet_Bytes
  caller_gte: x1testnet_Bytes
  caller_lte: x1testnet_Bytes
  caller_in: [x1testnet_Bytes!]
  caller_not_in: [x1testnet_Bytes!]
  caller_contains: x1testnet_Bytes
  caller_not_contains: x1testnet_Bytes
  transactionHash: x1testnet_Bytes
  transactionHash_not: x1testnet_Bytes
  transactionHash_gt: x1testnet_Bytes
  transactionHash_lt: x1testnet_Bytes
  transactionHash_gte: x1testnet_Bytes
  transactionHash_lte: x1testnet_Bytes
  transactionHash_in: [x1testnet_Bytes!]
  transactionHash_not_in: [x1testnet_Bytes!]
  transactionHash_contains: x1testnet_Bytes
  transactionHash_not_contains: x1testnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: x1testnet_Bytes
  txOrigin_not: x1testnet_Bytes
  txOrigin_gt: x1testnet_Bytes
  txOrigin_lt: x1testnet_Bytes
  txOrigin_gte: x1testnet_Bytes
  txOrigin_lte: x1testnet_Bytes
  txOrigin_in: [x1testnet_Bytes!]
  txOrigin_not_in: [x1testnet_Bytes!]
  txOrigin_contains: x1testnet_Bytes
  txOrigin_not_contains: x1testnet_Bytes
  txNonce: BigInt
  txNonce_not: BigInt
  txNonce_gt: BigInt
  txNonce_lt: BigInt
  txNonce_gte: BigInt
  txNonce_lte: BigInt
  txNonce_in: [BigInt!]
  txNonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_OriginTransfer_filter]
  or: [x1testnet_OriginTransfer_filter]
}

enum x1testnet_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  asset__id
  asset__key
  asset__decimal
  asset__adoptedDecimal
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  transactingAsset
  message
  message__id
  message__transferId
  message__destinationDomain
  message__leaf
  message__index
  message__message
  message__root
  message__transactionHash
  message__blockNumber
  bumpRelayerFeeCount
  relayerFees
  initialRelayerFeeAsset
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
  txNonce
}

type Query {
  x1testnet_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_Asset
  x1testnet_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_Asset_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_Asset!]!
  x1testnet_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_AssetStatus
  x1testnet_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_AssetStatus_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_AssetStatus!]!
  x1testnet_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_AssetBalance
  x1testnet_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_AssetBalance_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_AssetBalance!]!
  x1testnet_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_Router
  x1testnet_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_Router_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_Router!]!
  x1testnet_routerDailyTVL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_RouterDailyTVL
  x1testnet_routerDailyTVLs(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_RouterDailyTVL_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_RouterDailyTVL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_RouterDailyTVL!]!
  x1testnet_routerLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_RouterLiquidityEvent
  x1testnet_routerLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_RouterLiquidityEvent_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_RouterLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_RouterLiquidityEvent!]!
  x1testnet_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_Setting
  x1testnet_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_Setting_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_Setting!]!
  x1testnet_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_Relayer
  x1testnet_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_Relayer_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_Relayer!]!
  x1testnet_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_Sequencer
  x1testnet_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_Sequencer_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_Sequencer!]!
  x1testnet_relayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_RelayerFee
  x1testnet_relayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_RelayerFee_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_RelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_RelayerFee!]!
  x1testnet_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_OriginTransfer
  x1testnet_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_OriginTransfer_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_OriginTransfer!]!
  x1testnet_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_DestinationTransfer
  x1testnet_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_DestinationTransfer_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_DestinationTransfer!]!
  x1testnet_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_OriginMessage
  x1testnet_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_OriginMessage_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_OriginMessage!]!
  x1testnet_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_AggregateRoot
  x1testnet_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_AggregateRoot_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_AggregateRoot!]!
  x1testnet_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_ConnectorMeta
  x1testnet_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_ConnectorMeta_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_ConnectorMeta!]!
  x1testnet_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_RootCount
  x1testnet_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_RootCount_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_RootCount!]!
  x1testnet_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_RootMessageSent
  x1testnet_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_RootMessageSent_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_RootMessageSent!]!
  x1testnet_relayerFeesIncrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_RelayerFeesIncrease
  x1testnet_relayerFeesIncreases(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_RelayerFeesIncrease_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_RelayerFeesIncrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_RelayerFeesIncrease!]!
  x1testnet_slippageUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_SlippageUpdate
  x1testnet_slippageUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_SlippageUpdate_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_SlippageUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_SlippageUpdate!]!
  x1testnet_snapshotRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_SnapshotRoot
  x1testnet_snapshotRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_SnapshotRoot_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_SnapshotRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_SnapshotRoot!]!
  x1testnet_spokeConnectorMode(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_SpokeConnectorMode
  x1testnet_spokeConnectorModes(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_SpokeConnectorMode_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_SpokeConnectorMode_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_SpokeConnectorMode!]!
  x1testnet_aggregateRootProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_AggregateRootProposed
  x1testnet_aggregateRootProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_AggregateRootProposed_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_AggregateRootProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_AggregateRootProposed!]!
  x1testnet_optimisticRootFinalized(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_OptimisticRootFinalized
  x1testnet_optimisticRootFinalizeds(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_OptimisticRootFinalized_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_OptimisticRootFinalized_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_OptimisticRootFinalized!]!
  """Access to subgraph metadata"""
  x1testnet__meta(block: x1testnet_Block_height): x1testnet__Meta_
}

type x1testnet_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: x1testnet_Bytes
}

type x1testnet_RelayerFee {
  id: ID!
  transfer: x1testnet_OriginTransfer!
  fee: BigInt!
  asset: x1testnet_Bytes!
}

input x1testnet_RelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: x1testnet_OriginTransfer_filter
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  asset: x1testnet_Bytes
  asset_not: x1testnet_Bytes
  asset_gt: x1testnet_Bytes
  asset_lt: x1testnet_Bytes
  asset_gte: x1testnet_Bytes
  asset_lte: x1testnet_Bytes
  asset_in: [x1testnet_Bytes!]
  asset_not_in: [x1testnet_Bytes!]
  asset_contains: x1testnet_Bytes
  asset_not_contains: x1testnet_Bytes
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_RelayerFee_filter]
  or: [x1testnet_RelayerFee_filter]
}

enum x1testnet_RelayerFee_orderBy {
  id
  transfer
  transfer__id
  transfer__chainId
  transfer__transferId
  transfer__nonce
  transfer__status
  transfer__messageHash
  transfer__originDomain
  transfer__destinationDomain
  transfer__canonicalDomain
  transfer__to
  transfer__delegate
  transfer__receiveLocal
  transfer__callData
  transfer__slippage
  transfer__originSender
  transfer__bridgedAmt
  transfer__normalizedIn
  transfer__canonicalId
  transfer__transactingAsset
  transfer__bumpRelayerFeeCount
  transfer__initialRelayerFeeAsset
  transfer__caller
  transfer__transactionHash
  transfer__timestamp
  transfer__gasPrice
  transfer__gasLimit
  transfer__blockNumber
  transfer__txOrigin
  transfer__txNonce
  fee
  asset
}

type x1testnet_RelayerFeesIncrease {
  id: ID!
  transfer: x1testnet_OriginTransfer!
  increase: BigInt
  asset: x1testnet_Bytes
  caller: x1testnet_Bytes!
  transactionHash: x1testnet_Bytes!
  timestamp: BigInt!
  gasPrice: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

input x1testnet_RelayerFeesIncrease_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: x1testnet_OriginTransfer_filter
  increase: BigInt
  increase_not: BigInt
  increase_gt: BigInt
  increase_lt: BigInt
  increase_gte: BigInt
  increase_lte: BigInt
  increase_in: [BigInt!]
  increase_not_in: [BigInt!]
  asset: x1testnet_Bytes
  asset_not: x1testnet_Bytes
  asset_gt: x1testnet_Bytes
  asset_lt: x1testnet_Bytes
  asset_gte: x1testnet_Bytes
  asset_lte: x1testnet_Bytes
  asset_in: [x1testnet_Bytes!]
  asset_not_in: [x1testnet_Bytes!]
  asset_contains: x1testnet_Bytes
  asset_not_contains: x1testnet_Bytes
  caller: x1testnet_Bytes
  caller_not: x1testnet_Bytes
  caller_gt: x1testnet_Bytes
  caller_lt: x1testnet_Bytes
  caller_gte: x1testnet_Bytes
  caller_lte: x1testnet_Bytes
  caller_in: [x1testnet_Bytes!]
  caller_not_in: [x1testnet_Bytes!]
  caller_contains: x1testnet_Bytes
  caller_not_contains: x1testnet_Bytes
  transactionHash: x1testnet_Bytes
  transactionHash_not: x1testnet_Bytes
  transactionHash_gt: x1testnet_Bytes
  transactionHash_lt: x1testnet_Bytes
  transactionHash_gte: x1testnet_Bytes
  transactionHash_lte: x1testnet_Bytes
  transactionHash_in: [x1testnet_Bytes!]
  transactionHash_not_in: [x1testnet_Bytes!]
  transactionHash_contains: x1testnet_Bytes
  transactionHash_not_contains: x1testnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_RelayerFeesIncrease_filter]
  or: [x1testnet_RelayerFeesIncrease_filter]
}

enum x1testnet_RelayerFeesIncrease_orderBy {
  id
  transfer
  transfer__id
  transfer__chainId
  transfer__transferId
  transfer__nonce
  transfer__status
  transfer__messageHash
  transfer__originDomain
  transfer__destinationDomain
  transfer__canonicalDomain
  transfer__to
  transfer__delegate
  transfer__receiveLocal
  transfer__callData
  transfer__slippage
  transfer__originSender
  transfer__bridgedAmt
  transfer__normalizedIn
  transfer__canonicalId
  transfer__transactingAsset
  transfer__bumpRelayerFeeCount
  transfer__initialRelayerFeeAsset
  transfer__caller
  transfer__transactionHash
  transfer__timestamp
  transfer__gasPrice
  transfer__gasLimit
  transfer__blockNumber
  transfer__txOrigin
  transfer__txNonce
  increase
  asset
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

input x1testnet_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: x1testnet_Bytes
  relayer_not: x1testnet_Bytes
  relayer_gt: x1testnet_Bytes
  relayer_lt: x1testnet_Bytes
  relayer_gte: x1testnet_Bytes
  relayer_lte: x1testnet_Bytes
  relayer_in: [x1testnet_Bytes!]
  relayer_not_in: [x1testnet_Bytes!]
  relayer_contains: x1testnet_Bytes
  relayer_not_contains: x1testnet_Bytes
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_Relayer_filter]
  or: [x1testnet_Relayer_filter]
}

enum x1testnet_Relayer_orderBy {
  id
  isActive
  relayer
}

type x1testnet_RootCount {
  id: ID!
  count: BigInt
}

input x1testnet_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_RootCount_filter]
  or: [x1testnet_RootCount_filter]
}

enum x1testnet_RootCount_orderBy {
  id
  count
}

type x1testnet_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: x1testnet_Bytes
  count: BigInt
  caller: x1testnet_Bytes
  transactionHash: x1testnet_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input x1testnet_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: x1testnet_Bytes
  root_not: x1testnet_Bytes
  root_gt: x1testnet_Bytes
  root_lt: x1testnet_Bytes
  root_gte: x1testnet_Bytes
  root_lte: x1testnet_Bytes
  root_in: [x1testnet_Bytes!]
  root_not_in: [x1testnet_Bytes!]
  root_contains: x1testnet_Bytes
  root_not_contains: x1testnet_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: x1testnet_Bytes
  caller_not: x1testnet_Bytes
  caller_gt: x1testnet_Bytes
  caller_lt: x1testnet_Bytes
  caller_gte: x1testnet_Bytes
  caller_lte: x1testnet_Bytes
  caller_in: [x1testnet_Bytes!]
  caller_not_in: [x1testnet_Bytes!]
  caller_contains: x1testnet_Bytes
  caller_not_contains: x1testnet_Bytes
  transactionHash: x1testnet_Bytes
  transactionHash_not: x1testnet_Bytes
  transactionHash_gt: x1testnet_Bytes
  transactionHash_lt: x1testnet_Bytes
  transactionHash_gte: x1testnet_Bytes
  transactionHash_lte: x1testnet_Bytes
  transactionHash_in: [x1testnet_Bytes!]
  transactionHash_not_in: [x1testnet_Bytes!]
  transactionHash_contains: x1testnet_Bytes
  transactionHash_not_contains: x1testnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_RootMessageSent_filter]
  or: [x1testnet_RootMessageSent_filter]
}

enum x1testnet_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type x1testnet_Router {
  id: ID!
  isActive: Boolean!
  owner: x1testnet_Bytes
  recipient: x1testnet_Bytes
  proposedOwner: x1testnet_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: x1testnet_AssetBalance_orderBy, orderDirection: x1testnet_OrderDirection, where: x1testnet_AssetBalance_filter): [x1testnet_AssetBalance!]!
}

type x1testnet_RouterDailyTVL {
  id: ID!
  router: x1testnet_Router!
  asset: x1testnet_Asset!
  timestamp: BigInt!
  balance: BigInt!
}

input x1testnet_RouterDailyTVL_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: x1testnet_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: x1testnet_Asset_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_RouterDailyTVL_filter]
  or: [x1testnet_RouterDailyTVL_filter]
}

enum x1testnet_RouterDailyTVL_orderBy {
  id
  router
  router__id
  router__isActive
  router__owner
  router__recipient
  router__proposedOwner
  router__proposedTimestamp
  asset
  asset__id
  asset__key
  asset__decimal
  asset__adoptedDecimal
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  timestamp
  balance
}

type x1testnet_RouterLiquidityEvent {
  id: ID!
  type: x1testnet_RouterLiquidityEventType
  router: x1testnet_Router!
  asset: x1testnet_Asset!
  amount: BigInt!
  balance: BigInt!
  caller: x1testnet_Bytes
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionHash: x1testnet_Bytes!
  nonce: BigInt!
}

enum x1testnet_RouterLiquidityEventType {
  Add
  Remove
}

input x1testnet_RouterLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  type: x1testnet_RouterLiquidityEventType
  type_not: x1testnet_RouterLiquidityEventType
  type_in: [x1testnet_RouterLiquidityEventType!]
  type_not_in: [x1testnet_RouterLiquidityEventType!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: x1testnet_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: x1testnet_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  caller: x1testnet_Bytes
  caller_not: x1testnet_Bytes
  caller_gt: x1testnet_Bytes
  caller_lt: x1testnet_Bytes
  caller_gte: x1testnet_Bytes
  caller_lte: x1testnet_Bytes
  caller_in: [x1testnet_Bytes!]
  caller_not_in: [x1testnet_Bytes!]
  caller_contains: x1testnet_Bytes
  caller_not_contains: x1testnet_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transactionHash: x1testnet_Bytes
  transactionHash_not: x1testnet_Bytes
  transactionHash_gt: x1testnet_Bytes
  transactionHash_lt: x1testnet_Bytes
  transactionHash_gte: x1testnet_Bytes
  transactionHash_lte: x1testnet_Bytes
  transactionHash_in: [x1testnet_Bytes!]
  transactionHash_not_in: [x1testnet_Bytes!]
  transactionHash_contains: x1testnet_Bytes
  transactionHash_not_contains: x1testnet_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_RouterLiquidityEvent_filter]
  or: [x1testnet_RouterLiquidityEvent_filter]
}

enum x1testnet_RouterLiquidityEvent_orderBy {
  id
  type
  router
  router__id
  router__isActive
  router__owner
  router__recipient
  router__proposedOwner
  router__proposedTimestamp
  asset
  asset__id
  asset__key
  asset__decimal
  asset__adoptedDecimal
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  amount
  balance
  caller
  blockNumber
  timestamp
  transactionHash
  nonce
}

input x1testnet_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: x1testnet_Bytes
  owner_not: x1testnet_Bytes
  owner_gt: x1testnet_Bytes
  owner_lt: x1testnet_Bytes
  owner_gte: x1testnet_Bytes
  owner_lte: x1testnet_Bytes
  owner_in: [x1testnet_Bytes!]
  owner_not_in: [x1testnet_Bytes!]
  owner_contains: x1testnet_Bytes
  owner_not_contains: x1testnet_Bytes
  recipient: x1testnet_Bytes
  recipient_not: x1testnet_Bytes
  recipient_gt: x1testnet_Bytes
  recipient_lt: x1testnet_Bytes
  recipient_gte: x1testnet_Bytes
  recipient_lte: x1testnet_Bytes
  recipient_in: [x1testnet_Bytes!]
  recipient_not_in: [x1testnet_Bytes!]
  recipient_contains: x1testnet_Bytes
  recipient_not_contains: x1testnet_Bytes
  proposedOwner: x1testnet_Bytes
  proposedOwner_not: x1testnet_Bytes
  proposedOwner_gt: x1testnet_Bytes
  proposedOwner_lt: x1testnet_Bytes
  proposedOwner_gte: x1testnet_Bytes
  proposedOwner_lte: x1testnet_Bytes
  proposedOwner_in: [x1testnet_Bytes!]
  proposedOwner_not_in: [x1testnet_Bytes!]
  proposedOwner_contains: x1testnet_Bytes
  proposedOwner_not_contains: x1testnet_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: x1testnet_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_Router_filter]
  or: [x1testnet_Router_filter]
}

enum x1testnet_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type x1testnet_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: x1testnet_Bytes
}

input x1testnet_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: x1testnet_Bytes
  sequencer_not: x1testnet_Bytes
  sequencer_gt: x1testnet_Bytes
  sequencer_lt: x1testnet_Bytes
  sequencer_gte: x1testnet_Bytes
  sequencer_lte: x1testnet_Bytes
  sequencer_in: [x1testnet_Bytes!]
  sequencer_not_in: [x1testnet_Bytes!]
  sequencer_contains: x1testnet_Bytes
  sequencer_not_contains: x1testnet_Bytes
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_Sequencer_filter]
  or: [x1testnet_Sequencer_filter]
}

enum x1testnet_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type x1testnet_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: x1testnet_Bytes!
}

input x1testnet_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: x1testnet_Bytes
  caller_not: x1testnet_Bytes
  caller_gt: x1testnet_Bytes
  caller_lt: x1testnet_Bytes
  caller_gte: x1testnet_Bytes
  caller_lte: x1testnet_Bytes
  caller_in: [x1testnet_Bytes!]
  caller_not_in: [x1testnet_Bytes!]
  caller_contains: x1testnet_Bytes
  caller_not_contains: x1testnet_Bytes
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_Setting_filter]
  or: [x1testnet_Setting_filter]
}

enum x1testnet_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type x1testnet_SlippageUpdate {
  id: ID!
  transfer: x1testnet_DestinationTransfer!
  slippage: BigInt!
  caller: x1testnet_Bytes!
  transactionHash: x1testnet_Bytes!
  timestamp: BigInt!
  gasPrice: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

input x1testnet_SlippageUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: x1testnet_DestinationTransfer_filter
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  caller: x1testnet_Bytes
  caller_not: x1testnet_Bytes
  caller_gt: x1testnet_Bytes
  caller_lt: x1testnet_Bytes
  caller_gte: x1testnet_Bytes
  caller_lte: x1testnet_Bytes
  caller_in: [x1testnet_Bytes!]
  caller_not_in: [x1testnet_Bytes!]
  caller_contains: x1testnet_Bytes
  caller_not_contains: x1testnet_Bytes
  transactionHash: x1testnet_Bytes
  transactionHash_not: x1testnet_Bytes
  transactionHash_gt: x1testnet_Bytes
  transactionHash_lt: x1testnet_Bytes
  transactionHash_gte: x1testnet_Bytes
  transactionHash_lte: x1testnet_Bytes
  transactionHash_in: [x1testnet_Bytes!]
  transactionHash_not_in: [x1testnet_Bytes!]
  transactionHash_contains: x1testnet_Bytes
  transactionHash_not_contains: x1testnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_SlippageUpdate_filter]
  or: [x1testnet_SlippageUpdate_filter]
}

enum x1testnet_SlippageUpdate_orderBy {
  id
  transfer
  transfer__id
  transfer__chainId
  transfer__transferId
  transfer__nonce
  transfer__status
  transfer__originDomain
  transfer__destinationDomain
  transfer__canonicalDomain
  transfer__to
  transfer__delegate
  transfer__receiveLocal
  transfer__callData
  transfer__slippage
  transfer__bumpSlippageCount
  transfer__originSender
  transfer__bridgedAmt
  transfer__normalizedIn
  transfer__canonicalId
  transfer__amount
  transfer__routersFee
  transfer__executedCaller
  transfer__executedTransactionHash
  transfer__executedTimestamp
  transfer__executedGasPrice
  transfer__executedGasLimit
  transfer__executedBlockNumber
  transfer__executedTxOrigin
  transfer__executedTxNonce
  transfer__reconciledCaller
  transfer__reconciledTransactionHash
  transfer__reconciledTimestamp
  transfer__reconciledGasPrice
  transfer__reconciledGasLimit
  transfer__reconciledBlockNumber
  transfer__reconciledTxOrigin
  transfer__reconciledTxNonce
  slippage
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type x1testnet_SnapshotRoot {
  id: ID!
  spokeDomain: BigInt
  root: x1testnet_Bytes!
  count: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

input x1testnet_SnapshotRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  root: x1testnet_Bytes
  root_not: x1testnet_Bytes
  root_gt: x1testnet_Bytes
  root_lt: x1testnet_Bytes
  root_gte: x1testnet_Bytes
  root_lte: x1testnet_Bytes
  root_in: [x1testnet_Bytes!]
  root_not_in: [x1testnet_Bytes!]
  root_contains: x1testnet_Bytes
  root_not_contains: x1testnet_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_SnapshotRoot_filter]
  or: [x1testnet_SnapshotRoot_filter]
}

enum x1testnet_SnapshotRoot_orderBy {
  id
  spokeDomain
  root
  count
  timestamp
  blockNumber
}

type x1testnet_SpokeConnectorMode {
  id: ID!
  mode: String!
}

input x1testnet_SpokeConnectorMode_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  mode: String
  mode_not: String
  mode_gt: String
  mode_lt: String
  mode_gte: String
  mode_lte: String
  mode_in: [String!]
  mode_not_in: [String!]
  mode_contains: String
  mode_contains_nocase: String
  mode_not_contains: String
  mode_not_contains_nocase: String
  mode_starts_with: String
  mode_starts_with_nocase: String
  mode_not_starts_with: String
  mode_not_starts_with_nocase: String
  mode_ends_with: String
  mode_ends_with_nocase: String
  mode_not_ends_with: String
  mode_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: x1testnet_BlockChangedFilter
  and: [x1testnet_SpokeConnectorMode_filter]
  or: [x1testnet_SpokeConnectorMode_filter]
}

enum x1testnet_SpokeConnectorMode_orderBy {
  id
  mode
}

type Subscription {
  x1testnet_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_Asset
  x1testnet_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_Asset_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_Asset!]!
  x1testnet_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_AssetStatus
  x1testnet_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_AssetStatus_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_AssetStatus!]!
  x1testnet_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_AssetBalance
  x1testnet_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_AssetBalance_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_AssetBalance!]!
  x1testnet_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_Router
  x1testnet_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_Router_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_Router!]!
  x1testnet_routerDailyTVL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_RouterDailyTVL
  x1testnet_routerDailyTVLs(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_RouterDailyTVL_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_RouterDailyTVL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_RouterDailyTVL!]!
  x1testnet_routerLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_RouterLiquidityEvent
  x1testnet_routerLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_RouterLiquidityEvent_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_RouterLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_RouterLiquidityEvent!]!
  x1testnet_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_Setting
  x1testnet_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_Setting_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_Setting!]!
  x1testnet_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_Relayer
  x1testnet_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_Relayer_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_Relayer!]!
  x1testnet_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_Sequencer
  x1testnet_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_Sequencer_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_Sequencer!]!
  x1testnet_relayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_RelayerFee
  x1testnet_relayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_RelayerFee_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_RelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_RelayerFee!]!
  x1testnet_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_OriginTransfer
  x1testnet_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_OriginTransfer_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_OriginTransfer!]!
  x1testnet_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_DestinationTransfer
  x1testnet_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_DestinationTransfer_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_DestinationTransfer!]!
  x1testnet_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_OriginMessage
  x1testnet_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_OriginMessage_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_OriginMessage!]!
  x1testnet_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_AggregateRoot
  x1testnet_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_AggregateRoot_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_AggregateRoot!]!
  x1testnet_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_ConnectorMeta
  x1testnet_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_ConnectorMeta_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_ConnectorMeta!]!
  x1testnet_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_RootCount
  x1testnet_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_RootCount_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_RootCount!]!
  x1testnet_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_RootMessageSent
  x1testnet_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_RootMessageSent_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_RootMessageSent!]!
  x1testnet_relayerFeesIncrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_RelayerFeesIncrease
  x1testnet_relayerFeesIncreases(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_RelayerFeesIncrease_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_RelayerFeesIncrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_RelayerFeesIncrease!]!
  x1testnet_slippageUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_SlippageUpdate
  x1testnet_slippageUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_SlippageUpdate_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_SlippageUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_SlippageUpdate!]!
  x1testnet_snapshotRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_SnapshotRoot
  x1testnet_snapshotRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_SnapshotRoot_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_SnapshotRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_SnapshotRoot!]!
  x1testnet_spokeConnectorMode(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_SpokeConnectorMode
  x1testnet_spokeConnectorModes(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_SpokeConnectorMode_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_SpokeConnectorMode_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_SpokeConnectorMode!]!
  x1testnet_aggregateRootProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_AggregateRootProposed
  x1testnet_aggregateRootProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_AggregateRootProposed_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_AggregateRootProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_AggregateRootProposed!]!
  x1testnet_optimisticRootFinalized(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): x1testnet_OptimisticRootFinalized
  x1testnet_optimisticRootFinalizeds(
    skip: Int = 0
    first: Int = 100
    orderBy: x1testnet_OptimisticRootFinalized_orderBy
    orderDirection: x1testnet_OrderDirection
    where: x1testnet_OptimisticRootFinalized_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: x1testnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [x1testnet_OptimisticRootFinalized!]!
  """Access to subgraph metadata"""
  x1testnet__meta(block: x1testnet_Block_height): x1testnet__Meta_
}

enum x1testnet_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type x1testnet__Block_ {
  """The hash of the block"""
  hash: x1testnet_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type x1testnet__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: x1testnet__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}