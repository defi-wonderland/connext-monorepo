/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface RolesManagerInterface extends utils.Interface {
  functions: {
    "acceptanceDelay()": FunctionFragment;
    "addRelayer(address)": FunctionFragment;
    "addSequencer(address)": FunctionFragment;
    "approvedRelayers(address)": FunctionFragment;
    "approvedSequencers(address)": FunctionFragment;
    "assetCanonicalIds(address)": FunctionFragment;
    "assetIdToTickerHash(address)": FunctionFragment;
    "assignRole(address,uint8)": FunctionFragment;
    "domain()": FunctionFragment;
    "enrollRemoteRouter(uint32,bytes32)": FunctionFragment;
    "initialized()": FunctionFragment;
    "maxRoutersPerTransfer()": FunctionFragment;
    "nextAssetToTickerHash(address)": FunctionFragment;
    "nonce()": FunctionFragment;
    "owner()": FunctionFragment;
    "proposeRouterAllowlistRemoval()": FunctionFragment;
    "proposed()": FunctionFragment;
    "proposedOwnershipTimestamp()": FunctionFragment;
    "relayerFeeVault()": FunctionFragment;
    "remotes(uint32)": FunctionFragment;
    "removeRelayer(address)": FunctionFragment;
    "removeRouterAllowlist()": FunctionFragment;
    "removeSequencer(address)": FunctionFragment;
    "revokeRole(address)": FunctionFragment;
    "roles(address)": FunctionFragment;
    "routedTransfers(bytes32,uint256)": FunctionFragment;
    "routerAllowlistRemoved()": FunctionFragment;
    "routerAllowlistTimestamp()": FunctionFragment;
    "routerBalances(address,address)": FunctionFragment;
    "routerConfigs(address)": FunctionFragment;
    "routerCredits(address,address)": FunctionFragment;
    "settlementStrategies(bytes32,bytes)": FunctionFragment;
    "supportedAssetDomains(bytes32,uint32)": FunctionFragment;
    "tickerHashToAssetId(bytes32)": FunctionFragment;
    "tickerHashToNextAsset(bytes32)": FunctionFragment;
    "tokenConfigs(bytes32)": FunctionFragment;
    "transferStatus(bytes32)": FunctionFragment;
    "unclaimedAssets(address)": FunctionFragment;
    "xAppConnectionManager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptanceDelay"
      | "addRelayer"
      | "addSequencer"
      | "approvedRelayers"
      | "approvedSequencers"
      | "assetCanonicalIds"
      | "assetIdToTickerHash"
      | "assignRole"
      | "domain"
      | "enrollRemoteRouter"
      | "initialized"
      | "maxRoutersPerTransfer"
      | "nextAssetToTickerHash"
      | "nonce"
      | "owner"
      | "proposeRouterAllowlistRemoval"
      | "proposed"
      | "proposedOwnershipTimestamp"
      | "relayerFeeVault"
      | "remotes"
      | "removeRelayer"
      | "removeRouterAllowlist"
      | "removeSequencer"
      | "revokeRole"
      | "roles"
      | "routedTransfers"
      | "routerAllowlistRemoved"
      | "routerAllowlistTimestamp"
      | "routerBalances"
      | "routerConfigs"
      | "routerCredits"
      | "settlementStrategies"
      | "supportedAssetDomains"
      | "tickerHashToAssetId"
      | "tickerHashToNextAsset"
      | "tokenConfigs"
      | "transferStatus"
      | "unclaimedAssets"
      | "xAppConnectionManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptanceDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addSequencer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedRelayers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedSequencers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetCanonicalIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetIdToTickerHash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assignRole",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "domain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enrollRemoteRouter",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRoutersPerTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextAssetToTickerHash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeRouterAllowlistRemoval",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "proposed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposedOwnershipTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayerFeeVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remotes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRouterAllowlist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeSequencer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "roles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "routedTransfers",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "routerAllowlistRemoved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerAllowlistTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerBalances",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "routerConfigs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "routerCredits",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementStrategies",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAssetDomains",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tickerHashToAssetId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tickerHashToNextAsset",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenConfigs",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferStatus",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimedAssets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "xAppConnectionManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptanceDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRelayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSequencer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedSequencers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetCanonicalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetIdToTickerHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assignRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "domain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enrollRemoteRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRoutersPerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextAssetToTickerHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeRouterAllowlistRemoval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposedOwnershipTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerFeeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRouterAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSequencer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "routedTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerAllowlistRemoved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerAllowlistTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedAssetDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickerHashToAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickerHashToNextAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unclaimedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xAppConnectionManager",
    data: BytesLike
  ): Result;

  events: {
    "AssignRole(address,uint8)": EventFragment;
    "RelayerAdded(address,address)": EventFragment;
    "RelayerRemoved(address,address)": EventFragment;
    "RemoteAdded(uint32,address,address)": EventFragment;
    "RevokeRole(address,uint8)": EventFragment;
    "RouterAllowlistRemovalProposed(uint256)": EventFragment;
    "RouterAllowlistRemoved(bool)": EventFragment;
    "SequencerAdded(address,address)": EventFragment;
    "SequencerRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssignRole"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoteAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeRole"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RouterAllowlistRemovalProposed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterAllowlistRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SequencerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SequencerRemoved"): EventFragment;
}

export interface AssignRoleEventObject {
  account: string;
  role: number;
}
export type AssignRoleEvent = TypedEvent<
  [string, number],
  AssignRoleEventObject
>;

export type AssignRoleEventFilter = TypedEventFilter<AssignRoleEvent>;

export interface RelayerAddedEventObject {
  relayer: string;
  caller: string;
}
export type RelayerAddedEvent = TypedEvent<
  [string, string],
  RelayerAddedEventObject
>;

export type RelayerAddedEventFilter = TypedEventFilter<RelayerAddedEvent>;

export interface RelayerRemovedEventObject {
  relayer: string;
  caller: string;
}
export type RelayerRemovedEvent = TypedEvent<
  [string, string],
  RelayerRemovedEventObject
>;

export type RelayerRemovedEventFilter = TypedEventFilter<RelayerRemovedEvent>;

export interface RemoteAddedEventObject {
  domain: number;
  remote: string;
  caller: string;
}
export type RemoteAddedEvent = TypedEvent<
  [number, string, string],
  RemoteAddedEventObject
>;

export type RemoteAddedEventFilter = TypedEventFilter<RemoteAddedEvent>;

export interface RevokeRoleEventObject {
  revokedAddress: string;
  revokedRole: number;
}
export type RevokeRoleEvent = TypedEvent<
  [string, number],
  RevokeRoleEventObject
>;

export type RevokeRoleEventFilter = TypedEventFilter<RevokeRoleEvent>;

export interface RouterAllowlistRemovalProposedEventObject {
  timestamp: BigNumber;
}
export type RouterAllowlistRemovalProposedEvent = TypedEvent<
  [BigNumber],
  RouterAllowlistRemovalProposedEventObject
>;

export type RouterAllowlistRemovalProposedEventFilter =
  TypedEventFilter<RouterAllowlistRemovalProposedEvent>;

export interface RouterAllowlistRemovedEventObject {
  renounced: boolean;
}
export type RouterAllowlistRemovedEvent = TypedEvent<
  [boolean],
  RouterAllowlistRemovedEventObject
>;

export type RouterAllowlistRemovedEventFilter =
  TypedEventFilter<RouterAllowlistRemovedEvent>;

export interface SequencerAddedEventObject {
  sequencer: string;
  caller: string;
}
export type SequencerAddedEvent = TypedEvent<
  [string, string],
  SequencerAddedEventObject
>;

export type SequencerAddedEventFilter = TypedEventFilter<SequencerAddedEvent>;

export interface SequencerRemovedEventObject {
  sequencer: string;
  caller: string;
}
export type SequencerRemovedEvent = TypedEvent<
  [string, string],
  SequencerRemovedEventObject
>;

export type SequencerRemovedEventFilter =
  TypedEventFilter<SequencerRemovedEvent>;

export interface RolesManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RolesManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptanceDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSequencer(
      _sequencer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approvedRelayers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approvedSequencers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    assetCanonicalIds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    assetIdToTickerHash(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    assignRole(
      _account: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    domain(overrides?: CallOverrides): Promise<[number]>;

    enrollRemoteRouter(
      _domain: PromiseOrValue<BigNumberish>,
      _router: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    maxRoutersPerTransfer(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextAssetToTickerHash(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposeRouterAllowlistRemoval(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposed(overrides?: CallOverrides): Promise<[string]>;

    proposedOwnershipTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    relayerFeeVault(overrides?: CallOverrides): Promise<[string]>;

    remotes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRouterAllowlist(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeSequencer(
      _sequencer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      _revoke: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    routedTransfers(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    routerAllowlistRemoved(overrides?: CallOverrides): Promise<[boolean]>;

    routerAllowlistTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    routerBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    routerConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, string, string, string, BigNumber] & {
        approved: boolean;
        portalApproved: boolean;
        owner: string;
        recipient: string;
        proposed: string;
        proposedTimestamp: BigNumber;
      }
    >;

    routerCredits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    settlementStrategies(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportedAssetDomains(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tickerHashToAssetId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tickerHashToNextAsset(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenConfigs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        number,
        string,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        representation: string;
        representationDecimals: number;
        adopted: string;
        adoptedDecimals: number;
        adoptedToLocalExternalPools: string;
        approval: boolean;
        cap: BigNumber;
        custodied: BigNumber;
      }
    >;

    transferStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    unclaimedAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    xAppConnectionManager(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptanceDelay(overrides?: CallOverrides): Promise<BigNumber>;

  addRelayer(
    _relayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSequencer(
    _sequencer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approvedRelayers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approvedSequencers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  assetCanonicalIds(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  assetIdToTickerHash(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  assignRole(
    _account: PromiseOrValue<string>,
    _role: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  domain(overrides?: CallOverrides): Promise<number>;

  enrollRemoteRouter(
    _domain: PromiseOrValue<BigNumberish>,
    _router: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  maxRoutersPerTransfer(overrides?: CallOverrides): Promise<BigNumber>;

  nextAssetToTickerHash(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposeRouterAllowlistRemoval(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposed(overrides?: CallOverrides): Promise<string>;

  proposedOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  relayerFeeVault(overrides?: CallOverrides): Promise<string>;

  remotes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeRelayer(
    _relayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRouterAllowlist(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeSequencer(
    _sequencer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    _revoke: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roles(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  routedTransfers(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  routerAllowlistRemoved(overrides?: CallOverrides): Promise<boolean>;

  routerAllowlistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  routerBalances(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  routerConfigs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, string, string, string, BigNumber] & {
      approved: boolean;
      portalApproved: boolean;
      owner: string;
      recipient: string;
      proposed: string;
      proposedTimestamp: BigNumber;
    }
  >;

  routerCredits(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  settlementStrategies(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  supportedAssetDomains(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tickerHashToAssetId(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  tickerHashToNextAsset(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenConfigs(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, string, number, string, boolean, BigNumber, BigNumber] & {
      representation: string;
      representationDecimals: number;
      adopted: string;
      adoptedDecimals: number;
      adoptedToLocalExternalPools: string;
      approval: boolean;
      cap: BigNumber;
      custodied: BigNumber;
    }
  >;

  transferStatus(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  unclaimedAssets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  xAppConnectionManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptanceDelay(overrides?: CallOverrides): Promise<BigNumber>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSequencer(
      _sequencer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedRelayers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approvedSequencers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetCanonicalIds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    assetIdToTickerHash(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    assignRole(
      _account: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    domain(overrides?: CallOverrides): Promise<number>;

    enrollRemoteRouter(
      _domain: PromiseOrValue<BigNumberish>,
      _router: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    maxRoutersPerTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    nextAssetToTickerHash(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposeRouterAllowlistRemoval(overrides?: CallOverrides): Promise<void>;

    proposed(overrides?: CallOverrides): Promise<string>;

    proposedOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    relayerFeeVault(overrides?: CallOverrides): Promise<string>;

    remotes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRouterAllowlist(overrides?: CallOverrides): Promise<void>;

    removeSequencer(
      _sequencer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      _revoke: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    roles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    routedTransfers(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    routerAllowlistRemoved(overrides?: CallOverrides): Promise<boolean>;

    routerAllowlistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    routerBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, string, string, string, BigNumber] & {
        approved: boolean;
        portalApproved: boolean;
        owner: string;
        recipient: string;
        proposed: string;
        proposedTimestamp: BigNumber;
      }
    >;

    routerCredits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settlementStrategies(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    supportedAssetDomains(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tickerHashToAssetId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    tickerHashToNextAsset(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenConfigs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        number,
        string,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        representation: string;
        representationDecimals: number;
        adopted: string;
        adoptedDecimals: number;
        adoptedToLocalExternalPools: string;
        approval: boolean;
        cap: BigNumber;
        custodied: BigNumber;
      }
    >;

    transferStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    unclaimedAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xAppConnectionManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AssignRole(address,uint8)"(
      account?: null,
      role?: null
    ): AssignRoleEventFilter;
    AssignRole(account?: null, role?: null): AssignRoleEventFilter;

    "RelayerAdded(address,address)"(
      relayer?: null,
      caller?: null
    ): RelayerAddedEventFilter;
    RelayerAdded(relayer?: null, caller?: null): RelayerAddedEventFilter;

    "RelayerRemoved(address,address)"(
      relayer?: null,
      caller?: null
    ): RelayerRemovedEventFilter;
    RelayerRemoved(relayer?: null, caller?: null): RelayerRemovedEventFilter;

    "RemoteAdded(uint32,address,address)"(
      domain?: null,
      remote?: null,
      caller?: null
    ): RemoteAddedEventFilter;
    RemoteAdded(
      domain?: null,
      remote?: null,
      caller?: null
    ): RemoteAddedEventFilter;

    "RevokeRole(address,uint8)"(
      revokedAddress?: null,
      revokedRole?: null
    ): RevokeRoleEventFilter;
    RevokeRole(
      revokedAddress?: null,
      revokedRole?: null
    ): RevokeRoleEventFilter;

    "RouterAllowlistRemovalProposed(uint256)"(
      timestamp?: null
    ): RouterAllowlistRemovalProposedEventFilter;
    RouterAllowlistRemovalProposed(
      timestamp?: null
    ): RouterAllowlistRemovalProposedEventFilter;

    "RouterAllowlistRemoved(bool)"(
      renounced?: null
    ): RouterAllowlistRemovedEventFilter;
    RouterAllowlistRemoved(renounced?: null): RouterAllowlistRemovedEventFilter;

    "SequencerAdded(address,address)"(
      sequencer?: null,
      caller?: null
    ): SequencerAddedEventFilter;
    SequencerAdded(sequencer?: null, caller?: null): SequencerAddedEventFilter;

    "SequencerRemoved(address,address)"(
      sequencer?: null,
      caller?: null
    ): SequencerRemovedEventFilter;
    SequencerRemoved(
      sequencer?: null,
      caller?: null
    ): SequencerRemovedEventFilter;
  };

  estimateGas: {
    acceptanceDelay(overrides?: CallOverrides): Promise<BigNumber>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSequencer(
      _sequencer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approvedRelayers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedSequencers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetCanonicalIds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetIdToTickerHash(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assignRole(
      _account: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    domain(overrides?: CallOverrides): Promise<BigNumber>;

    enrollRemoteRouter(
      _domain: PromiseOrValue<BigNumberish>,
      _router: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    maxRoutersPerTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    nextAssetToTickerHash(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposeRouterAllowlistRemoval(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposed(overrides?: CallOverrides): Promise<BigNumber>;

    proposedOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    relayerFeeVault(overrides?: CallOverrides): Promise<BigNumber>;

    remotes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRouterAllowlist(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeSequencer(
      _sequencer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      _revoke: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routedTransfers(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerAllowlistRemoved(overrides?: CallOverrides): Promise<BigNumber>;

    routerAllowlistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    routerBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerCredits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settlementStrategies(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedAssetDomains(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tickerHashToAssetId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tickerHashToNextAsset(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenConfigs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unclaimedAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xAppConnectionManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptanceDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSequencer(
      _sequencer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approvedRelayers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedSequencers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetCanonicalIds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetIdToTickerHash(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assignRole(
      _account: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enrollRemoteRouter(
      _domain: PromiseOrValue<BigNumberish>,
      _router: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRoutersPerTransfer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextAssetToTickerHash(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeRouterAllowlistRemoval(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedOwnershipTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayerFeeVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remotes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRouterAllowlist(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeSequencer(
      _sequencer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      _revoke: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routedTransfers(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerAllowlistRemoved(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerAllowlistTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerCredits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settlementStrategies(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedAssetDomains(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tickerHashToAssetId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tickerHashToNextAsset(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenConfigs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unclaimedAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xAppConnectionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
